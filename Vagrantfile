# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|

  # A Debian distro for testing the installation of the Debian package
  config.vm.define "debhost" do |debhost|
    debhost.vm.box = "ubuntu/bionic64"
    debhost.vm.hostname = "debhost"
    debhost.vm.box_check_update = true

    # This only has to be rw so the packages can be put in ./output/packages/deb
    debhost.vm.synced_folder ".", "/vagrant", mount_options: [ "dmode=700", "fmode=400", "rw" ]

    debhost.vm.provision "shell", inline: <<-SHELL
      VERSION=`cat /vagrant/version`
      PACKAGE_NAME="asn1"

      echo "deb http://master.dl.sourceforge.net/project/d-apt/ d-apt main" > /etc/apt/sources.list.d/d-apt.list
      apt-get update
      apt-get -y --allow-unauthenticated install --reinstall d-apt-keyring
      apt-get upgrade

      # Without rng-tools, generating the GPG key will hang forever on some boxes
      apt-get install -y \
        dmd-compiler \
        dub \
        dpkg-dev \
        lintian \
        dh-make \
        debmake \
        dh-dlang \
        quilt \
        rng-tools \
        dupload

      # Configure swap space
      # Without it, build fails with "out of memory error," even though there is plenty.
      grep -q "swapfile" /etc/fstab
      if [ $? -ne 0 ]; then
        fallocate -l 512M /swapfile
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        echo '/swapfile none swap defaults 0 0' >> /etc/fstab
      fi

      # Create a GPG Key. You must have this to create the package.
      gpg --batch --gen-key /vagrant/package/deb/gpg.script

      # Copy over the entire source directory so we don't accidentally screw up the source
      mkdir -p /package/${PACKAGE_NAME}-${VERSION}
      cp -prv /vagrant/* /package/${PACKAGE_NAME}-${VERSION}
      cd /package/${PACKAGE_NAME}-${VERSION}

      # Create the package skeleton
      export DEBEMAIL=jonathan@wilbur.space
      export DEBFULLNAME="Jonathan M. Wilbur"
      dh_make --single --createorig --email jonathan@wilbur.space --copyright=mit --yes

      # Overwrite some of the skeleton files with our own
      #
      # Most files under debian/ MUST be non-executable! If you accidentally
      # make them executable, debuild will execute them, often with anomalous
      # results.
      cp -prv /vagrant/package/deb/debian/* /package/${PACKAGE_NAME}-${VERSION}/debian

      # Let's just double-tap to make sure.
      chmod -R -x /package/${PACKAGE_NAME}-${VERSION}/debian

      # This is the only one (I know of) that must be executable
      chmod +x /package/${PACKAGE_NAME}-${VERSION}/debian/rules

      # Everything is owned by root by default, but you ssh in as `vagrant`
      chown -R vagrant:vagrant /package

      # These are just example files generated by dh_make
      rm /package/asn1-${VERSION}/debian/*.ex
      rm /package/asn1-${VERSION}/debian/*.EX

    SHELL
  end

  # An RPM distro for testing the installation of the RPM package
  config.vm.define "rpmhost" do |rpmhost|
    rpmhost.vm.box = "generic/fedora27"
    rpmhost.vm.synced_folder "./build/packaging/rpm", "/vagrant/rpm"
    rpmhost.vm.box_check_update = true
    rpmhost.vm.provision "shell", inline: <<-SHELL
      yum upgrade
      curl -fsS https://dlang.org/install.sh | bash -s dmd
    SHELL
  end

  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.memory = "1024"
  end

end
