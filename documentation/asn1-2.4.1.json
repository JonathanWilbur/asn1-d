[
 {
  "name" : "asn1.constants",
  "kind" : "module",
  "file" : ".\\source\\asn1\\constants.d",
  "comment" : "    This file contains the constants and $(D enum)s used by the library.\n\n    Authors:\n    $(UL\n        $(LI $(PERSON Jonathan M. Wilbur, jonathan@wilbur.space, http://jonathan.wilbur.space))\n    )\n    Copyright: Copyright (C) Jonathan M. Wilbur\n    License: $(LINK https://mit-license.org/, MIT License)\n    Standards:\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1))\n    See_Also:\n        $(LINK https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One, The Wikipedia Page on ASN.1)\n        $(LINK https://www.strozhevsky.com/free_docs/asn1_in_simple_words.pdf, ASN.1 By Simple Words)\n        $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF, ASN.1: Communication Between Heterogeneous Systems)\n",
  "members" : [
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 28,
    "char" : 19,
    "protection" : "private",
    "selective" : [
     "write",
     "writefln",
     "writeln"
    ]
   },
   {
    "name" : "core.exception",
    "kind" : "import",
    "line" : 33,
    "char" : 19,
    "protection" : "private",
    "selective" : [
     "AssertError",
     "RangeError"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 34,
    "char" : 19,
    "protection" : "private",
    "selective" : [
     "assertNotThrown",
     "assertThrown"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 35,
    "char" : 19,
    "protection" : "private",
    "selective" : [
     "approxEqual"
    ]
   },
   {
    "name" : "std.stdio",
    "kind" : "import",
    "line" : 36,
    "char" : 19,
    "protection" : "private",
    "selective" : [
     "write",
     "writefln",
     "writeln"
    ]
   },
   {
    "name" : "ASN1Exception",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 47,
    "char" : 8,
    "deco" : "C4asn19constants32AbstractSyntaxNotation1Exception"
   },
   {
    "name" : "AbstractSyntaxNotation1Exception",
    "kind" : "class",
    "comment" : "A Generic Exception from which all other ASN.1 Exceptions will inherit.\n",
    "line" : 49,
    "char" : 1,
    "base" : "object.Exception",
    "members" : [
     {
      "name" : "std.exception",
      "kind" : "import",
      "line" : 51,
      "char" : 20,
      "protection" : "private",
      "selective" : [
       "basicExceptionCtors"
      ]
     },
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 52,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1TagClass",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 56,
    "char" : 8,
    "deco" : "E4asn19constants31AbstractSyntaxNotation1TagClass"
   },
   {
    "name" : "AbstractSyntaxNotation1TagClass",
    "kind" : "enum",
    "comment" : "\n",
    "line" : 59,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "universal",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "line" : 61,
      "char" : 5
     },
     {
      "name" : "application",
      "kind" : "enum member",
      "value" : "cast(ubyte)64u",
      "line" : 62,
      "char" : 5
     },
     {
      "name" : "contextSpecific",
      "kind" : "enum member",
      "value" : "cast(ubyte)128u",
      "line" : 63,
      "char" : 5
     },
     {
      "name" : "privatelyDefined",
      "kind" : "enum member",
      "value" : "cast(ubyte)192u",
      "line" : 64,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1Construction",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 68,
    "char" : 8,
    "deco" : "E4asn19constants35AbstractSyntaxNotation1Construction"
   },
   {
    "name" : "AbstractSyntaxNotation1Construction",
    "kind" : "enum",
    "comment" : "\n",
    "line" : 71,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "primitive",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "line" : 73,
      "char" : 5
     },
     {
      "name" : "constructed",
      "kind" : "enum member",
      "value" : "cast(ubyte)32u",
      "line" : 74,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1UniversalType",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 78,
    "char" : 8,
    "deco" : "E4asn19constants36AbstractSyntaxNotation1UniversalType"
   },
   {
    "name" : "AbstractSyntaxNotation1UniversalType",
    "kind" : "enum",
    "comment" : "    The data types, as well as their permitted construction and numeric\n    identifiers, according to the\n    $(LINK https://www.itu.int/en/pages/default.aspx,\n    International Telecommunications Union)'s\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules)\n\n    $(TABLE\n        $(TR $(TH Type)                 $(TH Construction)      $(TH Hexadecimal Value))\n        $(TR $(TD End-of-Content)       $(TD Primitive)         $(TD 0x00))\n        $(TR $(TD BOOLEAN)\t            $(TD Primitive)         $(TD 0x01))\n        $(TR $(TD INTEGER)\t            $(TD Primitive)         $(TD 0x02))\n        $(TR $(TD BIT STRING)           $(TD Both)              $(TD 0x03))\n        $(TR $(TD OCTET STRING)         $(TD Both)              $(TD 0x04))\n        $(TR $(TD NULL)                 $(TD Primitive)         $(TD 0x05))\n        $(TR $(TD OBJECT IDENTIFIER)\t$(TD Primitive)         $(TD 0x06))\n        $(TR $(TD Object Descriptor)    $(TD Both)              $(TD 0x07))\n        $(TR $(TD EXTERNAL)\t            $(TD Constructed)       $(TD 0x08))\n        $(TR $(TD REAL)            \t    $(TD Primitive)         $(TD 0x09))\n        $(TR $(TD ENUMERATED)\t        $(TD Primitive)         $(TD 0x0A))\n        $(TR $(TD EmbeddedPDV)\t        $(TD Constructed)       $(TD 0x0B))\n        $(TR $(TD UTF8String)\t        $(TD Both)              $(TD 0x0C))\n        $(TR $(TD RELATIVE-OID)\t        $(TD Primitive)         $(TD 0x0D))\n        $(TR $(TD SEQUENCE)\t            $(TD Constructed)       $(TD 0x10))\n        $(TR $(TD SET)\t                $(TD Constructed)       $(TD 0x11))\n        $(TR $(TD NumericString)\t    $(TD Both)              $(TD 0x12))\n        $(TR $(TD PrintableString)\t    $(TD Both)              $(TD 0x13))\n        $(TR $(TD T61String)\t        $(TD Both)              $(TD 0x14))\n        $(TR $(TD VideotexString)\t    $(TD Both)              $(TD 0x15))\n        $(TR $(TD IA5String)\t        $(TD Both)              $(TD 0x16))\n        $(TR $(TD UTCTime)\t            $(TD Both)              $(TD 0x17))\n        $(TR $(TD GeneralizedTime)\t    $(TD Both)              $(TD 0x18))\n        $(TR $(TD GraphicString)\t    $(TD Both)              $(TD 0x19))\n        $(TR $(TD VisibleString)\t    $(TD Both)              $(TD 0x1A))\n        $(TR $(TD GeneralString)\t    $(TD Both)              $(TD 0x1B))\n        $(TR $(TD UniversalString)\t    $(TD Both)              $(TD 0x1C))\n        $(TR $(TD CHARACTER STRING)\t    $(TD Both)              $(TD 0x1D))\n        $(TR $(TD BMPString)\t        $(TD Both)              $(TD 0x1E))\n    )\n",
    "line" : 120,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "endOfContent",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "line" : 122,
      "char" : 5
     },
     {
      "name" : "eoc",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "line" : 123,
      "char" : 5
     },
     {
      "name" : "boolean",
      "kind" : "enum member",
      "value" : "cast(ubyte)1u",
      "line" : 124,
      "char" : 5
     },
     {
      "name" : "integer",
      "kind" : "enum member",
      "value" : "cast(ubyte)2u",
      "line" : 125,
      "char" : 5
     },
     {
      "name" : "bitString",
      "kind" : "enum member",
      "value" : "cast(ubyte)3u",
      "line" : 126,
      "char" : 5
     },
     {
      "name" : "octetString",
      "kind" : "enum member",
      "value" : "cast(ubyte)4u",
      "line" : 127,
      "char" : 5
     },
     {
      "name" : "nill",
      "kind" : "enum member",
      "value" : "cast(ubyte)5u",
      "line" : 128,
      "char" : 5
     },
     {
      "name" : "objectIdentifier",
      "kind" : "enum member",
      "value" : "cast(ubyte)6u",
      "line" : 129,
      "char" : 5
     },
     {
      "name" : "oid",
      "kind" : "enum member",
      "value" : "cast(ubyte)6u",
      "line" : 130,
      "char" : 5
     },
     {
      "name" : "objectDescriptor",
      "kind" : "enum member",
      "value" : "cast(ubyte)7u",
      "line" : 131,
      "char" : 5
     },
     {
      "name" : "external",
      "kind" : "enum member",
      "value" : "cast(ubyte)8u",
      "line" : 132,
      "char" : 5
     },
     {
      "name" : "ext",
      "kind" : "enum member",
      "value" : "cast(ubyte)8u",
      "line" : 133,
      "char" : 5
     },
     {
      "name" : "realNumber",
      "kind" : "enum member",
      "value" : "cast(ubyte)9u",
      "line" : 134,
      "char" : 5
     },
     {
      "name" : "enumerated",
      "kind" : "enum member",
      "value" : "cast(ubyte)10u",
      "line" : 135,
      "char" : 5
     },
     {
      "name" : "embeddedPresentationDataValue",
      "kind" : "enum member",
      "value" : "cast(ubyte)11u",
      "line" : 136,
      "char" : 5
     },
     {
      "name" : "embeddedPDV",
      "kind" : "enum member",
      "value" : "cast(ubyte)11u",
      "line" : 137,
      "char" : 5
     },
     {
      "name" : "pdv",
      "kind" : "enum member",
      "value" : "cast(ubyte)11u",
      "line" : 138,
      "char" : 5
     },
     {
      "name" : "unicodeTransformationFormat8String",
      "kind" : "enum member",
      "value" : "cast(ubyte)12u",
      "line" : 139,
      "char" : 5
     },
     {
      "name" : "utf8String",
      "kind" : "enum member",
      "value" : "cast(ubyte)12u",
      "line" : 140,
      "char" : 5
     },
     {
      "name" : "utf8",
      "kind" : "enum member",
      "value" : "cast(ubyte)12u",
      "line" : 141,
      "char" : 5
     },
     {
      "name" : "relativeObjectIdentifier",
      "kind" : "enum member",
      "value" : "cast(ubyte)13u",
      "line" : 142,
      "char" : 5
     },
     {
      "name" : "relativeOID",
      "kind" : "enum member",
      "value" : "cast(ubyte)13u",
      "line" : 143,
      "char" : 5
     },
     {
      "name" : "roid",
      "kind" : "enum member",
      "value" : "cast(ubyte)13u",
      "line" : 144,
      "char" : 5
     },
     {
      "name" : "reserved14",
      "kind" : "enum member",
      "value" : "cast(ubyte)14u",
      "line" : 145,
      "char" : 5
     },
     {
      "name" : "reserved15",
      "kind" : "enum member",
      "value" : "cast(ubyte)15u",
      "line" : 146,
      "char" : 5
     },
     {
      "name" : "sequence",
      "kind" : "enum member",
      "value" : "cast(ubyte)16u",
      "line" : 147,
      "char" : 5
     },
     {
      "name" : "set",
      "kind" : "enum member",
      "value" : "cast(ubyte)17u",
      "line" : 148,
      "char" : 5
     },
     {
      "name" : "numericString",
      "kind" : "enum member",
      "value" : "cast(ubyte)18u",
      "line" : 149,
      "char" : 5
     },
     {
      "name" : "numeric",
      "kind" : "enum member",
      "value" : "cast(ubyte)18u",
      "line" : 150,
      "char" : 5
     },
     {
      "name" : "printableString",
      "kind" : "enum member",
      "value" : "cast(ubyte)19u",
      "line" : 151,
      "char" : 5
     },
     {
      "name" : "printable",
      "kind" : "enum member",
      "value" : "cast(ubyte)19u",
      "line" : 152,
      "char" : 5
     },
     {
      "name" : "teletexString",
      "kind" : "enum member",
      "value" : "cast(ubyte)20u",
      "line" : 153,
      "char" : 5
     },
     {
      "name" : "t61String",
      "kind" : "enum member",
      "value" : "cast(ubyte)20u",
      "line" : 154,
      "char" : 5
     },
     {
      "name" : "videotexString",
      "kind" : "enum member",
      "value" : "cast(ubyte)21u",
      "line" : 155,
      "char" : 5
     },
     {
      "name" : "internationalAlphabetNumber5String",
      "kind" : "enum member",
      "value" : "cast(ubyte)22u",
      "line" : 156,
      "char" : 5
     },
     {
      "name" : "ia5String",
      "kind" : "enum member",
      "value" : "cast(ubyte)22u",
      "line" : 157,
      "char" : 5
     },
     {
      "name" : "coordinatedUniversalTime",
      "kind" : "enum member",
      "value" : "cast(ubyte)23u",
      "line" : 158,
      "char" : 5
     },
     {
      "name" : "utcTime",
      "kind" : "enum member",
      "value" : "cast(ubyte)23u",
      "line" : 159,
      "char" : 5
     },
     {
      "name" : "generalizedTime",
      "kind" : "enum member",
      "value" : "cast(ubyte)24u",
      "line" : 160,
      "char" : 5
     },
     {
      "name" : "graphicString",
      "kind" : "enum member",
      "value" : "cast(ubyte)25u",
      "line" : 161,
      "char" : 5
     },
     {
      "name" : "graphic",
      "kind" : "enum member",
      "value" : "cast(ubyte)25u",
      "line" : 162,
      "char" : 5
     },
     {
      "name" : "visibleString",
      "kind" : "enum member",
      "value" : "cast(ubyte)26u",
      "line" : 163,
      "char" : 5
     },
     {
      "name" : "visible",
      "kind" : "enum member",
      "value" : "cast(ubyte)26u",
      "line" : 164,
      "char" : 5
     },
     {
      "name" : "generalString",
      "kind" : "enum member",
      "value" : "cast(ubyte)27u",
      "line" : 165,
      "char" : 5
     },
     {
      "name" : "general",
      "kind" : "enum member",
      "value" : "cast(ubyte)27u",
      "line" : 166,
      "char" : 5
     },
     {
      "name" : "universalString",
      "kind" : "enum member",
      "value" : "cast(ubyte)28u",
      "line" : 167,
      "char" : 5
     },
     {
      "name" : "universal",
      "kind" : "enum member",
      "value" : "cast(ubyte)28u",
      "line" : 168,
      "char" : 5
     },
     {
      "name" : "characterString",
      "kind" : "enum member",
      "value" : "cast(ubyte)29u",
      "line" : 169,
      "char" : 5
     },
     {
      "name" : "basicMultilingualPlaneString",
      "kind" : "enum member",
      "value" : "cast(ubyte)30u",
      "line" : 170,
      "char" : 5
     },
     {
      "name" : "bmpString",
      "kind" : "enum member",
      "value" : "cast(ubyte)30u",
      "line" : 171,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1LengthEncoding",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 175,
    "char" : 8,
    "deco" : "E4asn19constants37AbstractSyntaxNotation1LengthEncoding"
   },
   {
    "name" : "AbstractSyntaxNotation1LengthEncoding",
    "kind" : "enum",
    "comment" : "\n",
    "line" : 178,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "definiteShort",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "line" : 180,
      "char" : 5
     },
     {
      "name" : "indefinite",
      "kind" : "enum member",
      "value" : "cast(ubyte)128u",
      "line" : 181,
      "char" : 5
     },
     {
      "name" : "definiteLong",
      "kind" : "enum member",
      "value" : "cast(ubyte)129u",
      "line" : 182,
      "char" : 5
     },
     {
      "name" : "reserved",
      "kind" : "enum member",
      "value" : "cast(ubyte)255u",
      "line" : 183,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1RealEncodingBase",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 187,
    "char" : 8,
    "deco" : "E4asn19constants39AbstractSyntaxNotation1RealEncodingBase"
   },
   {
    "name" : "AbstractSyntaxNotation1RealEncodingBase",
    "kind" : "enum",
    "comment" : "\n",
    "line" : 190,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "base2",
      "kind" : "enum member",
      "value" : "cast(ubyte)2u",
      "line" : 192,
      "char" : 5
     },
     {
      "name" : "base8",
      "kind" : "enum member",
      "value" : "cast(ubyte)8u",
      "line" : 193,
      "char" : 5
     },
     {
      "name" : "base10",
      "kind" : "enum member",
      "value" : "cast(ubyte)10u",
      "line" : 194,
      "char" : 5
     },
     {
      "name" : "base16",
      "kind" : "enum member",
      "value" : "cast(ubyte)16u",
      "line" : 195,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1RealEncodingScale",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 199,
    "char" : 8,
    "deco" : "E4asn19constants40AbstractSyntaxNotation1RealEncodingScale"
   },
   {
    "name" : "AbstractSyntaxNotation1RealEncodingScale",
    "kind" : "enum",
    "comment" : "\n",
    "line" : 202,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "scale0",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "line" : 204,
      "char" : 5
     },
     {
      "name" : "scale1",
      "kind" : "enum member",
      "value" : "cast(ubyte)1u",
      "line" : 205,
      "char" : 5
     },
     {
      "name" : "scale2",
      "kind" : "enum member",
      "value" : "cast(ubyte)2u",
      "line" : 206,
      "char" : 5
     },
     {
      "name" : "scale3",
      "kind" : "enum member",
      "value" : "cast(ubyte)3u",
      "line" : 207,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1RealExponentEncoding",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 211,
    "char" : 8,
    "deco" : "E4asn19constants43AbstractSyntaxNotation1RealExponentEncoding"
   },
   {
    "name" : "AbstractSyntaxNotation1RealExponentEncoding",
    "kind" : "enum",
    "comment" : "\n",
    "line" : 214,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "followingOctet",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "line" : 216,
      "char" : 5
     },
     {
      "name" : "following2Octets",
      "kind" : "enum member",
      "value" : "cast(ubyte)1u",
      "line" : 217,
      "char" : 5
     },
     {
      "name" : "following3Octets",
      "kind" : "enum member",
      "value" : "cast(ubyte)2u",
      "line" : 218,
      "char" : 5
     },
     {
      "name" : "complicated",
      "kind" : "enum member",
      "value" : "cast(ubyte)3u",
      "line" : 219,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1SpecialRealValue",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 223,
    "char" : 8,
    "deco" : "E4asn19constants39AbstractSyntaxNotation1SpecialRealValue"
   },
   {
    "name" : "AbstractSyntaxNotation1SpecialRealValue",
    "kind" : "enum",
    "comment" : "    Special values for REALs, as assigned in section 8.5.9 of X.690.\n\n    Note that NOT-A-NUMBER and minus zero were added in the 2015 version.\n",
    "line" : 230,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "plusInfinity",
      "kind" : "enum member",
      "value" : "cast(ubyte)64u",
      "line" : 232,
      "char" : 5
     },
     {
      "name" : "minusInfinity",
      "kind" : "enum member",
      "value" : "cast(ubyte)65u",
      "line" : 233,
      "char" : 5
     },
     {
      "name" : "notANumber",
      "kind" : "enum member",
      "value" : "cast(ubyte)66u",
      "line" : 234,
      "char" : 5
     },
     {
      "name" : "minusZero",
      "kind" : "enum member",
      "value" : "cast(ubyte)67u",
      "line" : 235,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1Base10RealNumericalRepresentation",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 239,
    "char" : 8,
    "deco" : "E4asn19constants56AbstractSyntaxNotation1Base10RealNumericalRepresentation"
   },
   {
    "name" : "AbstractSyntaxNotation1Base10RealNumericalRepresentation",
    "kind" : "enum",
    "comment" : "    The standardized string representations of floating point numbers, as\n    specified in $(LINK https://www.iso.org/standard/12285.html, ISO 6093).\n\n    $(TABLE\n        $(TR $(TH Representation) $(TH Description) $(TH Examples))\n        $(TR $(TD NR1) $(TD Implicit decimal point) $(TD \"3\", \"-1\", \"+1000\"))\n        $(TR $(TD NR2) $(TD Explicit decimal) $(TD \"3.0\", \"-1.3\", \"-.3\"))\n        $(TR $(TD NR3) $(TD Explicit exponent) $(TD \"3.0E1\", \"123E+100\"))\n    )\n\n    Citations:\n        Dubuisson, Olivier. “Character String Types.” ASN.1:\n            Communication between Heterogeneous Systems, Morgan\n            Kaufmann, 2001, p. 143.\n",
    "line" : 257,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "nr1",
      "kind" : "enum member",
      "value" : "cast(ubyte)1u",
      "line" : 259,
      "char" : 5
     },
     {
      "name" : "nr2",
      "kind" : "enum member",
      "value" : "cast(ubyte)2u",
      "line" : 260,
      "char" : 5
     },
     {
      "name" : "nr3",
      "kind" : "enum member",
      "value" : "cast(ubyte)3u",
      "line" : 261,
      "char" : 5
     }
    ]
   },
   {
    "name" : "numericStringCharacters",
    "kind" : "variable",
    "comment" : "The acceptable characters for a NumericString\n",
    "line" : 265,
    "char" : 25,
    "storageClass" : [
     "immutable"
    ],
    "deco" : "yAa",
    "originalType" : "string",
    "init" : "\"0123456789 \""
   },
   {
    "name" : "printableStringCharacters",
    "kind" : "variable",
    "comment" : "    The acceptable characters for a printableString.\n\n    The sorting of letters below is a slight optimization:\n    they are sorted in order of decreasing frequency in the English\n    language, so that canFind will usually have to iterate through\n    fewer letters before finding a match.\n",
    "line" : 275,
    "char" : 25,
    "storageClass" : [
     "immutable"
    ],
    "deco" : "yAa",
    "originalType" : "string",
    "init" : "\"etaoinsrhdlucmfywgpbvkxqjzETAOINSRHDLUCMFYWGPBVKXQJZ0123456789 '()+,-./:=?\""
   }
  ]
 },
 {
  "name" : "asn1.compiler",
  "kind" : "module",
  "file" : ".\\source\\asn1\\compiler.d",
  "comment" : "    This library does not actually implement a compiler. This is just for the\n    future, in case that changes, or if developers want to create their own\n    ASN.1 compilers that implement this library.\n",
  "members" : [
   {
    "name" : "asn1.constants",
    "kind" : "import",
    "line" : 7,
    "char" : 15
   },
   {
    "name" : "ASN1CompilerException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 10,
    "char" : 8,
    "deco" : "C4asn18compiler40AbstractSyntaxNotation1CompilerException"
   },
   {
    "name" : "AbstractSyntaxNotation1CompilerException",
    "kind" : "class",
    "comment" : "A generic exception from which any ASN.1 compiler exception should inherit\n",
    "line" : 13,
    "char" : 1,
    "base" : "asn1.constants.AbstractSyntaxNotation1Exception",
    "members" : [
     {
      "name" : "std.exception",
      "kind" : "import",
      "line" : 15,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "basicExceptionCtors"
      ]
     },
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 16,
      "char" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.codec",
  "kind" : "module",
  "file" : ".\\source\\asn1\\codec.d",
  "comment" : "    Abstract Syntax Notation 1 is a high-level syntax specification created\n    by the $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union) in\n    $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)), that\n    abstractly defines data structures and protocol data units used by\n    programs and protocols. It defines an extensible system of data types,\n    modules, and data structures.\n\n    While described abstractly by ASN.1, the specified protocol data units\n    and data structures can be encoded via various encoding schemes, such as\n    the Basic Encoding Rules (BER), which are defined in the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules).\n    These encoding schemes uniformly relay data between systems that\n    can differ in endianness, bit-width, byte-size, operating system,\n    machine architecture, and so on.\n\n    The encoding schemata that inherit from ASN.1 are used widely in protocols\n    such as TLS, LDAP, SNMP, RDP, and many more.\n\n    This file contains all ASN.1 exceptions and the the ASN1Element class, which\n    is the abstract class from which all codecs in asn1/codecs/ will inherit.\n\n    Authors:\n    $(UL\n        $(LI $(PERSON Jonathan M. Wilbur, jonathan@wilbur.space, http://jonathan.wilbur.space))\n    )\n    Copyright: Copyright (C) Jonathan M. Wilbur\n    License: $(LINK https://mit-license.org/, MIT License)\n    Standards:\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1))\n    See_Also:\n        $(LINK https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One, The Wikipedia Page on ASN.1)\n        $(LINK https://www.strozhevsky.com/free_docs/asn1_in_simple_words.pdf, ASN.1 By Simple Words)\n        $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF, ASN.1: Communication Between Heterogeneous Systems)\n",
  "members" : [
   {
    "name" : "asn1.constants",
    "kind" : "import",
    "line" : 38,
    "char" : 15
   },
   {
    "name" : "asn1.types.alltypes",
    "kind" : "import",
    "line" : 39,
    "char" : 15
   },
   {
    "name" : "asn1.types.identification",
    "kind" : "import",
    "line" : 40,
    "char" : 15
   },
   {
    "name" : "asn1.types.oidtype",
    "kind" : "import",
    "line" : 41,
    "char" : 15
   },
   {
    "name" : "std.algorithm.mutation",
    "kind" : "import",
    "line" : 42,
    "char" : 15,
    "selective" : [
     "reverse"
    ]
   },
   {
    "name" : "std.algorithm.searching",
    "kind" : "import",
    "line" : 43,
    "char" : 15,
    "selective" : [
     "canFind"
    ]
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 44,
    "char" : 15,
    "selective" : [
     "appender",
     "Appender",
     "replace",
     "split"
    ]
   },
   {
    "name" : "std.ascii",
    "kind" : "import",
    "line" : 45,
    "char" : 15,
    "selective" : [
     "isASCII",
     "isGraphical"
    ]
   },
   {
    "name" : "std.bigint",
    "kind" : "import",
    "line" : 46,
    "char" : 15,
    "selective" : [
     "BigInt"
    ]
   },
   {
    "name" : "std.conv",
    "kind" : "import",
    "line" : 47,
    "char" : 15,
    "selective" : [
     "text",
     "to"
    ]
   },
   {
    "name" : "std.datetime.date",
    "kind" : "import",
    "line" : 48,
    "char" : 15,
    "selective" : [
     "DateTime"
    ]
   },
   {
    "name" : "std.datetime.systime",
    "kind" : "import",
    "line" : 49,
    "char" : 15,
    "selective" : [
     "SysTime"
    ]
   },
   {
    "name" : "std.datetime.timezone",
    "kind" : "import",
    "line" : 50,
    "char" : 15,
    "selective" : [
     "TimeZone",
     "UTC"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 51,
    "char" : 16,
    "protection" : "private",
    "selective" : [
     "basicExceptionCtors"
    ]
   },
   {
    "name" : "std.math",
    "kind" : "import",
    "line" : 52,
    "char" : 15,
    "selective" : [
     "isIdentical",
     "isNaN",
     "log2"
    ]
   },
   {
    "name" : "std.string",
    "kind" : "import",
    "line" : 53,
    "char" : 15,
    "selective" : [
     "indexOf"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 54,
    "char" : 15,
    "selective" : [
     "isFloatingPoint",
     "isIntegral",
     "isSigned",
     "isUnsigned"
    ]
   },
   {
    "name" : "ASN1CodecException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 57,
    "char" : 8,
    "deco" : "C4asn15codec37AbstractSyntaxNotation1CodecException"
   },
   {
    "name" : "AbstractSyntaxNotation1CodecException",
    "kind" : "class",
    "comment" : "A generic exception from which any ASN.1 codec exception may inherit\n",
    "line" : 60,
    "char" : 1,
    "base" : "asn1.constants.AbstractSyntaxNotation1Exception",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 62,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1RecursionException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 66,
    "char" : 8,
    "deco" : "C4asn15codec41AbstractSyntaxNotation1RecursionException"
   },
   {
    "name" : "AbstractSyntaxNotation1RecursionException",
    "kind" : "class",
    "comment" : "An exception that is thrown when excessively deep recursion occurs.\n",
    "line" : 69,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1CodecException",
    "members" : [
     {
      "name" : "recursionLimit",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 72,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 76,
      "char" : 5,
      "deco" : "FNaNfkAyaQdkZC4asn15codec41AbstractSyntaxNotation1RecursionException",
      "originalType" : "pure @safe (size_t recursionLimit, string whatYouAttemptedToDo, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "recursionLimit",
        "deco" : "k"
       },
       {
        "name" : "whatYouAttemptedToDo",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 96,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1TruncationException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 100,
    "char" : 8,
    "deco" : "C4asn15codec42AbstractSyntaxNotation1TruncationException"
   },
   {
    "name" : "AbstractSyntaxNotation1TruncationException",
    "kind" : "class",
    "comment" : "    An exception that is thrown when the encoded data is truncated. Note that\n    this exception is not necessarily indicative of malicious activity. If\n    encoded ASN.1 data is being transferred over a network to a host that is\n    decoding it, attempting to decode the data before the entirety of the data\n    is transferred could result in this exception.\n",
    "line" : 109,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1CodecException",
    "members" : [
     {
      "name" : "expectedBytes",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 112,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "actualBytes",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 114,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 44
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 118,
      "char" : 5,
      "deco" : "FNaNfkkAyaQdkZC4asn15codec42AbstractSyntaxNotation1TruncationException",
      "originalType" : "pure @safe (size_t expectedBytes, size_t actualBytes, string whatYouAttemptedToDo, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "expectedBytes",
        "deco" : "k"
       },
       {
        "name" : "actualBytes",
        "deco" : "k"
       },
       {
        "name" : "whatYouAttemptedToDo",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 145,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1TagException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 149,
    "char" : 8,
    "deco" : "C4asn15codec35AbstractSyntaxNotation1TagException"
   },
   {
    "name" : "AbstractSyntaxNotation1TagException",
    "kind" : "class",
    "comment" : "A generic tag-related exception\n",
    "line" : 152,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1CodecException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 154,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1TagOverflowException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 158,
    "char" : 8,
    "deco" : "C4asn15codec43AbstractSyntaxNotation1TagOverflowException"
   },
   {
    "name" : "AbstractSyntaxNotation1TagOverflowException",
    "kind" : "class",
    "comment" : "An exception thrown when the decoded tag number cannot fit into a $(D size_t)\n",
    "line" : 161,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1TagException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 163,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1TagPaddingException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 167,
    "char" : 8,
    "deco" : "C4asn15codec42AbstractSyntaxNotation1TagPaddingException"
   },
   {
    "name" : "AbstractSyntaxNotation1TagPaddingException",
    "kind" : "class",
    "comment" : "An exception thrown when the decoded tag number contains \"leading zero bytes\" (0x80)\n",
    "line" : 170,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1TagException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 172,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1TagClassException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 176,
    "char" : 8,
    "deco" : "C4asn15codec40AbstractSyntaxNotation1TagClassException"
   },
   {
    "name" : "AbstractSyntaxNotation1TagClassException",
    "kind" : "class",
    "comment" : "An exception thrown when the tag class is not what is expected\n",
    "line" : 179,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1TagException",
    "members" : [
     {
      "name" : "expectedTagClasses",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 182,
      "char" : 26,
      "storageClass" : [
       "const"
      ],
      "deco" : "xAE4asn19constants31AbstractSyntaxNotation1TagClass",
      "originalType" : "ASN1TagClass[]",
      "offset" : 40
     },
     {
      "name" : "actualTagClass",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 184,
      "char" : 28,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yE4asn19constants31AbstractSyntaxNotation1TagClass",
      "originalType" : "ASN1TagClass",
      "offset" : 48
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 188,
      "char" : 5,
      "deco" : "FNaNfAE4asn19constants31AbstractSyntaxNotation1TagClassQBxAyaQdkZCQCh5codec40AbstractSyntaxNotation1TagClassException",
      "originalType" : "pure @safe (ASN1TagClass[] expectedTagClasses, ASN1TagClass actualTagClass, string whatYouAttemptedToDo, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "expectedTagClasses",
        "deco" : "AE4asn19constants31AbstractSyntaxNotation1TagClass"
       },
       {
        "name" : "actualTagClass",
        "deco" : "E4asn19constants31AbstractSyntaxNotation1TagClass"
       },
       {
        "name" : "whatYouAttemptedToDo",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 209,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1ConstructionException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 213,
    "char" : 8,
    "deco" : "C4asn15codec44AbstractSyntaxNotation1ConstructionException"
   },
   {
    "name" : "AbstractSyntaxNotation1ConstructionException",
    "kind" : "class",
    "comment" : "An exception thrown when the construction is not what is expected\n",
    "line" : 216,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1TagException",
    "members" : [
     {
      "name" : "actualConstruction",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 219,
      "char" : 32,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yE4asn19constants35AbstractSyntaxNotation1Construction",
      "originalType" : "ASN1Construction",
      "offset" : 40
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 223,
      "char" : 5,
      "deco" : "FNaNfE4asn19constants35AbstractSyntaxNotation1ConstructionAyaQdkZCQCi5codec44AbstractSyntaxNotation1ConstructionException",
      "originalType" : "pure @safe (ASN1Construction actualConstruction, string whatYouAttemptedToDo, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "actualConstruction",
        "deco" : "E4asn19constants35AbstractSyntaxNotation1Construction"
       },
       {
        "name" : "whatYouAttemptedToDo",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 241,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1TypeException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 245,
    "char" : 8,
    "deco" : "C4asn15codec41AbstractSyntaxNotation1TagNumberException"
   },
   {
    "name" : "ASN1TagNumberException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 247,
    "char" : 8,
    "deco" : "C4asn15codec41AbstractSyntaxNotation1TagNumberException"
   },
   {
    "name" : "AbstractSyntaxNotation1TagNumberException",
    "kind" : "class",
    "comment" : "An exception thrown when the tag number or type is not what is expected\n",
    "line" : 250,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1TagException",
    "members" : [
     {
      "name" : "expectedTagNumber",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 253,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "actualTagNumber",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 255,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 44
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 259,
      "char" : 5,
      "deco" : "FNaNfAkkAyaQdkZC4asn15codec41AbstractSyntaxNotation1TagNumberException",
      "originalType" : "pure @safe (size_t[] expectedTagNumbers, size_t actualTagNumber, string whatYouAttemptedToDo, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "expectedTagNumbers",
        "deco" : "Ak"
       },
       {
        "name" : "actualTagNumber",
        "deco" : "k"
       },
       {
        "name" : "whatYouAttemptedToDo",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 281,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1LengthException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 285,
    "char" : 8,
    "deco" : "C4asn15codec38AbstractSyntaxNotation1LengthException"
   },
   {
    "name" : "AbstractSyntaxNotation1LengthException",
    "kind" : "class",
    "comment" : "A generic length-related exception\n",
    "line" : 288,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1CodecException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 290,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1LengthOverflowException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 294,
    "char" : 8,
    "deco" : "C4asn15codec46AbstractSyntaxNotation1LengthOverflowException"
   },
   {
    "name" : "AbstractSyntaxNotation1LengthOverflowException",
    "kind" : "class",
    "comment" : "An exception that is thrown when the length cannot fit inside of a $(D size_t)\n",
    "line" : 297,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1LengthException",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 301,
      "char" : 5,
      "deco" : "FNaNfAyakZC4asn15codec46AbstractSyntaxNotation1LengthOverflowException",
      "originalType" : "pure @safe (string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 309,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1LengthUndefinedException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 313,
    "char" : 8,
    "deco" : "C4asn15codec47AbstractSyntaxNotation1LengthUndefinedException"
   },
   {
    "name" : "AbstractSyntaxNotation1LengthUndefinedException",
    "kind" : "class",
    "comment" : "An exception thrown when a length encoding that is undefined or reserved by the specification is encountered\n",
    "line" : 316,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1LengthException",
    "members" : [
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 320,
      "char" : 5,
      "deco" : "FNaNfAyakZC4asn15codec47AbstractSyntaxNotation1LengthUndefinedException",
      "originalType" : "pure @safe (string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 328,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1ValueException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 332,
    "char" : 8,
    "deco" : "C4asn15codec37AbstractSyntaxNotation1ValueException"
   },
   {
    "name" : "AbstractSyntaxNotation1ValueException",
    "kind" : "class",
    "comment" : "A generic exception thrown when something is wrong with a value\n",
    "line" : 335,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1CodecException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 337,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1ValueSizeException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 341,
    "char" : 8,
    "deco" : "C4asn15codec41AbstractSyntaxNotation1ValueSizeException"
   },
   {
    "name" : "AbstractSyntaxNotation1ValueSizeException",
    "kind" : "class",
    "comment" : "An exception thrown when a value is too small or too large (in terms of bytes) to decode\n",
    "line" : 344,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1ValueException",
    "members" : [
     {
      "name" : "min",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 347,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 40
     },
     {
      "name" : "max",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 349,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 44
     },
     {
      "name" : "actual",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 351,
      "char" : 22,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yk",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 355,
      "char" : 5,
      "deco" : "FNbNfkkkAyaQdkZC4asn15codec41AbstractSyntaxNotation1ValueSizeException",
      "originalType" : "nothrow @safe (size_t min, size_t max, size_t actual, string whatYouAttemptedToDo, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "min",
        "deco" : "k"
       },
       {
        "name" : "max",
        "deco" : "k"
       },
       {
        "name" : "actual",
        "deco" : "k"
       },
       {
        "name" : "whatYouAttemptedToDo",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 381,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1ValueOverflowException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 385,
    "char" : 8,
    "deco" : "C4asn15codec45AbstractSyntaxNotation1ValueOverflowException"
   },
   {
    "name" : "AbstractSyntaxNotation1ValueOverflowException",
    "kind" : "class",
    "comment" : "An exception that is thrown when a value or part of a value does not fit into a native type\n",
    "line" : 388,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1ValueException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 390,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1ValuePaddingException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 394,
    "char" : 8,
    "deco" : "C4asn15codec44AbstractSyntaxNotation1ValuePaddingException"
   },
   {
    "name" : "AbstractSyntaxNotation1ValuePaddingException",
    "kind" : "class",
    "comment" : "An exception thrown when a value contains invalid leading or trailing zeroes or whitespace\n",
    "line" : 397,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1ValueException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 399,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1ValueCharactersException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 403,
    "char" : 8,
    "deco" : "C4asn15codec47AbstractSyntaxNotation1ValueCharactersException"
   },
   {
    "name" : "AbstractSyntaxNotation1ValueCharactersException",
    "kind" : "class",
    "comment" : "An exception thrown when a chatacter-string type contains invalid characters\n",
    "line" : 406,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1ValueException",
    "members" : [
     {
      "name" : "offendingCharacter",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 409,
      "char" : 21,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yw",
      "originalType" : "dchar",
      "offset" : 40
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "\n",
      "line" : 413,
      "char" : 5,
      "deco" : "FNaNfAyawQeQgkZC4asn15codec47AbstractSyntaxNotation1ValueCharactersException",
      "originalType" : "pure @safe (string descriptionOfPermittedCharacters, dchar offendingCharacter, string typeName, string file = __FILE__, size_t line = __LINE__)",
      "parameters" : [
       {
        "name" : "descriptionOfPermittedCharacters",
        "deco" : "Aya"
       },
       {
        "name" : "offendingCharacter",
        "deco" : "w"
       },
       {
        "name" : "typeName",
        "deco" : "Aya"
       },
       {
        "name" : "file",
        "deco" : "Aya",
        "default" : "__FILE__"
       },
       {
        "name" : "line",
        "deco" : "k",
        "default" : "cast(uint)__LINE__"
       }
      ],
      "endline" : 435,
      "endchar" : 5
     }
    ]
   },
   {
    "name" : "ASN1ValueUndefinedException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 439,
    "char" : 8,
    "deco" : "C4asn15codec46AbstractSyntaxNotation1ValueUndefinedException"
   },
   {
    "name" : "AbstractSyntaxNotation1ValueUndefinedException",
    "kind" : "class",
    "comment" : "An exception that is thrown when a value is encoded in a way that is undefined or reserved by the specification\n",
    "line" : 442,
    "char" : 1,
    "base" : "asn1.codec.AbstractSyntaxNotation1ValueException",
    "members" : [
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 444,
      "char" : 5
     }
    ]
   },
   {
    "name" : "ASN1Element",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 448,
    "char" : 8
   },
   {
    "kind" : "template",
    "comment" : "The generic element from which all other elements will inherit\n",
    "line" : 451,
    "char" : 1,
    "name" : "AbstractSyntaxNotation1Element",
    "parameters" : [
     {
      "name" : "Element",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "AbstractSyntaxNotation1Element",
      "kind" : "class",
      "line" : 451,
      "char" : 1,
      "members" : [
       {
        "name" : "__unittest_L456_C5",
        "kind" : "function",
        "line" : 456,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 464,
        "endchar" : 5
       },
       {
        "name" : "lengthRecursionCount",
        "kind" : "variable",
        "comment" : "The number of recursions used for parsing constructed elements.\n",
        "line" : 464,
        "char" : 28,
        "storageClass" : [
         "static"
        ],
        "deco" : "h",
        "init" : "0u"
       },
       {
        "name" : "valueRecursionCount",
        "kind" : "variable",
        "comment" : "The number of recursions used for parsing the values of constructed elements.\n",
        "line" : 467,
        "char" : 28,
        "storageClass" : [
         "static"
        ],
        "deco" : "h",
        "init" : "0u"
       },
       {
        "name" : "nestingRecursionLimit",
        "kind" : "variable",
        "comment" : "        The limit of recursions permitted for parsing constructed elements.\n        Feel free to increase this, if you are not afraid of your system parsing\n        deeply-nested elements, but you probably do not need to change this.\n        You probably do not want to exceed 20, because doing so could make your\n        application vulnerable to denial-of-service attacks, and you should\n        absolutely never set this to 255.\n",
        "line" : 477,
        "char" : 28,
        "storageClass" : [
         "static",
         "immutable"
        ],
        "deco" : "h",
        "init" : "5u"
       },
       {
        "name" : "notWhatYouMeantText",
        "kind" : "variable",
        "line" : 481,
        "char" : 22,
        "storageClass" : [
         "immutable"
        ],
        "type" : "string",
        "init" : "\"It is highly likely that what you attempted to decode was not the \" ~ \"data type that you thought it was. Most likely, one of the following \" ~ \"scenarios occurred: (1) you did not write this program to the exact \" ~ \"specification of the protocol, or (2) someone is attempting to hack \" ~ \"this program (review the HeartBleed bug), or (3) the client sent \" ~ \"valid data that was just too big to decode. \""
       },
       {
        "name" : "forMoreInformationText",
        "kind" : "variable",
        "line" : 488,
        "char" : 22,
        "storageClass" : [
         "immutable"
        ],
        "type" : "string",
        "init" : "\"For more information on the specific method or property that originated \" ~ \"this exception, see the documentation associated with this ASN.1 \" ~ \"library. For more information on ASN.1's data types in general, see \" ~ \"the International Telecommunications Union's X.680 specification, \" ~ \"which can be found at: \" ~ \"https://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf. \" ~ \"For more information on how those data types are supposed to be \" ~ \"encoded using Basic Encoding Rules, Canonical Encoding Rules, or \" ~ \"Distinguished Encoding Rules, see the International \" ~ \"Telecommunications Union's X.690 specification, which can be found \" ~ \"at: https://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf. \""
       },
       {
        "name" : "debugInformationText",
        "kind" : "variable",
        "line" : 500,
        "char" : 22,
        "storageClass" : [
         "immutable"
        ],
        "type" : "string",
        "init" : "\"If reviewing the documentation does not help, you may want to run \" ~ \"the ASN.1 library in debug mode. To do this, compile the source code \" ~ \"for this library with the `-debug=asn1` flag (if you are compiling \" ~ \"with `dmd`). This will display information to the console that may \" ~ \"help you diagnose any issues. \""
       },
       {
        "name" : "reportBugsText",
        "kind" : "variable",
        "line" : 506,
        "char" : 22,
        "storageClass" : [
         "immutable"
        ],
        "type" : "string",
        "init" : "\"If none of the steps above helped, and you believe that you have \" ~ \"discovered a bug, please create an issue on the GitHub page's Issues \" ~ \"section at: https://github.com/JonathanWilbur/asn1-d/issues. \""
       },
       {
        "name" : "tagClass",
        "kind" : "variable",
        "comment" : "\n",
        "line" : 512,
        "char" : 25,
        "type" : "ASN1TagClass"
       },
       {
        "name" : "construction",
        "kind" : "variable",
        "comment" : "\n",
        "line" : 514,
        "char" : 29,
        "type" : "ASN1Construction"
       },
       {
        "name" : "tagNumber",
        "kind" : "variable",
        "comment" : "\n",
        "line" : 516,
        "char" : 19,
        "type" : "size_t"
       },
       {
        "name" : "length",
        "kind" : "function",
        "comment" : "The length of the value in octets\n",
        "line" : 520,
        "char" : 12,
        "type" : "const nothrow @property @safe size_t()",
        "endline" : 523,
        "endchar" : 5
       },
       {
        "name" : "value",
        "kind" : "variable",
        "comment" : "        The octets of the encoded value.\n\n        I have been on the fence about this for a while now: I don't want\n        developers directly setting the bytes of the value. I know that making\n        value a public member means that some idiot somewhere is going to\n        bypass all of the methods I made and just directly set values himself,\n        resulting in some catastrophic bug in a major library or program\n        somewhere.\n\n        But on the other hand, if I make value a private member, and readable\n        only via property, then the same idiot that would have directly set\n        value could just directly set the value using the $(D octetString) method.\n\n        So either way, I can't stop anybody from doing something dumb with this\n        code. As Ron White says: you can't fix stupid. So value is going to be\n        a public member. But don't touch it.\n",
        "line" : 543,
        "char" : 20,
        "deco" : "Ah"
       },
       {
        "name" : "validateTag",
        "kind" : "function",
        "comment" : "        A convenient method for validating the tag of an ASN.1 element.\n\n        When writing an application that uses ASN.1 validation often has to be\n        performed for the $(D tagClass), $(D construction), and $(D tagNumber).\n        This results in a lot of code that looks like this:\n\n        ---\n        if (!canFind(acceptableTagClasses, this.tagClass))\n            throw new ASN1TagClassException\n            (acceptableTagClasses, this.tagClass, whatYouAttemptedToDo);\n\n        if (this.construction != acceptableConstruction)\n            throw new ASN1ConstructionException\n            (this.construction, whatYouAttemptedToDo);\n\n        if (!canFind(acceptableTagNumbers, this.tagNumber))\n            throw new ASN1TagNumberException\n            (acceptableTagNumbers, this.tagNumber, whatYouAttemptedToDo);\n        ---\n\n        This function was created to combat excessive code resulting from this recurring need.\n",
        "line" : 569,
        "char" : 10,
        "type" : "const @system void(ASN1TagClass[] acceptableTagClasses, ASN1Construction acceptableConstruction, size_t[] acceptableTagNumbers, string whatYouAttemptedToDo)",
        "parameters" : [
         {
          "name" : "acceptableTagClasses",
          "type" : "ASN1TagClass[]"
         },
         {
          "name" : "acceptableConstruction",
          "type" : "ASN1Construction"
         },
         {
          "name" : "acceptableTagNumbers",
          "type" : "size_t[]"
         },
         {
          "name" : "whatYouAttemptedToDo",
          "type" : "string"
         }
        ],
        "endline" : 594,
        "endchar" : 5
       },
       {
        "name" : "validateTag",
        "kind" : "function",
        "comment" : "        A convenient method for validating the tag of an ASN.1 element.\n\n        When writing an application that uses ASN.1 validation often has to be\n        performed for the $(D tagClass), $(D construction), and $(D tagNumber).\n        This results in a lot of code that looks like this:\n\n        ---\n        if (!canFind(acceptableTagClasses, this.tagClass))\n            throw new ASN1TagClassException\n            (acceptableTagClasses, this.tagClass, whatYouAttemptedToDo);\n\n        if (this.construction != acceptableConstruction)\n            throw new ASN1ConstructionException\n            (this.construction, whatYouAttemptedToDo);\n\n        if (!canFind(acceptableTagNumbers, this.tagNumber))\n            throw new ASN1TagNumberException\n            (acceptableTagNumbers, this.tagNumber, whatYouAttemptedToDo);\n        ---\n\n        This function was created to combat excessive code resulting from this recurring need.\n\n        Since the construction sometimes does not matter, this method was created.\n        No validation of the element construction is performed if this variant of\n        $(D validateTag) is used.\n",
        "line" : 624,
        "char" : 10,
        "type" : "const @system void(ASN1TagClass[] acceptableTagClasses, size_t[] acceptableTagNumbers, string whatYouAttemptedToDo)",
        "parameters" : [
         {
          "name" : "acceptableTagClasses",
          "type" : "ASN1TagClass[]"
         },
         {
          "name" : "acceptableTagNumbers",
          "type" : "size_t[]"
         },
         {
          "name" : "whatYouAttemptedToDo",
          "type" : "string"
         }
        ],
        "endline" : 644,
        "endchar" : 5
       },
       {
        "name" : "isUniversal",
        "kind" : "function",
        "comment" : "        A convenience method for more concisely determining if an element\n        is of UNIVERSAL tag class.\n",
        "line" : 651,
        "char" : 10,
        "type" : "const nothrow @nogc @property @safe bool()",
        "endline" : 654,
        "endchar" : 5
       },
       {
        "name" : "isApplication",
        "kind" : "function",
        "comment" : "        A convenience method for more concisely determining if an element\n        is of APPLICATION tag class.\n",
        "line" : 661,
        "char" : 10,
        "type" : "const nothrow @nogc @property @safe bool()",
        "endline" : 664,
        "endchar" : 5
       },
       {
        "name" : "isContextSpecific",
        "kind" : "function",
        "comment" : "        A convenience method for more concisely determining if an element\n        is of CONTEXT-SPECIFIC tag class.\n",
        "line" : 671,
        "char" : 10,
        "type" : "const nothrow @nogc @property @safe bool()",
        "endline" : 674,
        "endchar" : 5
       },
       {
        "name" : "isPrivate",
        "kind" : "function",
        "comment" : "        A convenience method for more concisely determining if an element\n        is of PRIVATE tag class.\n",
        "line" : 681,
        "char" : 10,
        "type" : "const nothrow @nogc @property @safe bool()",
        "endline" : 684,
        "endchar" : 5
       },
       {
        "name" : "isPrimitive",
        "kind" : "function",
        "comment" : "        A convenience method for more concisely determining if an element\n        is of primitive or constructed construction.\n",
        "line" : 691,
        "char" : 10,
        "type" : "const nothrow @nogc @property @safe bool()",
        "endline" : 694,
        "endchar" : 5
       },
       {
        "name" : "isConstructed",
        "kind" : "function",
        "comment" : "        A convenience method for more concisely determining if an element\n        is of primitive or constructed construction.\n",
        "line" : 701,
        "char" : 10,
        "type" : "const nothrow @nogc @property @safe bool()",
        "endline" : 704,
        "endchar" : 5
       },
       {
        "name" : "LengthEncodingPreference",
        "kind" : "enum",
        "comment" : "        Determines how the lengths of elements are encoded, if you have a choice.\n        When using Distinguished Encoding Rules (DER), this is ignored entirely,\n        since only definite-length encoding is permitted, for instance. Used for\n        setting lengthEncodingPreference in elements where you have a choice.\n",
        "line" : 713,
        "char" : 5,
        "baseDeco" : "h",
        "members" : [
         {
          "name" : "definite",
          "kind" : "enum member",
          "line" : 715,
          "char" : 9
         },
         {
          "name" : "indefinite",
          "kind" : "enum member",
          "line" : 716,
          "char" : 9
         }
        ]
       },
       {
        "name" : "endOfContent",
        "kind" : "function",
        "comment" : "        \"Decodes\" an $(MONO END OF CONTENT), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
        "line" : 730,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property void()"
       },
       {
        "name" : "boolean",
        "kind" : "function",
        "comment" : "Decodes a boolean\n",
        "line" : 734,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property bool()"
       },
       {
        "name" : "boolean",
        "kind" : "function",
        "comment" : "Encodes a boolean\n",
        "line" : 738,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in bool value)",
        "parameters" : [
         {
          "name" : "value",
          "deco" : "b",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L741_C5",
        "kind" : "function",
        "line" : 741,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 754,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Decodes an integer\n",
        "line" : 755,
        "char" : 7,
        "name" : "integer",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
        "members" : [
         {
          "name" : "integer",
          "kind" : "function",
          "line" : 755,
          "char" : 7,
          "storageClass" : [
           "abstract"
          ],
          "type" : "const @property T()"
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : "Encodes an integer\n",
        "line" : 759,
        "char" : 10,
        "name" : "integer",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
        "members" : [
         {
          "name" : "integer",
          "kind" : "function",
          "line" : 759,
          "char" : 10,
          "storageClass" : [
           "abstract"
          ],
          "type" : "@property void(in T value)",
          "parameters" : [
           {
            "name" : "value",
            "type" : "T",
            "storageClass" : [
             "in"
            ]
           }
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L763_C5",
        "kind" : "function",
        "line" : 763,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 782,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L783_C5",
        "kind" : "function",
        "line" : 783,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 801,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L802_C5",
        "kind" : "function",
        "line" : 802,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 821,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L822_C5",
        "kind" : "function",
        "line" : 822,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 838,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L839_C5",
        "kind" : "function",
        "line" : 839,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1010,
        "endchar" : 5
       },
       {
        "name" : "bitString",
        "kind" : "function",
        "line" : 1011,
        "char" : 12,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property bool[]()"
       },
       {
        "name" : "bitString",
        "kind" : "function",
        "line" : 1014,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in bool[] value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "bool[]",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L1017_C5",
        "kind" : "function",
        "line" : 1017,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1034,
        "endchar" : 5
       },
       {
        "name" : "octetString",
        "kind" : "function",
        "comment" : "Decodes a ubyte[] array\n",
        "line" : 1035,
        "char" : 13,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property ubyte[]()"
       },
       {
        "name" : "octetString",
        "kind" : "function",
        "comment" : "Encodes a ubyte[] array\n",
        "line" : 1039,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in ubyte[] value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "ubyte[]",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L1042_C5",
        "kind" : "function",
        "line" : 1042,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1053,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1054_C5",
        "kind" : "function",
        "line" : 1054,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1064,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1065_C5",
        "kind" : "function",
        "line" : 1065,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1088,
        "endchar" : 5
       },
       {
        "name" : "nill",
        "kind" : "function",
        "comment" : "        \"Decodes\" a $(MONO NULL), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Note:\n            I had to name this method \"nill,\" because \"NULL\" is a keyword in D.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
        "line" : 1089,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property void()"
       },
       {
        "name" : "oid",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 1092,
        "char" : 12,
        "type" : "objectIdentifier"
       },
       {
        "name" : "objectID",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 1094,
        "char" : 12,
        "type" : "objectIdentifier"
       },
       {
        "name" : "objectIdentifier",
        "kind" : "function",
        "comment" : "Decodes an Object Identifier\n",
        "line" : 1097,
        "char" : 9,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property OID()"
       },
       {
        "name" : "objectIdentifier",
        "kind" : "function",
        "comment" : "Encodes an Object Identifier\n",
        "line" : 1101,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in OID value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "OID",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L1104_C5",
        "kind" : "function",
        "line" : 1104,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1208,
        "endchar" : 5
       },
       {
        "name" : "objectDescriptor",
        "kind" : "function",
        "comment" : "        Decodes an ObjectDescriptor, which is a string consisting of only\n        graphical characters. In fact, ObjectDescriptor is actually implicitly\n        just a GraphicString! The formal specification for an ObjectDescriptor\n        is:\n\n        $(I ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        GraphicString is just 0x20 to 0x7E, therefore ObjectDescriptor is just\n        0x20 to 0x7E.\n\n        Sources:\n            $(LINK ,\n                ASN.1: Communication Between Heterogeneous Systems, pages 175-178)\n            $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022,\n                The Wikipedia Page on ISO 2022)\n            $(LINK https://www.iso.org/standard/22747.html, ISO 2022)\n",
        "line" : 1209,
        "char" : 12,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property string()"
       },
       {
        "name" : "objectDescriptor",
        "kind" : "function",
        "comment" : "        Encodes an ObjectDescriptor, which is a string consisting of only\n        graphical characters. In fact, ObjectDescriptor is actually implicitly\n        just a GraphicString! The formal specification for an ObjectDescriptor\n        is:\n\n        $(I ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        GraphicString is just 0x20 to 0x7E, therefore ObjectDescriptor is just\n        0x20 to 0x7E.\n\n        Sources:\n            $(LINK ,\n                ASN.1: Communication Between Heterogeneous Systems, pages 175-178)\n            $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022,\n                The Wikipedia Page on ISO 2022)\n            $(LINK https://www.iso.org/standard/22747.html, ISO 2022)\n",
        "line" : 1230,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L1233_C5",
        "kind" : "function",
        "line" : 1233,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1277,
        "endchar" : 5
       },
       {
        "name" : "external",
        "kind" : "function",
        "comment" : "        Decodes an $(MONO EXTERNAL), which is a constructed data type, defined in\n        the $(LINK https://www.itu.int, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EXTERNAL) as:\n\n        $(PRE\n            EXTERNAL := [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        This assumes AUTOMATIC TAGS, so all of the identification choices\n        will be context-specific and numbered from 0 to 2.\n",
        "line" : 1278,
        "char" : 14,
        "storageClass" : [
         "abstract",
         "deprecated"
        ],
        "type" : "const @property External()"
       },
       {
        "name" : "external",
        "kind" : "function",
        "comment" : "        Encodes an $(MONO EXTERNAL), which is a constructed data type, defined in\n        the $(LINK https://www.itu.int, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EXTERNAL) as:\n\n        $(PRE\n            EXTERNAL := [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        This assumes AUTOMATIC TAGS, so all of the identification choices\n        will be context-specific and numbered from 0 to 2.\n",
        "line" : 1303,
        "char" : 10,
        "storageClass" : [
         "abstract",
         "deprecated"
        ],
        "type" : "@property void(in External value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "External",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L1307_C5",
        "kind" : "function",
        "line" : 1307,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1346,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Encodes a floating-point number\n",
        "line" : 1347,
        "char" : 7,
        "name" : "realNumber",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "constraint" : "isFloatingPoint!T",
        "members" : [
         {
          "name" : "realNumber",
          "kind" : "function",
          "line" : 1347,
          "char" : 7,
          "storageClass" : [
           "abstract"
          ],
          "type" : "const @property T()"
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : "Encodes a floating-point number\n",
        "line" : 1351,
        "char" : 10,
        "name" : "realNumber",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "constraint" : "isFloatingPoint!T",
        "members" : [
         {
          "name" : "realNumber",
          "kind" : "function",
          "line" : 1351,
          "char" : 10,
          "storageClass" : [
           "abstract"
          ],
          "type" : "@property void(in T value)",
          "parameters" : [
           {
            "name" : "value",
            "type" : "T",
            "storageClass" : [
             "in"
            ]
           }
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L1354_C5",
        "kind" : "function",
        "line" : 1354,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1381,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1382_C5",
        "kind" : "function",
        "line" : 1382,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1406,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1407_C5",
        "kind" : "function",
        "line" : 1407,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1506,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1507_C5",
        "kind" : "function",
        "line" : 1507,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1558,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1559_C5",
        "kind" : "function",
        "line" : 1559,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1594,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1595_C5",
        "kind" : "function",
        "line" : 1595,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1694,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1695_C5",
        "kind" : "function",
        "line" : 1695,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1758,
        "endchar" : 5
       },
       {
        "kind" : "template",
        "comment" : "Encodes an integer that represents an ENUMERATED value\n",
        "line" : 1759,
        "char" : 7,
        "name" : "enumerated",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "constraint" : "isIntegral!T && isSigned!T",
        "members" : [
         {
          "name" : "enumerated",
          "kind" : "function",
          "line" : 1759,
          "char" : 7,
          "storageClass" : [
           "abstract"
          ],
          "type" : "const @property T()"
         }
        ]
       },
       {
        "kind" : "template",
        "comment" : "Decodes an integer that represents an ENUMERATED value\n",
        "line" : 1763,
        "char" : 10,
        "name" : "enumerated",
        "parameters" : [
         {
          "name" : "T",
          "kind" : "type"
         }
        ],
        "constraint" : "isIntegral!T && isSigned!T",
        "members" : [
         {
          "name" : "enumerated",
          "kind" : "function",
          "line" : 1763,
          "char" : 10,
          "storageClass" : [
           "abstract"
          ],
          "type" : "@property void(in T value)",
          "parameters" : [
           {
            "name" : "value",
            "type" : "T",
            "storageClass" : [
             "in"
            ]
           }
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L1767_C5",
        "kind" : "function",
        "line" : 1767,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1784,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1785_C5",
        "kind" : "function",
        "line" : 1785,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1800,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1801_C5",
        "kind" : "function",
        "line" : 1801,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1818,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1819_C5",
        "kind" : "function",
        "line" : 1819,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 1829,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L1830_C5",
        "kind" : "function",
        "line" : 1830,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2002,
        "endchar" : 5
       },
       {
        "name" : "embeddedPDV",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2002,
        "char" : 12,
        "type" : "embeddedPresentationDataValue"
       },
       {
        "name" : "embeddedPresentationDataValue",
        "kind" : "function",
        "comment" : "        Decodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n        the $(LINK https://www.itu.int, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes AUTOMATIC TAGS, so all of the identification choices\n        will be context-specific and numbered from 0 to 5.\n",
        "line" : 2032,
        "char" : 17,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property EmbeddedPDV()"
       },
       {
        "name" : "embeddedPresentationDataValue",
        "kind" : "function",
        "comment" : "        Encodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n        the $(LINK https://www.itu.int, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes AUTOMATIC TAGS, so all of the identification choices\n        will be context-specific and numbered from 0 to 5.\n",
        "line" : 2063,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in EmbeddedPDV value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "EmbeddedPDV",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2066_C5",
        "kind" : "function",
        "line" : 2066,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2090,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2091_C5",
        "kind" : "function",
        "line" : 2091,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2107,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2108_C5",
        "kind" : "function",
        "line" : 2108,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2124,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2125_C5",
        "kind" : "function",
        "line" : 2125,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2142,
        "endchar" : 5
       },
       {
        "name" : "utf8String",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2142,
        "char" : 12,
        "type" : "unicodeTransformationFormat8String"
       },
       {
        "name" : "unicodeTransformationFormat8String",
        "kind" : "function",
        "comment" : "Decodes a UTF-8 String\n",
        "line" : 2145,
        "char" : 12,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property string()"
       },
       {
        "name" : "unicodeTransformationFormat8String",
        "kind" : "function",
        "comment" : "Encodes a UTF-8 String\n",
        "line" : 2149,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2152_C5",
        "kind" : "function",
        "line" : 2152,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2165,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2166_C5",
        "kind" : "function",
        "line" : 2166,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2176,
        "endchar" : 5
       },
       {
        "name" : "roid",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2176,
        "char" : 12,
        "type" : "relativeObjectIdentifier"
       },
       {
        "name" : "relativeOID",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2178,
        "char" : 12,
        "type" : "relativeObjectIdentifier"
       },
       {
        "name" : "relativeObjectIdentifier",
        "kind" : "function",
        "comment" : "Decodes a portion of an Object Identifier\n",
        "line" : 2181,
        "char" : 15,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property OIDNode[]()"
       },
       {
        "name" : "relativeObjectIdentifier",
        "kind" : "function",
        "comment" : "Encodes a porition of an Object Identifier\n",
        "line" : 2185,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in OIDNode[] value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "OIDNode[]",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2188_C5",
        "kind" : "function",
        "line" : 2188,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2205,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2206_C5",
        "kind" : "function",
        "line" : 2206,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2258,
        "endchar" : 5
       },
       {
        "name" : "sequence",
        "kind" : "function",
        "comment" : "        Decodes an array of elements.\n\n        Credits:\n            Thanks to StackOverflow user\n            $(LINK https://stackoverflow.com/users/359297/biotronic, BioTronic)\n            for teaching me how to create the abstract method that uses the\n            child class as a template.\n",
        "line" : 2259,
        "char" : 15,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property Element[]()"
       },
       {
        "name" : "sequence",
        "kind" : "function",
        "comment" : "        Encodes an array of elements.\n\n        Credits:\n            Thanks to StackOverflow user\n            $(LINK https://stackoverflow.com/users/359297/biotronic, BioTronic)\n            for teaching me how to create the abstract method that uses the\n            child class as a template.\n",
        "line" : 2271,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in Element[] value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "Element[]",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "set",
        "kind" : "function",
        "comment" : "        Decodes an array of elements.\n\n        Credits:\n            Thanks to StackOverflow user\n            $(LINK https://stackoverflow.com/users/359297/biotronic, BioTronic)\n            for teaching me how to create the abstract method that uses the\n            child class as a template.\n",
        "line" : 2283,
        "char" : 15,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property Element[]()"
       },
       {
        "name" : "set",
        "kind" : "function",
        "comment" : "        Encodes an array of elements.\n\n        Credits:\n            Thanks to StackOverflow user\n            $(LINK https://stackoverflow.com/users/359297/biotronic, BioTronic)\n            for teaching me how to create the abstract method that uses the\n            child class as a template.\n",
        "line" : 2295,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in Element[] value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "Element[]",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "numericString",
        "kind" : "function",
        "comment" : "        Decodes a string, where the characters of the string are limited to\n        0 - 9 and space.\n",
        "line" : 2302,
        "char" : 12,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property string()"
       },
       {
        "name" : "numericString",
        "kind" : "function",
        "comment" : "        Encodes a string, where the characters of the string are limited to\n        0 - 9 and space.\n",
        "line" : 2309,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2312_C5",
        "kind" : "function",
        "line" : 2312,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2329,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2330_C5",
        "kind" : "function",
        "line" : 2330,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2344,
        "endchar" : 5
       },
       {
        "name" : "printableString",
        "kind" : "function",
        "comment" : "        Decodes a string that will only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n",
        "line" : 2345,
        "char" : 12,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property string()"
       },
       {
        "name" : "printableString",
        "kind" : "function",
        "comment" : "        Encodes a string that will only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n",
        "line" : 2353,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2356_C5",
        "kind" : "function",
        "line" : 2356,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2378,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2379_C5",
        "kind" : "function",
        "line" : 2379,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2389,
        "endchar" : 5
       },
       {
        "name" : "t61String",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2389,
        "char" : 12,
        "type" : "teletexString"
       },
       {
        "name" : "teletexString",
        "kind" : "function",
        "comment" : "Decodes bytes representing the T.61 Character Set\n",
        "line" : 2392,
        "char" : 13,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property ubyte[]()"
       },
       {
        "name" : "teletexString",
        "kind" : "function",
        "comment" : "Encodes bytes representing the T.61 Character Set\n",
        "line" : 2396,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in ubyte[] value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "ubyte[]",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2399_C5",
        "kind" : "function",
        "line" : 2399,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2412,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2413_C5",
        "kind" : "function",
        "line" : 2413,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2423,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2424_C5",
        "kind" : "function",
        "line" : 2424,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2434,
        "endchar" : 5
       },
       {
        "name" : "videotexString",
        "kind" : "function",
        "line" : 2435,
        "char" : 13,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property ubyte[]()"
       },
       {
        "name" : "videotexString",
        "kind" : "function",
        "line" : 2438,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in ubyte[] value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "ubyte[]",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2441_C5",
        "kind" : "function",
        "line" : 2441,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2454,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2455_C5",
        "kind" : "function",
        "line" : 2455,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2465,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2466_C5",
        "kind" : "function",
        "line" : 2466,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2477,
        "endchar" : 5
       },
       {
        "name" : "ia5String",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2477,
        "char" : 12,
        "type" : "internationalAlphabetNumber5String"
       },
       {
        "name" : "internationalAlphabetNumber5String",
        "kind" : "function",
        "comment" : "Decodes a string of ASCII characters\n",
        "line" : 2480,
        "char" : 12,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property string()"
       },
       {
        "name" : "internationalAlphabetNumber5String",
        "kind" : "function",
        "comment" : "Encodes a string of ASCII characters\n",
        "line" : 2484,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2487_C5",
        "kind" : "function",
        "line" : 2487,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2501,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2502_C5",
        "kind" : "function",
        "line" : 2502,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2512,
        "endchar" : 5
       },
       {
        "name" : "utc",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2512,
        "char" : 12,
        "type" : "coordinatedUniversalTime"
       },
       {
        "name" : "utcTime",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2514,
        "char" : 12,
        "type" : "coordinatedUniversalTime"
       },
       {
        "name" : "coordinatedUniversalTime",
        "kind" : "function",
        "comment" : "Decodes a DateTime\n",
        "line" : 2517,
        "char" : 14,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property DateTime()"
       },
       {
        "name" : "coordinatedUniversalTime",
        "kind" : "function",
        "comment" : "Encodes a DateTime\n",
        "line" : 2521,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in DateTime value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "DateTime",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2524_C5",
        "kind" : "function",
        "line" : 2524,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2535,
        "endchar" : 5
       },
       {
        "name" : "generalizedTime",
        "kind" : "function",
        "comment" : "Decodes a DateTime\n",
        "line" : 2536,
        "char" : 14,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property DateTime()"
       },
       {
        "name" : "generalizedTime",
        "kind" : "function",
        "comment" : "Encodes a DateTime\n",
        "line" : 2540,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in DateTime value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "DateTime",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2543_C5",
        "kind" : "function",
        "line" : 2543,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2563,
        "endchar" : 5
       },
       {
        "name" : "graphicString",
        "kind" : "function",
        "comment" : "        Decodes an ASCII string that contains only characters between and\n        including 0x20 and 0x75.\n\n        Sources:\n            $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF, ASN.1: Communication Between Heterogeneous Systems, pages 175-178)\n            $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022)\n            $(LINK https://www.iso.org/standard/22747.html, ISO 2022)\n\n",
        "line" : 2565,
        "char" : 12,
        "storageClass" : [
         "abstract",
         "deprecated"
        ],
        "type" : "const @property string()"
       },
       {
        "name" : "graphicString",
        "kind" : "function",
        "comment" : "        Encodes an ASCII string that contains only characters between and\n        including 0x20 and 0x75.\n\n        Sources:\n            $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF, ASN.1: Communication Between Heterogeneous Systems, pages 175-178)\n            $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022)\n            $(LINK https://www.iso.org/standard/22747.html, ISO 2022)\n\n",
        "line" : 2579,
        "char" : 10,
        "storageClass" : [
         "abstract",
         "deprecated"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2582_C5",
        "kind" : "function",
        "line" : 2582,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2605,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2606_C5",
        "kind" : "function",
        "line" : 2606,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2616,
        "endchar" : 5
       },
       {
        "name" : "iso646String",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2616,
        "char" : 12,
        "type" : "visibleString"
       },
       {
        "name" : "visibleString",
        "kind" : "function",
        "comment" : "        Decodes a string that only contains characters between and including\n        0x20 and 0x7E. (Honestly, I don't know how this differs from\n        GraphicalString.)\n",
        "line" : 2623,
        "char" : 12,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property string()"
       },
       {
        "name" : "visibleString",
        "kind" : "function",
        "comment" : "        Encodes a string that only contains characters between and including\n        0x20 and 0x7E. (Honestly, I don't know how this differs from\n        GraphicalString.)\n",
        "line" : 2631,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2634_C5",
        "kind" : "function",
        "line" : 2634,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2657,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2658_C5",
        "kind" : "function",
        "line" : 2658,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2668,
        "endchar" : 5
       },
       {
        "name" : "generalString",
        "kind" : "function",
        "comment" : "Decodes a string containing only ASCII characters.\n",
        "line" : 2670,
        "char" : 12,
        "storageClass" : [
         "abstract",
         "deprecated"
        ],
        "type" : "@property string()"
       },
       {
        "name" : "generalString",
        "kind" : "function",
        "comment" : "Encodes a string containing only ASCII characters.\n",
        "line" : 2675,
        "char" : 10,
        "storageClass" : [
         "abstract",
         "deprecated"
        ],
        "type" : "@property void(in string value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "string",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2678_C5",
        "kind" : "function",
        "line" : 2678,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2692,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2693_C5",
        "kind" : "function",
        "line" : 2693,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2703,
        "endchar" : 5
       },
       {
        "name" : "universalString",
        "kind" : "function",
        "comment" : "Decodes a string of UTF-32 characters\n",
        "line" : 2704,
        "char" : 13,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property dstring()"
       },
       {
        "name" : "universalString",
        "kind" : "function",
        "comment" : "Encodes a string of UTF-32 characters\n",
        "line" : 2708,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in dstring value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "dstring",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2711_C5",
        "kind" : "function",
        "line" : 2711,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2724,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2725_C5",
        "kind" : "function",
        "line" : 2725,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2760,
        "endchar" : 5
       },
       {
        "name" : "characterString",
        "kind" : "function",
        "comment" : "        Decodes a $(MONO CHARACTER STRING), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CHARACTER STRING) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes AUTOMATIC TAGS, so all of the identification choices\n        will be context-specific and numbered from 0 to 5.\n",
        "line" : 2761,
        "char" : 21,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property CharacterString()"
       },
       {
        "name" : "characterString",
        "kind" : "function",
        "comment" : "        Encodes a $(MONO CHARACTER STRING), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CHARACTER STRING) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes AUTOMATIC TAGS, so all of the identification choices\n        will be context-specific and numbered from 0 to 5.\n",
        "line" : 2790,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in CharacterString value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "CharacterString",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2793_C5",
        "kind" : "function",
        "line" : 2793,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2815,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2816_C5",
        "kind" : "function",
        "line" : 2816,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2832,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2833_C5",
        "kind" : "function",
        "line" : 2833,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2849,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2850_C5",
        "kind" : "function",
        "line" : 2850,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2870,
        "endchar" : 5
       },
       {
        "name" : "bmpString",
        "kind" : "alias",
        "comment" : "\n",
        "line" : 2870,
        "char" : 12,
        "type" : "basicMultilingualPlaneString"
       },
       {
        "name" : "basicMultilingualPlaneString",
        "kind" : "function",
        "comment" : "Decodes a string of UTF-16 characters\n",
        "line" : 2873,
        "char" : 13,
        "storageClass" : [
         "abstract"
        ],
        "type" : "const @property wstring()"
       },
       {
        "name" : "basicMultilingualPlaneString",
        "kind" : "function",
        "comment" : "Encodes a string of UTF-16 characters\n",
        "line" : 2877,
        "char" : 10,
        "storageClass" : [
         "abstract"
        ],
        "type" : "@property void(in wstring value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "wstring",
          "storageClass" : [
           "in"
          ]
         }
        ]
       },
       {
        "name" : "__unittest_L2880_C5",
        "kind" : "function",
        "line" : 2880,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2893,
        "endchar" : 5
       },
       {
        "name" : "__unittest_L2894_C5",
        "kind" : "function",
        "line" : 2894,
        "char" : 5,
        "storageClass" : [
         "@system"
        ],
        "endline" : 2903,
        "endchar" : 1
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.interfaces",
  "kind" : "module",
  "file" : ".\\source\\asn1\\interfaces.d",
  "members" : [
   {
    "name" : "Byteable",
    "kind" : "interface",
    "comment" : "    An interface for anything that can be converted to and from bytes.\n",
    "line" : 7,
    "char" : 1,
    "members" : [
     {
      "name" : "fromBytes",
      "kind" : "function",
      "comment" : "Returns: the number of bytes read from the start of the input array\n",
      "line" : 10,
      "char" : 19,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FxAhZk",
      "originalType" : "size_t(in ubyte[])",
      "parameters" : [
       {
        "deco" : "xAh"
       }
      ]
     },
     {
      "name" : "toBytes",
      "kind" : "function",
      "comment" : "Returns: the byte representation of the implementing instance\n",
      "line" : 12,
      "char" : 20,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFZAh"
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.types.alltypes",
  "kind" : "module",
  "file" : ".\\source\\asn1\\types\\alltypes.d",
  "members" : [
   {
    "name" : "asn1.types.universal.characterstring",
    "kind" : "import",
    "line" : 3,
    "char" : 5
   },
   {
    "name" : "asn1.types.universal.embeddedpdv",
    "kind" : "import",
    "line" : 4,
    "char" : 5
   },
   {
    "name" : "asn1.types.universal.external",
    "kind" : "import",
    "line" : 5,
    "char" : 5
   },
   {
    "name" : "asn1.types.universal.objectidentifier",
    "kind" : "import",
    "line" : 6,
    "char" : 5
   }
  ]
 },
 {
  "name" : "asn1.types.identification",
  "kind" : "module",
  "file" : ".\\source\\asn1\\types\\identification.d",
  "members" : [
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Nullable"
    ]
   },
   {
    "name" : "asn1.types.universal.objectidentifier",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "ASN1ContextNegotiation",
    "kind" : "struct",
    "comment" : "\n",
    "line" : 7,
    "char" : 1,
    "members" : [
     {
      "name" : "presentationContextID",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 10,
      "char" : 22,
      "deco" : "i",
      "originalType" : "ptrdiff_t",
      "init" : "0",
      "offset" : 0
     },
     {
      "name" : "transferSyntax",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 12,
      "char" : 29,
      "deco" : "C4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "ObjectIdentifier",
      "offset" : 4
     },
     {
      "name" : "directReference",
      "kind" : "alias",
      "line" : 15,
      "char" : 12
     },
     {
      "name" : "indirectReference",
      "kind" : "alias",
      "line" : 16,
      "char" : 12
     }
    ]
   },
   {
    "name" : "ASN1Syntaxes",
    "kind" : "struct",
    "comment" : "\n",
    "line" : 21,
    "char" : 1,
    "members" : [
     {
      "name" : "abstractSyntax",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 24,
      "char" : 29,
      "deco" : "C4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "ObjectIdentifier",
      "offset" : 0
     },
     {
      "name" : "transferSyntax",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 26,
      "char" : 29,
      "deco" : "C4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "ObjectIdentifier",
      "offset" : 4
     }
    ]
   },
   {
    "name" : "ASN1ContextSwitchingTypeID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 30,
    "char" : 8,
    "deco" : "S4asn15types14identification38ASN1ContextSwitchingTypeIdentification"
   },
   {
    "name" : "ASN1ContextSwitchingTypeIdentification",
    "kind" : "struct",
    "comment" : "    This can be used for the creation of Externals, EmbeddedPDVs, and CharacterStrings.\n",
    "line" : 35,
    "char" : 1,
    "members" : [
     {
      "name" : "syntaxes",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 38,
      "char" : 34,
      "deco" : "S3std8typecons__T8NullableTS4asn15types14identification12ASN1SyntaxesZQCb",
      "originalType" : "Nullable!ASN1Syntaxes",
      "offset" : 0
     },
     {
      "name" : "syntax",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 40,
      "char" : 38,
      "deco" : "S3std8typecons__T8NullableTC4asn15types9universal16objectidentifier16ObjectIdentifierZQCr",
      "originalType" : "Nullable!ObjectIdentifier",
      "offset" : 12
     },
     {
      "name" : "presentationContextID",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 42,
      "char" : 22,
      "deco" : "i",
      "originalType" : "ptrdiff_t",
      "init" : "0",
      "offset" : 20
     },
     {
      "name" : "contextNegotiation",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 44,
      "char" : 44,
      "deco" : "S3std8typecons__T8NullableTS4asn15types14identification22ASN1ContextNegotiationZQCl",
      "originalType" : "Nullable!ASN1ContextNegotiation",
      "offset" : 24
     },
     {
      "name" : "transferSyntax",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 46,
      "char" : 38,
      "deco" : "S3std8typecons__T8NullableTC4asn15types9universal16objectidentifier16ObjectIdentifierZQCr",
      "originalType" : "Nullable!ObjectIdentifier",
      "offset" : 36
     },
     {
      "name" : "fixed",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 48,
      "char" : 17,
      "deco" : "b",
      "offset" : 44
     },
     {
      "name" : "directReference",
      "kind" : "alias",
      "line" : 51,
      "char" : 12
     },
     {
      "name" : "indirectReference",
      "kind" : "alias",
      "line" : 52,
      "char" : 12
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.types.oidtype",
  "kind" : "module",
  "file" : ".\\source\\asn1\\types\\oidtype.d",
  "members" : [
   {
    "name" : "asn1.codec",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ASN1ValueException"
    ]
   },
   {
    "name" : "std.ascii",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "isGraphical"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "assertThrown"
    ]
   },
   {
    "name" : "OIDNode",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 7,
    "char" : 8,
    "deco" : "S4asn15types7oidtype20ObjectIdentifierNode"
   },
   {
    "name" : "ObjectIdentifierNode",
    "kind" : "struct",
    "comment" : "    A struct representing a single node in an OID, which has a mandatory\n    number and an optional descriptor.\n",
    "line" : 13,
    "char" : 1,
    "members" : [
     {
      "name" : "number",
      "kind" : "variable",
      "comment" : "        The unique unsigned integral number associated with a node in the\n        object identifier hierarchy.\n",
      "line" : 19,
      "char" : 19,
      "deco" : "k",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "_descriptor",
      "kind" : "variable",
      "protection" : "private",
      "line" : 20,
      "char" : 20,
      "deco" : "Aya",
      "offset" : 4
     },
     {
      "name" : "descriptor",
      "kind" : "function",
      "comment" : "        The descriptor string is an ObjectDescriptor, which is defined as:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        GraphicString is just $(D 0x20) to $(D 0x7E), therefore\n        ObjectDescriptor is just $(D 0x20) to $(D 0x7E).\n\n        It is used to describe the object identified by this node.\n",
      "line" : 33,
      "char" : 12,
      "deco" : "xFNaNbNdNfZAya",
      "endline" : 36,
      "endchar" : 5
     },
     {
      "name" : "descriptor",
      "kind" : "function",
      "comment" : "        The descriptor string is an ObjectDescriptor, which is defined as:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        GraphicString is just $(D 0x20) to $(D 0x7E), therefore\n        ObjectDescriptor is just $(D 0x20) to $(D 0x7E).\n\n        It is used to describe the object identified by this node.\n",
      "line" : 49,
      "char" : 10,
      "deco" : "FNaNdNfAyaZv",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "Aya"
       }
      ],
      "endline" : 73,
      "endchar" : 5
     },
     {
      "name" : "opEquals",
      "kind" : "function",
      "comment" : "Override for use of the `==` operand.\n",
      "line" : 77,
      "char" : 10,
      "deco" : "xFNaNbNiNfxS4asn15types7oidtype20ObjectIdentifierNodeZb",
      "originalType" : "const pure nothrow @nogc @safe bool(const OIDNode other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS4asn15types7oidtype20ObjectIdentifierNode"
       }
      ],
      "endline" : 80,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L84_C5",
      "kind" : "function",
      "comment" : "\n",
      "line" : 84,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 92,
      "endchar" : 5
     },
     {
      "name" : "opCmp",
      "kind" : "function",
      "comment" : "Override for the use of the '>', '<', '<=', and '>=' operands.\n",
      "line" : 93,
      "char" : 15,
      "deco" : "xFNaNbNiNfKxS4asn15types7oidtype20ObjectIdentifierNodeZi",
      "originalType" : "const pure nothrow @nogc @safe ptrdiff_t(ref OIDNode other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xS4asn15types7oidtype20ObjectIdentifierNode",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 96,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L100_C5",
      "kind" : "function",
      "comment" : "\n",
      "line" : 100,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 112,
      "endchar" : 5
     },
     {
      "name" : "toHash",
      "kind" : "function",
      "comment" : "        An override so that associative arrays can use an $(D OIDNode) as a\n        key.\n        Returns: A $(D size_t) that represents a hash of the $(D OIDNode)\n",
      "line" : 113,
      "char" : 12,
      "deco" : "xFNbNeZk",
      "originalType" : "const nothrow @trusted size_t()",
      "endline" : 116,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        A constructor that accepts a descriptor string.\n        The descriptor string is an ObjectDescriptor, which is defined as:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        $(MONO GraphicString) is just a string containing only characters between\n        and including $(D 0x20) and $(D 0x7E), therefore ObjectDescriptor is just\n        $(D 0x20) and $(D 0x7E).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if the encoded value contains any bytes\n                outside of $(D 0x20) to $(D 0x7E))\n        )\n",
      "line" : 135,
      "char" : 5,
      "deco" : "FNaNcNfxkxAyaZS4asn15types7oidtype20ObjectIdentifierNode",
      "originalType" : "pure ref @safe (in size_t number, in string descriptor = \"\")",
      "parameters" : [
       {
        "name" : "number",
        "deco" : "xk"
       },
       {
        "name" : "descriptor",
        "deco" : "xAya",
        "default" : "\"\""
       }
      ],
      "endline" : 139,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L142_C5",
      "kind" : "function",
      "line" : 142,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 159,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.types.universal.characterstring",
  "kind" : "module",
  "file" : ".\\source\\asn1\\types\\universal\\characterstring.d",
  "members" : [
   {
    "name" : "asn1.types.identification",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "CharacterString",
    "kind" : "struct",
    "comment" : "    A $(MONO CharacterString), is a constructed data type, defined\n    in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n    The specification defines $(MONO CharacterString) as:\n\n    $(PRE\n        CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n            identification CHOICE {\n                syntaxes SEQUENCE {\n                    abstract OBJECT IDENTIFIER,\n                    transfer OBJECT IDENTIFIER },\n                syntax OBJECT IDENTIFIER,\n                presentation-context-id INTEGER,\n                context-negotiation SEQUENCE {\n                    presentation-context-id INTEGER,\n                    transfer-syntax OBJECT IDENTIFIER },\n                transfer-syntax OBJECT IDENTIFIER,\n                fixed NULL },\n            string-value OCTET STRING }\n    )\n\n    This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n    choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n",
    "line" : 31,
    "char" : 1,
    "members" : [
     {
      "name" : "identification",
      "kind" : "variable",
      "comment" : "        A field indicating the the transfer syntax used to indicate the means\n        by which the string-value field is encoded. Can also be used to specify\n        the abstract syntax of what is encoded.\n",
      "line" : 38,
      "char" : 39,
      "deco" : "S4asn15types14identification38ASN1ContextSwitchingTypeIdentification",
      "originalType" : "ASN1ContextSwitchingTypeID",
      "offset" : 0
     },
     {
      "name" : "stringValue",
      "kind" : "variable",
      "comment" : "The encoded data\n",
      "line" : 40,
      "char" : 20,
      "deco" : "Ah",
      "offset" : 48
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.types.universal.embeddedpdv",
  "kind" : "module",
  "file" : ".\\source\\asn1\\types\\universal\\embeddedpdv.d",
  "members" : [
   {
    "name" : "asn1.types.identification",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "EmbeddedPDV",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 10,
    "char" : 8,
    "deco" : "S4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValue"
   },
   {
    "name" : "EmbeddedPresentationDataValue",
    "kind" : "struct",
    "comment" : "    An $(MONO EmbeddedPDV) is a constructed data type, defined in\n    the $(LINK https://www.itu.int, International Telecommunications Union)'s\n    $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n    The specification defines $(MONO EmbeddedPDV) as:\n\n    $(PRE\n        EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n            identification CHOICE {\n                syntaxes SEQUENCE {\n                    abstract OBJECT IDENTIFIER,\n                    transfer OBJECT IDENTIFIER },\n                syntax OBJECT IDENTIFIER,\n                presentation-context-id INTEGER,\n                context-negotiation SEQUENCE {\n                    presentation-context-id INTEGER,\n                    transfer-syntax OBJECT IDENTIFIER },\n                transfer-syntax OBJECT IDENTIFIER,\n                fixed NULL },\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n        (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n    )\n\n    This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n    choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n    The following additional constraints are applied to the abstract syntax\n    when using Canonical Encoding Rules or Distinguished Encoding Rules,\n    which are also defined in the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n    $(PRE\n        EmbeddedPDV ( WITH COMPONENTS {\n            ... ,\n            identification ( WITH COMPONENTS {\n                ... ,\n                presentation-context-id ABSENT,\n                context-negotiation ABSENT } ) } )\n    )\n\n    The stated purpose of the constraints shown above is to restrict the use of\n    the $(MONO presentation-context-id), either by itself or within the\n    context-negotiation, which makes the following the effective abstract\n    syntax of $(MONO EmbeddedPDV) when using Canonical Encoding Rules or\n    Distinguished Encoding Rules:\n\n    $(PRE\n        EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n            identification CHOICE {\n                syntaxes SEQUENCE {\n                    abstract OBJECT IDENTIFIER,\n                    transfer OBJECT IDENTIFIER },\n                syntax OBJECT IDENTIFIER,\n                presentation-context-id INTEGER,\n                context-negotiation SEQUENCE {\n                    presentation-context-id INTEGER,\n                    transfer-syntax OBJECT IDENTIFIER },\n                transfer-syntax OBJECT IDENTIFIER,\n                fixed NULL },\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n                ( WITH COMPONENTS {\n                    ... ,\n                    identification ( WITH COMPONENTS {\n                        ... ,\n                        presentation-context-id ABSENT,\n                        context-negotiation ABSENT } ) } )\n    )\n\n    With the constraints applied, the abstract syntax for $(MONO EmbeddedPDV)s encoded\n    using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n    $(PRE\n        EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n            identification CHOICE {\n                syntaxes SEQUENCE {\n                    abstract OBJECT IDENTIFIER,\n                    transfer OBJECT IDENTIFIER },\n                syntax OBJECT IDENTIFIER,\n                transfer-syntax OBJECT IDENTIFIER,\n                fixed NULL },\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n    )\n",
    "line" : 100,
    "char" : 1,
    "members" : [
     {
      "name" : "identification",
      "kind" : "variable",
      "comment" : "        A field indicating the the transfer syntax used to indicate the means\n        by which the data-value field is encoded. Can also be used to specify\n        the abstract syntax of what is encoded.\n",
      "line" : 107,
      "char" : 39,
      "deco" : "S4asn15types14identification38ASN1ContextSwitchingTypeIdentification",
      "originalType" : "ASN1ContextSwitchingTypeID",
      "offset" : 0
     },
     {
      "name" : "dataValue",
      "kind" : "variable",
      "comment" : "The encoded data\n",
      "line" : 109,
      "char" : 20,
      "deco" : "Ah",
      "offset" : 48
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.types.universal.external",
  "kind" : "module",
  "file" : ".\\source\\asn1\\types\\universal\\external.d",
  "members" : [
   {
    "name" : "asn1.types.identification",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "External",
    "kind" : "struct",
    "comment" : "    According to the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n    $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)),\n    the abstract definition for an $(MONO EXTERNAL), after removing the comments in the\n    specification, is as follows:\n\n    $(PRE\n        EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n            identification CHOICE {\n                syntaxes SEQUENCE {\n                    abstract OBJECT IDENTIFIER,\n                    transfer OBJECT IDENTIFIER },\n                syntax OBJECT IDENTIFIER,\n                presentation-context-id INTEGER,\n                context-negotiation SEQUENCE {\n                    presentation-context-id INTEGER,\n                    transfer-syntax OBJECT IDENTIFIER },\n                transfer-syntax OBJECT IDENTIFIER,\n                fixed NULL },\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n                ( WITH COMPONENTS {\n                    ... ,\n                    identification ( WITH COMPONENTS {\n                        ... ,\n                        syntaxes ABSENT,\n                        transfer-syntax ABSENT,\n                        fixed ABSENT } ) } )\n    )\n\n    Note that the abstract syntax resembles that of $(MONO EmbeddedPDV) and\n    $(MONO CharacterString), except with a $(MONO WITH COMPONENTS) constraint that removes some\n    of our choices of $(MONO identification).\n    As can be seen on page 303 of Olivier Dubuisson's\n    $(I $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF,\n        ASN.1: Communication Between Heterogeneous Systems)),\n    after applying the $(MONO WITH COMPONENTS) constraint, our reduced syntax becomes:\n\n    $(PRE\n        EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n            identification CHOICE {\n                syntax OBJECT IDENTIFIER,\n                presentation-context-id INTEGER,\n                context-negotiation SEQUENCE {\n                    presentation-context-id INTEGER,\n                    transfer-syntax OBJECT IDENTIFIER } },\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n    )\n\n    But, according to the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules),\n    section 8.18, when encoded using Basic Encoding Rules (BER), is encoded as\n    follows, for compatibility reasons:\n\n    $(PRE\n        EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n            direct-reference  OBJECT IDENTIFIER OPTIONAL,\n            indirect-reference  INTEGER OPTIONAL,\n            data-value-descriptor  ObjectDescriptor  OPTIONAL,\n            encoding  CHOICE {\n                single-ASN1-type  [0] ANY,\n                octet-aligned     [1] IMPLICIT OCTET STRING,\n                arbitrary         [2] IMPLICIT BIT STRING } }\n    )\n\n    The definition above is the pre-1994 definition of $(MONO EXTERNAL). The $(MONO syntax)\n    field of the post-1994 definition maps to the $(MONO direct-reference) field of\n    the pre-1994 definition. The $(MONO presentation-context-id) field of the post-1994\n    definition maps to the $(MONO indirect-reference) field of the pre-1994 definition.\n    If $(MONO context-negotiation) is used, per the abstract syntax, then the\n    $(MONO presentation-context-id) field of the $(MONO context-negotiation) $(MONO SEQUENCE) in the\n    post-1994 definition maps to the $(MONO indirect-reference) field of the pre-1994\n    definition, and the $(MONO transfer-syntax) field of the $(MONO context-negotiation)\n    $(MONO SEQUENCE) maps to the $(MONO direct-reference) field of the pre-1994 definition.\n\n    The following additional constraints are applied to the abstract syntax\n    when using Canonical Encoding Rules or Distinguished Encoding Rules,\n    which are also defined in the\n    $(LINK https://www.itu.int/en/pages/default.aspx,\n    International Telecommunications Union)'s\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n    $(PRE\n        EXTERNAL ( WITH COMPONENTS {\n            ... ,\n            identification ( WITH COMPONENTS {\n                ... ,\n                presentation-context-id ABSENT,\n                context-negotiation ABSENT } ) } )\n    )\n\n    The stated purpose of the constraints shown above is to restrict the use of\n    the $(MONO presentation-context-id), either by itself or within the\n    $(MONO context-negotiation), which makes the following the effective abstract\n    syntax of $(MONO EXTERNAL) when using Canonical Encoding Rules or\n    Distinguished Encoding Rules:\n\n    $(PRE\n        EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n            identification CHOICE {\n                syntaxes SEQUENCE {\n                    abstract OBJECT IDENTIFIER,\n                    transfer OBJECT IDENTIFIER },\n                syntax OBJECT IDENTIFIER,\n                presentation-context-id INTEGER,\n                context-negotiation SEQUENCE {\n                    presentation-context-id INTEGER,\n                    transfer-syntax OBJECT IDENTIFIER },\n                transfer-syntax OBJECT IDENTIFIER,\n                fixed NULL },\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n                ( WITH COMPONENTS {\n                    ... ,\n                    identification ( WITH COMPONENTS {\n                        ... ,\n                        syntaxes ABSENT,\n                        presentation-context-id ABSENT,\n                        context-negotiation ABSENT,\n                        transfer-syntax ABSENT,\n                        fixed ABSENT } ) } )\n    )\n\n    With the constraints applied, the abstract syntax for $(MONO EXTERNAL)s encoded\n    using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n    $(PRE\n        EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n            identification CHOICE {\n                syntax OBJECT IDENTIFIER },\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n    )\n\n    Upon removing the $(MONO CHOICE) tag (since you have no choice but to use syntax\n    at this point), the encoding definition when using\n    Canonical Encoding Rules or Distinguished Encoding Rules:\n\n    $(PRE\n        EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n            syntax OBJECT IDENTIFIER,\n            data-value-descriptor ObjectDescriptor OPTIONAL,\n            data-value OCTET STRING }\n    )\n",
    "line" : 153,
    "char" : 1,
    "members" : [
     {
      "name" : "identification",
      "kind" : "variable",
      "comment" : "        A field indicating the the transfer syntax used to indicate the means\n        by which the data-value field is encoded. Can also be used to specify\n        the abstract syntax of what is encoded.\n",
      "line" : 160,
      "char" : 39,
      "deco" : "S4asn15types14identification38ASN1ContextSwitchingTypeIdentification",
      "originalType" : "ASN1ContextSwitchingTypeID",
      "offset" : 0
     },
     {
      "name" : "dataValueDescriptor",
      "kind" : "variable",
      "comment" : "An optional field used to describe the encoded data.\n",
      "line" : 162,
      "char" : 19,
      "deco" : "Aya",
      "offset" : 48
     },
     {
      "name" : "dataValue",
      "kind" : "variable",
      "comment" : "The encoded data\n",
      "line" : 164,
      "char" : 20,
      "deco" : "Ah",
      "offset" : 56
     },
     {
      "name" : "encoding",
      "kind" : "variable",
      "comment" : "        A field that exists only to determine the developer's choice of\n        encoding used, per the pre-1994 definition of EXTERNAL.\n\n        octet-aligned is a sensible default, since it is the most lax of the\n        three choices.\n",
      "line" : 172,
      "char" : 32,
      "deco" : "E4asn15types9universal8external45AbstractSyntaxNotation1ExternalEncodingChoice",
      "originalType" : "ASN1ExternalEncodingChoice",
      "init" : "cast(AbstractSyntaxNotation1ExternalEncodingChoice)cast(ubyte)1u",
      "offset" : 64
     }
    ]
   },
   {
    "name" : "ASN1ExternalEncodingChoice",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 176,
    "char" : 8,
    "deco" : "E4asn15types9universal8external45AbstractSyntaxNotation1ExternalEncodingChoice"
   },
   {
    "name" : "AbstractSyntaxNotation1ExternalEncodingChoice",
    "kind" : "enum",
    "comment" : "    The CHOICE of encoding used for the encoding of a pre-1994 EXTERNAL,\n    as used by the Basic Encoding Rules, Canonical Encoding Rules, or\n    Distinguished Encoding Rules.\n",
    "line" : 183,
    "char" : 1,
    "baseDeco" : "h",
    "members" : [
     {
      "name" : "singleASN1Type",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "comment" : "single-ASN1-type [0] ABSTRACT-SYNTAX.&Type\n",
      "line" : 186,
      "char" : 5
     },
     {
      "name" : "singleAbstractSyntaxNotation1Type",
      "kind" : "enum member",
      "value" : "cast(ubyte)0u",
      "comment" : "single-ASN1-type [0] ABSTRACT-SYNTAX.&Type\n",
      "line" : 188,
      "char" : 5
     },
     {
      "name" : "octetAligned",
      "kind" : "enum member",
      "value" : "cast(ubyte)1u",
      "comment" : "octet-aligned [1] IMPLICIT OCTET STRING\n",
      "line" : 190,
      "char" : 5
     },
     {
      "name" : "arbitrary",
      "kind" : "enum member",
      "value" : "cast(ubyte)2u",
      "comment" : "arbitrary [2] IMPLICIT BIT STRING\n",
      "line" : 192,
      "char" : 5
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.types.universal.objectidentifier",
  "kind" : "module",
  "file" : ".\\source\\asn1\\types\\universal\\objectidentifier.d",
  "members" : [
   {
    "name" : "asn1.constants",
    "kind" : "import",
    "line" : 2,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "asn1.types.oidtype",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.array",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "appender",
     "Appender"
    ]
   },
   {
    "name" : "OIDException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 7,
    "char" : 8,
    "deco" : "C4asn15types9universal16objectidentifier25ObjectIdentifierException"
   },
   {
    "name" : "ObjectIDException",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 9,
    "char" : 8,
    "deco" : "C4asn15types9universal16objectidentifier25ObjectIdentifierException"
   },
   {
    "name" : "ObjectIdentifierException",
    "kind" : "class",
    "comment" : "\n",
    "line" : 12,
    "char" : 1,
    "base" : "asn1.constants.AbstractSyntaxNotation1Exception",
    "members" : [
     {
      "name" : "std.exception",
      "kind" : "import",
      "line" : 14,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "basicExceptionCtors"
      ]
     },
     {
      "name" : "basicExceptionCtors!()",
      "kind" : "mixin",
      "line" : 15,
      "char" : 5
     }
    ]
   },
   {
    "name" : "OID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 19,
    "char" : 8,
    "deco" : "C4asn15types9universal16objectidentifier16ObjectIdentifier"
   },
   {
    "name" : "ObjectID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 21,
    "char" : 8,
    "deco" : "C4asn15types9universal16objectidentifier16ObjectIdentifier"
   },
   {
    "name" : "ObjectIdentifier",
    "kind" : "class",
    "comment" : "    A class for Object Identifiers that supports object descriptors and various\n    output formatting.\n",
    "line" : 26,
    "char" : 8,
    "members" : [
     {
      "name" : "std.conv",
      "kind" : "import",
      "line" : 28,
      "char" : 12,
      "protection" : "private",
      "selective" : [
       "text"
      ]
     },
     {
      "name" : "showDescriptors",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 31,
      "char" : 24,
      "storageClass" : [
       "static"
      ],
      "deco" : "b",
      "init" : "true"
     },
     {
      "name" : "nodes",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 33,
      "char" : 32,
      "storageClass" : [
       "immutable"
      ],
      "deco" : "yAS4asn15types7oidtype20ObjectIdentifierNode",
      "originalType" : "OIDNode[]",
      "offset" : 8
     },
     {
      "name" : "length",
      "kind" : "function",
      "comment" : "Returns: the number of nodes in the OID.\n",
      "line" : 37,
      "char" : 12,
      "deco" : "xFNdNfZk",
      "originalType" : "const @property @safe size_t()",
      "endline" : 40,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L43_C5",
      "kind" : "function",
      "line" : 43,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 63,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Constructor for an Object Identifier\n\n        Params:\n        $(UL\n            $(LI $(D numbers) = an array of unsigned integers representing the Object Identifier)\n        )\n        Throws:\n        $(UL\n            $(LI $(D OIDException) if fewer than two numbers are provided, or if the\n                first number is not 0, 1, or 2, or if the second number is\n                greater than 39)\n        )\n",
      "line" : 64,
      "char" : 5,
      "deco" : "FNfxAkXC4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "@safe (in size_t[] numbers...)",
      "parameters" : [
       {
        "name" : "numbers",
        "deco" : "xAk"
       }
      ],
      "endline" : 99,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Constructor for an Object Identifier\n\n        Throws:\n        $(UL\n            $(LI $(D OIDException) if fewer than two nodes are provided, or if the\n                first node is not 0, 1, or 2, or if the second node is greater\n                than 39)\n        )\n",
      "line" : 113,
      "char" : 5,
      "deco" : "FNfxAS4asn15types7oidtype20ObjectIdentifierNodeXCQBrQBp9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "@safe (in OIDNode[] nodes...)",
      "parameters" : [
       {
        "name" : "nodes",
        "deco" : "xAS4asn15types7oidtype20ObjectIdentifierNode"
       }
      ],
      "endline" : 142,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Constructor for an Object Identifier\n\n        Params:\n        $(UL\n            $(LI $(D str) = the dot-delimited form of the object identifier)\n        )\n        Throws:\n        $(UL\n            $(LI $(D OIDException) if fewer than two nodes are provided, or if the\n                first node is not 0, 1, or 2, or if the second node is greater\n                than 39)\n        )\n",
      "line" : 159,
      "char" : 5,
      "deco" : "FNfxAyaZC4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "@safe (in string str)",
      "parameters" : [
       {
        "name" : "str",
        "deco" : "xAya"
       }
      ],
      "endline" : 210,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L213_C5",
      "kind" : "function",
      "line" : 213,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 235,
      "endchar" : 5
     },
     {
      "name" : "opEquals",
      "kind" : "function",
      "comment" : "\n",
      "line" : 236,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFxC6ObjectZb",
      "originalType" : "const @system bool(in Object other)",
      "parameters" : [
       {
        "name" : "other",
        "deco" : "xC6Object"
       }
      ],
      "endline" : 246,
      "endchar" : 5,
      "overrides" : [
       "object.Object.opEquals"
      ]
     },
     {
      "name" : "__unittest_L249_C5",
      "kind" : "function",
      "line" : 249,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 265,
      "endchar" : 5
     },
     {
      "name" : "opIndex",
      "kind" : "function",
      "comment" : "        Returns: the $(D OIDNode) at the specified index.\n        Throws:\n            RangeError = if invalid index specified.\n",
      "line" : 266,
      "char" : 13,
      "deco" : "xFNbNiNfxiZS4asn15types7oidtype20ObjectIdentifierNode",
      "originalType" : "const nothrow @nogc @safe OIDNode(in ptrdiff_t index)",
      "parameters" : [
       {
        "name" : "index",
        "deco" : "xi"
       }
      ],
      "endline" : 269,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L272_C5",
      "kind" : "function",
      "line" : 272,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 283,
      "endchar" : 5
     },
     {
      "name" : "opSlice",
      "kind" : "function",
      "comment" : "        Returns: a range of $(D OIDNode)s from the OID.\n        Throws:\n            RangeError = if invalid indices are specified.\n",
      "line" : 284,
      "char" : 15,
      "deco" : "xFNbNixixiZAS4asn15types7oidtype20ObjectIdentifierNode",
      "originalType" : "const nothrow @nogc @system OIDNode[](in ptrdiff_t index1, in ptrdiff_t index2)",
      "parameters" : [
       {
        "name" : "index1",
        "deco" : "xi"
       },
       {
        "name" : "index2",
        "deco" : "xi"
       }
      ],
      "endline" : 287,
      "endchar" : 5
     },
     {
      "name" : "opDollar",
      "kind" : "function",
      "comment" : "Returns the length of the OID.\n",
      "line" : 291,
      "char" : 12,
      "deco" : "xFNbNiNfZk",
      "originalType" : "const nothrow @nogc @safe size_t()",
      "endline" : 294,
      "endchar" : 5
     },
     {
      "name" : "descriptor",
      "kind" : "function",
      "comment" : "        Returns: The descriptor at the specified index.\n        Throws:\n        $(UL\n            $(LI $(D RangeError) if an invalid index is specified)\n        )\n",
      "line" : 304,
      "char" : 12,
      "deco" : "xFNbNfxkZAya",
      "originalType" : "const nothrow @safe string(in size_t index)",
      "parameters" : [
       {
        "name" : "index",
        "deco" : "xk"
       }
      ],
      "endline" : 307,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L310_C5",
      "kind" : "function",
      "line" : 310,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 318,
      "endchar" : 5
     },
     {
      "name" : "numbers",
      "kind" : "alias",
      "comment" : "\n",
      "line" : 318,
      "char" : 12
     },
     {
      "name" : "numericArray",
      "kind" : "function",
      "comment" : "        Returns:\n            an array of $(D size_t)s representing the dot-delimited sequence of\n            integers that constitute the numeric OID.\n",
      "line" : 325,
      "char" : 14,
      "deco" : "xFNbNdNfZAk",
      "originalType" : "const nothrow @property @safe size_t[]()",
      "endline" : 338,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L341_C5",
      "kind" : "function",
      "line" : 341,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 348,
      "endchar" : 5
     },
     {
      "name" : "asn1Notation",
      "kind" : "alias",
      "comment" : "\n",
      "line" : 348,
      "char" : 12
     },
     {
      "name" : "abstractSyntaxNotation1Notation",
      "kind" : "function",
      "comment" : "Returns: the OID in ASN.1 Notation\n",
      "line" : 351,
      "char" : 12,
      "deco" : "xFNbNdNfZAya",
      "endline" : 367,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L370_C5",
      "kind" : "function",
      "line" : 370,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 386,
      "endchar" : 5
     },
     {
      "name" : "dotNotation",
      "kind" : "function",
      "comment" : "        Returns:\n            the OID as a dot-delimited string, where all nodes with descriptors\n            are represented as descriptors instead of numbers\n",
      "line" : 387,
      "char" : 12,
      "deco" : "xFNbNdNfZAya",
      "endline" : 403,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L406_C5",
      "kind" : "function",
      "line" : 406,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 418,
      "endchar" : 5
     },
     {
      "name" : "iriNotation",
      "kind" : "alias",
      "comment" : "\n",
      "line" : 418,
      "char" : 12
     },
     {
      "name" : "uriNotation",
      "kind" : "alias",
      "comment" : "\n",
      "line" : 420,
      "char" : 12
     },
     {
      "name" : "uniformResourceIdentifierNotation",
      "kind" : "alias",
      "comment" : "\n",
      "line" : 422,
      "char" : 12
     },
     {
      "name" : "internationalizedResourceIdentifierNotation",
      "kind" : "function",
      "comment" : "        Returns:\n            the OID as a forward-slash-delimited string (as one might expect in\n            a URI / IRI path), where all nodes with descriptors are represented\n            as descriptors instead of numbers\n",
      "line" : 430,
      "char" : 12,
      "deco" : "xFNdZAya",
      "endline" : 447,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L450_C5",
      "kind" : "function",
      "line" : 450,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 462,
      "endchar" : 5
     },
     {
      "name" : "urnNotation",
      "kind" : "alias",
      "comment" : "\n",
      "line" : 462,
      "char" : 12
     },
     {
      "name" : "uniformResourceNameNotation",
      "kind" : "function",
      "comment" : "        Returns:\n            the OID as a URN, where all nodes of the OID are translated to a\n            segment in the URN path, and where all nodes are represented as\n            numbers regardless of whether or not they have a descriptor\n        See_Also:\n            $(LINK https://www.ietf.org/rfc/rfc3061.txt, RFC 3061)\n",
      "line" : 472,
      "char" : 12,
      "deco" : "xFNbNdNfZAya",
      "endline" : 481,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L484_C5",
      "kind" : "function",
      "line" : 484,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 496,
      "endchar" : 5
     },
     {
      "name" : "toString",
      "kind" : "function",
      "comment" : "\n",
      "line" : 497,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdZAya",
      "endline" : 500,
      "endchar" : 5,
      "overrides" : [
       "object.Object.toString"
      ]
     },
     {
      "name" : "toHash",
      "kind" : "function",
      "comment" : "        An override so that associative arrays can use an $(D OIDNode) as a\n        key.\n        Returns: A $(D size_t) that represents a hash of the $(D OIDNode)\n",
      "line" : 508,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNbNeZk",
      "originalType" : "const nothrow @trusted size_t()",
      "endline" : 516,
      "endchar" : 5,
      "overrides" : [
       "object.Object.toHash"
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "asn1.codecs.ber",
  "kind" : "module",
  "file" : ".\\source\\asn1\\codecs\\ber.d",
  "comment" : "    Basic Encoding Rules (BER) is a standard for encoding ASN.1 data. It is by\n    far the most common standard for doing so, being used in LDAP, TLS, SNMP,\n    RDP, and other protocols. Like Distinguished Encoding Rules (DER),\n    Canonical Encoding Rules (CER), and Packed Encoding Rules (PER), Basic\n    Encoding Rules is a specification created by the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union),\n    and specified in\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules)\n\n    BER is generally regarded as the most flexible of the encoding schemes,\n    because all values can be encoded in a multitude of ways. This flexibility\n    might be convenient for developers who use a BER Library, but creating\n    a BER library in the first place is a nightmare, because of its flexibility.\n    I personally suspect that the complexity of BER may make its implementation\n    inclined to security vulnerabilities, so I would not use it if you have a\n    choice in the matter. Also, the ability to represent values in several\n    different ways is actually a security problem when data has to be guarded\n    against tampering with a cryptographic signature. (Basically, it makes it\n    a lot easier to find a tampered payload that has the identical signature\n    as the genuine payload.)\n\n    Authors:\n    $(UL\n        $(LI $(PERSON Jonathan M. Wilbur, jonathan@wilbur.space, http://jonathan.wilbur.space))\n    )\n    Copyright: Copyright (C) Jonathan M. Wilbur\n    License: $(LINK https://mit-license.org/, MIT License)\n    Standards:\n    $(UL\n        $(LI $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)))\n        $(LI $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules))\n    )\n    See_Also:\n    $(UL\n        $(LI $(LINK https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One, The Wikipedia Page on ASN.1))\n        $(LI $(LINK https://en.wikipedia.org/wiki/X.690, The Wikipedia Page on X.690))\n        $(LI $(LINK https://www.strozhevsky.com/free_docs/asn1_in_simple_words.pdf, ASN.1 By Simple Words))\n        $(LI $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF, ASN.1: Communication Between Heterogeneous Systems))\n    )\n",
  "members" : [
   {
    "name" : "asn1.codec",
    "kind" : "import",
    "line" : 43,
    "char" : 15
   },
   {
    "name" : "asn1.interfaces",
    "kind" : "import",
    "line" : 44,
    "char" : 15,
    "selective" : [
     "Byteable"
    ]
   },
   {
    "name" : "asn1.types.identification",
    "kind" : "import",
    "line" : 45,
    "char" : 15
   },
   {
    "name" : "berOID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 48,
    "char" : 8
   },
   {
    "name" : "berObjectID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 50,
    "char" : 8
   },
   {
    "name" : "berObjectIdentifier",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 52,
    "char" : 8
   },
   {
    "name" : "basicEncodingRulesObjectIdentifier",
    "kind" : "variable",
    "comment" : "    The object identifier assigned to the Basic Encoding Rules (BER), per the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s,\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules)\n\n    $(MONO {joint-iso-itu-t asn1 (1) basic-encoding (1)} )\n",
    "line" : 60,
    "char" : 22,
    "storageClass" : [
     "immutable"
    ],
    "deco" : "yC4asn15types9universal16objectidentifier16ObjectIdentifier",
    "originalType" : "OID",
    "init" : "ObjectIdentifier([ObjectIdentifierNode(2u, \"\"), ObjectIdentifierNode(1u, \"\"), ObjectIdentifierNode(1u, \"\")])"
   },
   {
    "name" : "BERElement",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 63,
    "char" : 8,
    "deco" : "C4asn16codecs3ber25BasicEncodingRulesElement"
   },
   {
    "name" : "BasicEncodingRulesElement",
    "kind" : "class",
    "comment" : "    The unit of encoding and decoding for Basic Encoding Rules (BER).\n\n    There are three parts to an element encoded according to the Basic\n    Encoding Rules (BER):\n\n    $(UL\n        $(LI A Type Tag, which specifies what data type is encoded)\n        $(LI A Length Tag, which specifies how many subsequent bytes encode the data)\n        $(LI The Encoded Value)\n    )\n\n    They appear in the binary encoding in that order, and as such, the encoding\n    scheme is sometimes described as \"TLV,\" which stands for Type-Length-Value.\n\n    This class provides a properties for getting and setting bit fields of\n    the type tag, but most of it is functionality for encoding data per\n    the specification.\n\n    As an example, this is what encoding a simple INTEGER looks like:\n    ---\n    BERElement bv = new BERElement();\n    bv.tagNumber = 0x02u; // \"2\" means this is an INTEGER\n    bv.integer = 1433; // Now the data is encoded.\n    transmit(cast(ubyte[]) bv); // transmit() is a made-up function.\n    ---\n    And this is what decoding looks like:\n    ---\n    ubyte[] data = receive(); // receive() is a made-up function.\n    BERElement bv2 = new BERElement(data);\n\n    long x;\n    if (bv.tagNumber == 0x02u) // it is an INTEGER\n    {\n        x = bv.integer;\n    }\n    // Now x is 1433!\n    ---\n",
    "line" : 113,
    "char" : 1,
    "base" : "asn1.codec.ASN1Element!(asn1.codecs.ber.BasicEncodingRulesElement).AbstractSyntaxNotation1Element",
    "interfaces" : [
     "asn1.interfaces.Byteable"
    ],
    "members" : [
     {
      "name" : "__unittest_L116_C5",
      "kind" : "function",
      "line" : 116,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 122,
      "endchar" : 5
     },
     {
      "name" : "lengthEncodingPreference",
      "kind" : "variable",
      "comment" : "\n",
      "line" : 122,
      "char" : 44,
      "storageClass" : [
       "static"
      ],
      "deco" : "E4asn15codec__T30AbstractSyntaxNotation1ElementTCQBw6codecs3ber25BasicEncodingRulesElementZQCy24LengthEncodingPreference",
      "init" : "cast(LengthEncodingPreference)cast(ubyte)0u"
     },
     {
      "name" : "endOfContent",
      "kind" : "function",
      "comment" : "        \"Decodes\" an $(MONO END OF CONTENT), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
      "line" : 136,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZv",
      "endline" : 145,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.endOfContent"
      ]
     },
     {
      "name" : "boolean",
      "kind" : "function",
      "comment" : "        Decodes a $(D bool).\n\n        Any non-zero value will be interpreted as $(MONO TRUE). Only zero will be\n        interpreted as $(MONO FALSE).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the encoded value is not exactly 1 byte in size)\n        )\n",
      "line" : 162,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZb",
      "endline" : 173,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.boolean"
      ]
     },
     {
      "name" : "boolean",
      "kind" : "function",
      "comment" : "Encodes a $(D bool)\n",
      "line" : 177,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdNfxbZv",
      "originalType" : "nothrow @property @safe void(in bool value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xb"
       }
      ],
      "endline" : 186,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.boolean"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 179,
       "char" : 5,
       "deco" : "FNaNbNiNfZv",
       "originalType" : "nothrow @safe void()",
       "endline" : 179,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L189_C5",
      "kind" : "function",
      "line" : 189,
      "char" : 5,
      "storageClass" : [
       "@safe"
      ],
      "endline" : 218,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a signed integer.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the value is too big to decode to a signed integral type,\n                or if the value is zero bytes)\n            $(LI $(D ASN1ValuePaddingException)\n                if there are padding bytes)\n        )\n",
      "line" : 219,
      "char" : 7,
      "name" : "integer",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
      "members" : [
       {
        "name" : "integer",
        "kind" : "function",
        "line" : 219,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 304,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Encodes a signed integral type\n",
      "line" : 308,
      "char" : 10,
      "name" : "integer",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
      "members" : [
       {
        "name" : "integer",
        "kind" : "function",
        "line" : 308,
        "char" : 10,
        "type" : "@property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 402,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L405_C5",
      "kind" : "function",
      "line" : 405,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 444,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L445_C5",
      "kind" : "function",
      "line" : 445,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 469,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L470_C5",
      "kind" : "function",
      "line" : 470,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 517,
      "endchar" : 5
     },
     {
      "name" : "bitString",
      "kind" : "function",
      "comment" : "        Decodes an array of $(D bool)s representing a string of bits.\n\n        Returns: an array of $(D bool)s, where each $(D bool) represents a bit\n            in the encoded bit string\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueSizeException)\n                if the any primitive contains 0 bytes)\n            $(LI $(D ASN1ValueException)\n                if the first byte has a value greater\n                than seven, or if the first byte indicates the presence of\n                padding bits when no subsequent bytes exist, or if any primitive\n                but the last in a constructed BIT STRING uses padding bits)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 518,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAb",
      "endline" : 621,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.bitString"
      ]
     },
     {
      "name" : "bitString",
      "kind" : "function",
      "comment" : "Encodes an array of $(D bool)s representing a string of bits.\n",
      "line" : 625,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAbZv",
      "originalType" : "@property void(in bool[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAb"
       }
      ],
      "endline" : 645,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.bitString"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 627,
       "char" : 5,
       "deco" : "FNaNbNiNfZv",
       "originalType" : "void()",
       "endline" : 627,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L649_C5",
      "kind" : "function",
      "line" : 649,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 656,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L657_C5",
      "kind" : "function",
      "line" : 657,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 675,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L676_C5",
      "kind" : "function",
      "line" : 676,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 690,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L691_C5",
      "kind" : "function",
      "line" : 691,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 721,
      "endchar" : 5
     },
     {
      "name" : "octetString",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO OCTET STRING) into an unsigned byte array.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 722,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAh",
      "endline" : 750,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.octetString"
      ]
     },
     {
      "name" : "octetString",
      "kind" : "function",
      "comment" : "Encodes an $(MONO OCTET STRING) from an unsigned byte ($(D ubyte)) array.\n",
      "line" : 754,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdNfxAhZv",
      "originalType" : "@property @safe void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 758,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.octetString"
      ]
     },
     {
      "name" : "__unittest_L761_C5",
      "kind" : "function",
      "line" : 761,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 777,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L778_C5",
      "kind" : "function",
      "line" : 778,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 792,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L793_C5",
      "kind" : "function",
      "line" : 793,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 823,
      "endchar" : 5
     },
     {
      "name" : "nill",
      "kind" : "function",
      "comment" : "        \"Decodes\" a $(D null), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Note:\n            I had to name this method $(D nill), because $(D null) is a keyword in D.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
      "line" : 824,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZv",
      "endline" : 833,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.nill"
      ]
     },
     {
      "name" : "objectIdentifier",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO OBJECT IDENTIFIER).\n        See $(MONO source/types/universal/objectidentifier.d) for information about\n        the $(D ObjectIdentifier) class (aliased as $(D OID)).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are no value bytes)\n            $(LI $(D ASN1ValuePaddingException) if a single OID number is encoded with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1ValueOverflowException) if a single OID number is too big to\n                decode to a $(D size_t))\n            $(LI $(D ASN1TruncationException) if a single OID number is \"cut off\")\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 857,
      "char" : 9,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZC4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "const @property @system OID()",
      "endline" : 945,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.objectIdentifier"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 859,
       "char" : 5,
       "deco" : "FKxC4asn15types9universal16objectidentifier16ObjectIdentifierZv",
       "originalType" : "@system void(ref const ObjectIdentifier value)",
       "parameters" : [
        {
         "name" : "value",
         "deco" : "xC4asn15types9universal16objectidentifier16ObjectIdentifier",
         "storageClass" : [
          "ref"
         ]
        }
       ],
       "endline" : 859,
       "endchar" : 5
      }
     },
     {
      "name" : "objectIdentifier",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO OBJECT IDENTIFIER).\n        See $(MONO source/types/universal/objectidentifier.d) for information about\n        the $(D ObjectIdentifier) class (aliased as $(OID)).\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 958,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxC4asn15types9universal16objectidentifier16ObjectIdentifierZv",
      "originalType" : "@property @system void(in OID value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xC4asn15types9universal16objectidentifier16ObjectIdentifier"
       }
      ],
      "endline" : 1002,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.objectIdentifier"
      ],
      "in" : {
       "name" : "__require",
       "kind" : "function",
       "line" : 960,
       "char" : 5,
       "type" : "@system void()",
       "endline" : 960,
       "endchar" : 5
      },
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 969,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 969,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L1005_C5",
      "kind" : "function",
      "line" : 1005,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1024,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1025_C5",
      "kind" : "function",
      "line" : 1025,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1093,
      "endchar" : 5
     },
     {
      "name" : "objectDescriptor",
      "kind" : "function",
      "comment" : "        Decodes an $(D ObjectDescriptor), which is a string consisting of only\n        graphical characters. In fact, $(D ObjectDescriptor) is actually implicitly\n        just a $(MONO GraphicString)! The formal specification for an $(D ObjectDescriptor)\n        is:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        $(MONO GraphicString) is just a string containing only characters between\n        and including $(D 0x20) and $(D 0x7E), therefore ObjectDescriptor is just\n        $(D 0x20) and $(D 0x7E).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if the encoded value contains any character outside of\n                $(D 0x20) to $(D 0x7E), which means any control characters or $(MONO DELETE))\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 1094,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 1128,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.objectDescriptor"
      ]
     },
     {
      "name" : "objectDescriptor",
      "kind" : "function",
      "comment" : "        Encodes an $(D ObjectDescriptor), which is a string consisting of only\n        graphical characters. In fact, $(D ObjectDescriptor) is actually implicitly\n        just a $(MONO GraphicString)! The formal specification for an $(D ObjectDescriptor)\n        is:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        $(MONO GraphicString) is just a string containing only characters between\n        and including $(D 0x20) and $(D 0x7E), therefore ObjectDescriptor is just\n        $(D 0x20) and $(D 0x7E).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if the string value contains any character outside of\n                $(D 0x20) to $(D 0x7E), which means any control characters or $(MONO DELETE))\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 1159,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 1169,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.objectDescriptor"
      ]
     },
     {
      "name" : "__unittest_L1172_C5",
      "kind" : "function",
      "line" : 1172,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1187,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1188_C5",
      "kind" : "function",
      "line" : 1188,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1298,
      "endchar" : 5
     },
     {
      "name" : "external",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO EXTERNAL).\n\n        According to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)),\n        the abstract definition for an $(MONO EXTERNAL), after removing the comments in the\n        specification, is as follows:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        Note that the abstract syntax resembles that of $(MONO EmbeddedPDV) and\n        $(MONO CharacterString), except with a $(MONO WITH COMPONENTS) constraint that removes some\n        of our choices of $(MONO identification).\n        As can be seen on page 303 of Olivier Dubuisson's\n        $(I $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF,\n            ASN.1: Communication Between Heterogeneous Systems)),\n        after applying the $(MONO WITH COMPONENTS) constraint, our reduced syntax becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        But, according to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules),\n        section 8.18, when encoded using Basic Encoding Rules (BER), is encoded as\n        follows, for compatibility reasons:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                direct-reference  OBJECT IDENTIFIER OPTIONAL,\n                indirect-reference  INTEGER OPTIONAL,\n                data-value-descriptor  ObjectDescriptor  OPTIONAL,\n                encoding  CHOICE {\n                    single-ASN1-type  [0] ANY,\n                    octet-aligned     [1] IMPLICIT OCTET STRING,\n                    arbitrary         [2] IMPLICIT BIT STRING } }\n        )\n\n        The definition above is the pre-1994 definition of $(MONO EXTERNAL). The $(MONO syntax)\n        field of the post-1994 definition maps to the $(MONO direct-reference) field of\n        the pre-1994 definition. The $(MONO presentation-context-id) field of the post-1994\n        definition maps to the $(MONO indirect-reference) field of the pre-1994 definition.\n        If $(MONO context-negotiation) is used, per the abstract syntax, then the\n        $(MONO presentation-context-id) field of the $(MONO context-negotiation) $(MONO SEQUENCE) in the\n        post-1994 definition maps to the $(MONO indirect-reference) field of the pre-1994\n        definition, and the $(MONO transfer-syntax) field of the $(MONO context-negotiation)\n        $(MONO SEQUENCE) maps to the $(MONO direct-reference) field of the pre-1994 definition.\n\n        Returns: an $(MONO External), defined in $(D types.universal.external).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if the SEQUENCE does not contain two to four elements)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not have the correct tag class)\n            $(LI $(D ASN1ConstructionException)\n                if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not have the correct tag number)\n            $(LI $(D ASN1ValueCharactersException)\n                if a data-value-descriptor is supplied with invalid characters)\n        )\n",
      "line" : 1299,
      "char" : 14,
      "storageClass" : [
       "deprecated",
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal8external8External",
      "endline" : 1454,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.external"
      ]
     },
     {
      "name" : "external",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO EXTERNAL).\n\n        According to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)),\n        the abstract definition for an $(MONO EXTERNAL), after removing the comments in the\n        specification, is as follows:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        Note that the abstract syntax resembles that of $(MONO EmbeddedPDV) and\n        $(MONO CharacterString), except with a $(MONO WITH COMPONENTS) constraint that removes some\n        of our choices of $(MONO identification).\n        As can be seen on page 303 of Olivier Dubuisson's\n        $(I $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF,\n            ASN.1: Communication Between Heterogeneous Systems)),\n        after applying the $(MONO WITH COMPONENTS) constraint, our reduced syntax becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        But, according to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules),\n        section 8.18, when encoded using Basic Encoding Rules (BER), is encoded as\n        follows, for compatibility reasons:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                direct-reference  OBJECT IDENTIFIER OPTIONAL,\n                indirect-reference  INTEGER OPTIONAL,\n                data-value-descriptor  ObjectDescriptor  OPTIONAL,\n                encoding  CHOICE {\n                    single-ASN1-type  [0] ANY,\n                    octet-aligned     [1] IMPLICIT OCTET STRING,\n                    arbitrary         [2] IMPLICIT BIT STRING } }\n        )\n\n        The definition above is the pre-1994 definition of $(MONO EXTERNAL). The $(MONO syntax)\n        field of the post-1994 definition maps to the $(MONO direct-reference) field of\n        the pre-1994 definition. The $(MONO presentation-context-id) field of the post-1994\n        definition maps to the $(MONO indirect-reference) field of the pre-1994 definition.\n        If $(MONO context-negotiation) is used, per the abstract syntax, then the\n        $(MONO presentation-context-id) field of the $(MONO context-negotiation) $(MONO SEQUENCE) in the\n        post-1994 definition maps to the $(MONO indirect-reference) field of the pre-1994\n        definition, and the $(MONO transfer-syntax) field of the $(MONO context-negotiation)\n        $(MONO SEQUENCE) maps to the $(MONO direct-reference) field of the pre-1994 definition.\n\n        Returns: an instance of $(D types.universal.external.External)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if a data-value-descriptor is supplied with invalid characters)\n        )\n",
      "line" : 1545,
      "char" : 10,
      "storageClass" : [
       "deprecated",
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal8external8ExternalZv",
      "originalType" : "@property @system void(in External value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal8external8External"
       }
      ],
      "endline" : 1594,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.external"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 1547,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 1547,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L1597_C5",
      "kind" : "function",
      "line" : 1597,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1615,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1616_C5",
      "kind" : "function",
      "line" : 1616,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1643,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1644_C5",
      "kind" : "function",
      "line" : 1644,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1672,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1673_C5",
      "kind" : "function",
      "line" : 1673,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1748,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a floating-point type.\n\n        Note that this method assumes that your machine uses\n        $(LINK http://ieeexplore.ieee.org/document/4610935/, IEEE 754-2008)\n        floating point format.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1TruncationException) if the value appears to be \"cut off\")\n            $(LI $(D ConvException) if character-encoding cannot be converted to\n                the selected floating-point type, T)\n            $(LI $(D ConvOverflowException) if the character-encoding encodes a\n                number that is too big for the selected floating-point\n                type to express)\n            $(LI $(D ASN1ValueSizeException) if the binary-encoding contains fewer\n                bytes than the information byte purports, or if the\n                binary-encoded mantissa is too big to be expressed by an\n                unsigned long integer)\n            $(LI $(D ASN1ValueException) if a complicated-form exponent or a\n                non-zero-byte mantissa encodes a zero)\n            $(LI $(D ASN1ValueUndefinedException) if both bits indicating the base in the\n                information byte of a binary-encoded $(MONO REAL)'s information byte\n                are set, which would indicate an invalid base, or if a special\n                value has been indicated that is not defined by the specification)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 400-402.)\n            $(LI $(LINK https://www.iso.org/standard/12285.html, ISO 6093))\n        )\n",
      "line" : 1749,
      "char" : 7,
      "name" : "realNumber",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isFloatingPoint!T",
      "members" : [
       {
        "name" : "realNumber",
        "kind" : "function",
        "line" : 1749,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 2008,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "        Encodes a floating-point type, using base-2 binary encoding.\n\n        Note that this method assumes that your machine uses\n        $(LINK http://ieeexplore.ieee.org/document/4610935/, IEEE 754-2008)\n        floating point format.\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 400-402.)\n            $(LI $(LINK https://www.iso.org/standard/12285.html, ISO 6093))\n        )\n",
      "line" : 2026,
      "char" : 10,
      "name" : "realNumber",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isFloatingPoint!T",
      "members" : [
       {
        "name" : "realNumber",
        "kind" : "function",
        "line" : 2026,
        "char" : 10,
        "type" : "nothrow @property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 2180,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L2183_C5",
      "kind" : "function",
      "line" : 2183,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2297,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2298_C5",
      "kind" : "function",
      "line" : 2298,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2320,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2321_C5",
      "kind" : "function",
      "line" : 2321,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2343,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2344_C5",
      "kind" : "function",
      "line" : 2344,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2361,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2362_C5",
      "kind" : "function",
      "line" : 2362,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2413,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2414_C5",
      "kind" : "function",
      "line" : 2414,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2473,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a signed integer, which represents a selection from an\n        $(MONO ENUMERATION) of choices.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the value is too big to decode to a signed integral type,\n                or if the value is zero bytes)\n            $(LI $(D ASN1ValuePaddingException)\n                if there are padding bytes)\n        )\n",
      "line" : 2474,
      "char" : 7,
      "name" : "enumerated",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T",
      "members" : [
       {
        "name" : "enumerated",
        "kind" : "function",
        "line" : 2474,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 2525,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Encodes an $(MONO ENUMERATED) type from an integer.\n",
      "line" : 2529,
      "char" : 10,
      "name" : "enumerated",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "enumerated",
        "kind" : "function",
        "line" : 2529,
        "char" : 10,
        "type" : "nothrow @property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 2587,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L2591_C5",
      "kind" : "function",
      "line" : 2591,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2615,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2616_C5",
      "kind" : "function",
      "line" : 2616,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2682,
      "endchar" : 5
     },
     {
      "name" : "embeddedPresentationDataValue",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n            the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        Returns: an instance of $(D types.universal.embeddedpdv.EmbeddedPDV)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded EmbeddedPDV has too few or too many\n                elements, or if syntaxes or context-negotiation element has\n                too few or too many elements)\n            $(LI $(D ASN1ValueSizeException) if encoded INTEGER is too large to decode)\n            $(LI $(D ASN1RecursionException) if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException) if any nested primitives do not have the\n                correct tag class)\n            $(LI $(D ASN1ConstructionException) if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException) if any nested primitives do not have the\n                correct tag number)\n        )\n",
      "line" : 2683,
      "char" : 17,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValue",
      "originalType" : "const @property @system EmbeddedPDV()",
      "endline" : 2918,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.embeddedPresentationDataValue"
      ]
     },
     {
      "name" : "embeddedPresentationDataValue",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n            the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded ObjectDescriptor contains\n                invalid characters)\n        )\n",
      "line" : 2955,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValueZv",
      "originalType" : "@property @system void(in EmbeddedPDV value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValue"
       }
      ],
      "endline" : 3031,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.embeddedPresentationDataValue"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 2957,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 2957,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L3034_C5",
      "kind" : "function",
      "line" : 3034,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3051,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3052_C5",
      "kind" : "function",
      "line" : 3052,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3074,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3075_C5",
      "kind" : "function",
      "line" : 3075,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3129,
      "endchar" : 5
     },
     {
      "name" : "unicodeTransformationFormat8String",
      "kind" : "function",
      "comment" : "        Decodes the value to UTF-8 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D UTF8Exception)\n                if the encoded value does not decode to UTF-8)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3130,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3158,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.unicodeTransformationFormat8String"
      ]
     },
     {
      "name" : "unicodeTransformationFormat8String",
      "kind" : "function",
      "comment" : "Encodes a UTF-8 string to bytes.\n",
      "line" : 3162,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdxAyaZv",
      "originalType" : "nothrow @property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3166,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.unicodeTransformationFormat8String"
      ]
     },
     {
      "name" : "__unittest_L3169_C5",
      "kind" : "function",
      "line" : 3169,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3201,
      "endchar" : 5
     },
     {
      "name" : "relativeObjectIdentifier",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO RELATIVE OBJECT IDENTIFIER).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValuePaddingException) if a single OID number is encoded with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1ValueOverflowException) if a single OID number is too big to\n                decode to a $(D size_t))\n            $(LI $(D ASN1TruncationException) if a single OID number is \"cut off\")\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 3202,
      "char" : 15,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAS4asn15types7oidtype20ObjectIdentifierNode",
      "originalType" : "const @property @system OIDNode[]()",
      "endline" : 3271,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.relativeObjectIdentifier"
      ]
     },
     {
      "name" : "relativeObjectIdentifier",
      "kind" : "function",
      "comment" : "        Encodes a $(MONO RELATIVE OBJECT IDENTIFIER).\n\n        Standards:\n            $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660)\n",
      "line" : 3280,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdxAS4asn15types7oidtype20ObjectIdentifierNodeZv",
      "originalType" : "nothrow @property @system void(in OIDNode[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAS4asn15types7oidtype20ObjectIdentifierNode"
       }
      ],
      "endline" : 3307,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.relativeObjectIdentifier"
      ]
     },
     {
      "name" : "__unittest_L3310_C5",
      "kind" : "function",
      "line" : 3310,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3329,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3330_C5",
      "kind" : "function",
      "line" : 3330,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3362,
      "endchar" : 5
     },
     {
      "name" : "sequence",
      "kind" : "function",
      "comment" : "        Decodes a sequence of elements\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"primitive\")\n            $(LI And all of the exceptions thrown by the constructor)\n        )\n",
      "line" : 3363,
      "char" : 18,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAC4asn16codecs3ber25BasicEncodingRulesElement",
      "originalType" : "const @property @system BERElement[]()",
      "endline" : 3374,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.sequence"
      ]
     },
     {
      "name" : "sequence",
      "kind" : "function",
      "comment" : "Encodes a sequence of elements\n",
      "line" : 3378,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAC4asn16codecs3ber25BasicEncodingRulesElementZv",
      "originalType" : "@property @system void(in BERElement[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAC4asn16codecs3ber25BasicEncodingRulesElement"
       }
      ],
      "endline" : 3387,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.sequence"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "comment" : "        Decodes a set of elements\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"primitive\")\n            $(LI And all of the exceptions thrown by the constructor)\n        )\n",
      "line" : 3399,
      "char" : 18,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAC4asn16codecs3ber25BasicEncodingRulesElement",
      "originalType" : "const @property @system BERElement[]()",
      "endline" : 3410,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.set"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "comment" : "Encodes a set of elements\n",
      "line" : 3414,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAC4asn16codecs3ber25BasicEncodingRulesElementZv",
      "originalType" : "@property @system void(in BERElement[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAC4asn16codecs3ber25BasicEncodingRulesElement"
       }
      ],
      "endline" : 3423,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.set"
      ]
     },
     {
      "name" : "numericString",
      "kind" : "function",
      "comment" : "        Decodes a string, where the characters of the string are limited to\n        0 - 9 and $(MONO SPACE).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any character other than 0-9 or space is encoded.)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3444,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3478,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.numericString"
      ]
     },
     {
      "name" : "numericString",
      "kind" : "function",
      "comment" : "        Encodes a string, where the characters of the string are limited to\n        0 - 9 and space.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any character other than 0-9 or space is supplied.)\n        )\n",
      "line" : 3490,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3500,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.numericString"
      ]
     },
     {
      "name" : "printableString",
      "kind" : "function",
      "comment" : "        Decodes a string that will only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if any character other than a-z, A-Z,\n                0-9, space, apostrophe, parentheses, comma, minus, plus,\n                period, forward slash, colon, equals, or question mark are\n                encoded)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3526,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3560,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.printableString"
      ]
     },
     {
      "name" : "printableString",
      "kind" : "function",
      "comment" : "        Encodes a string that may only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n\n        Throws:\n            $(LI $(D ASN1ValueCharactersException) if any character other than a-z, A-Z,\n                0-9, space, apostrophe, parentheses, comma, minus, plus,\n                period, forward slash, colon, equals, or question mark are\n                supplied)\n",
      "line" : 3574,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3584,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.printableString"
      ]
     },
     {
      "name" : "teletexString",
      "kind" : "function",
      "comment" : "        Literally just returns the value bytes.\n\n        Returns: an unsigned byte array, where each byte is a T.61 character.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3605,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAh",
      "endline" : 3633,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.teletexString"
      ]
     },
     {
      "name" : "teletexString",
      "kind" : "function",
      "comment" : "Literally just sets the value bytes.\n",
      "line" : 3637,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdNfxAhZv",
      "originalType" : "nothrow @property @safe void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 3641,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.teletexString"
      ]
     },
     {
      "name" : "videotexString",
      "kind" : "function",
      "comment" : "        Literally just returns the value bytes.\n\n        Returns: an unsigned byte array, where each byte is a Videotex character.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3662,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAh",
      "endline" : 3690,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.videotexString"
      ]
     },
     {
      "name" : "videotexString",
      "kind" : "function",
      "comment" : "Literally just sets the value bytes.\n",
      "line" : 3694,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdNfxAhZv",
      "originalType" : "nothrow @property @safe void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 3698,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.videotexString"
      ]
     },
     {
      "name" : "internationalAlphabetNumber5String",
      "kind" : "function",
      "comment" : "        Decodes a string that only contains ASCII characters.\n\n        $(MONO IA5String) differs from ASCII ever so slightly: IA5 is international,\n        leaving 10 characters up to be locale-specific:\n\n        $(TABLE\n            $(TR $(TH Byte) $(TH ASCII Character))\n            $(TR $(TD 0x40) $(TD @))\n            $(TR $(TD 0x5B) $(TD [))\n            $(TR $(TD 0x5C) $(TD \\))\n            $(TR $(TD 0x5D) $(TD ]))\n            $(TR $(TD 0x5E) $(TD ^))\n            $(TR $(TD 0x60) $(TD `))\n            $(TR $(TD 0x7B) $(TD {))\n            $(TR $(TD 0x7C) $(TD /))\n            $(TR $(TD 0x7D) $(TD }))\n            $(TR $(TD 0x7E) $(TD ~))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3735,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3770,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.internationalAlphabetNumber5String"
      ]
     },
     {
      "name" : "internationalAlphabetNumber5String",
      "kind" : "function",
      "comment" : "        Encodes a string that may only contain ASCII characters.\n\n        $(MONO IA5String) differs from ASCII ever so slightly: IA5 is international,\n        leaving 10 characters up to be locale-specific:\n\n        $(TABLE\n            $(TR $(TH Byte) $(TH ASCII Character))\n            $(TR $(TD 0x40) $(TD @))\n            $(TR $(TD 0x5B) $(TD [))\n            $(TR $(TD 0x5C) $(TD \\))\n            $(TR $(TD 0x5D) $(TD ]))\n            $(TR $(TD 0x5E) $(TD ^))\n            $(TR $(TD 0x60) $(TD `))\n            $(TR $(TD 0x7B) $(TD {))\n            $(TR $(TD 0x7C) $(TD /))\n            $(TR $(TD 0x7D) $(TD }))\n            $(TR $(TD 0x7E) $(TD ~))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n",
      "line" : 3798,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3808,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.internationalAlphabetNumber5String"
      ]
     },
     {
      "name" : "coordinatedUniversalTime",
      "kind" : "function",
      "comment" : "        Decodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n        The value is just the ASCII character representation of the UTC-formatted timestamp.\n\n        An UTC Timestamp looks like:\n        $(UL\n            $(LI $(MONO 9912312359Z))\n            $(LI $(MONO 991231235959+0200))\n        )\n\n        If the first digit of the two-digit year is 7, 6, 5, 4, 3, 2, 1, or 0,\n        meaning that the date refers to the first 80 years of the century, this\n        assumes we are talking about the 21st century and prepend '20' when\n        creating the ISO Date String. Otherwise, it assumes we are talking\n        about the 20th century, and prepend '19' when creating the string.\n\n        See_Also:\n        $(UL\n            $(LI $(LINK https://www.obj-sys.com/asn1tutorial/node15.html, UTCTime))\n            $(LI $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any character is not valid in a $(MONO Visiblestring))\n            $(LI $(D DateTimeException) if the encoded string cannot be decoded to a DateTime)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3848,
      "char" : 14,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS3std8datetime4date8DateTime",
      "endline" : 3866,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.coordinatedUniversalTime"
      ]
     },
     {
      "name" : "coordinatedUniversalTime",
      "kind" : "function",
      "comment" : "        Encodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n        The value is just the ASCII character representation of the UTC-formatted timestamp.\n\n        An UTC Timestamp looks like:\n        $(UL\n            $(LI $(MONO 9912312359Z))\n            $(LI $(MONO 991231235959+0200))\n        )\n\n        See_Also:\n            $(LINK https://www.obj-sys.com/asn1tutorial/node15.html, UTCTime)\n",
      "line" : 3882,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdxS3std8datetime4date8DateTimeZv",
      "originalType" : "nothrow @property @system void(in DateTime value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS3std8datetime4date8DateTime"
       }
      ],
      "endline" : 3893,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.coordinatedUniversalTime"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 3884,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "nothrow @system void()",
       "endline" : 3884,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L3896_C5",
      "kind" : "function",
      "line" : 3896,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3942,
      "endchar" : 5
     },
     {
      "name" : "generalizedTime",
      "kind" : "function",
      "comment" : "        Decodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n        The value is just the ASCII character representation of\n        the $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601)-formatted timestamp.\n\n        An ISO-8601 Timestamp looks like:\n        $(UL\n            $(LI $(MONO 19851106210627.3))\n            $(LI $(MONO 19851106210627.3Z))\n            $(LI $(MONO 19851106210627.3-0500))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any character is not valid in a $(MONO Visiblestring))\n            $(LI $(D DateTimeException) if the encoded string cannot be decoded to a DateTime)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601))\n        )\n",
      "line" : 3943,
      "char" : 14,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS3std8datetime4date8DateTime",
      "endline" : 3960,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.generalizedTime"
      ]
     },
     {
      "name" : "generalizedTime",
      "kind" : "function",
      "comment" : "        Encodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n\n        The value is just the ASCII character representation of\n        the $(LINK https://www.iso.org/iso-8601-date-and-time-format.html,\n        ISO 8601)-formatted timestamp.\n\n        An ISO-8601 Timestamp looks like:\n        $(UL\n            $(LI $(MONO 19851106210627.3))\n            $(LI $(MONO 19851106210627.3Z))\n            $(LI $(MONO 19851106210627.3-0500))\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601))\n        )\n",
      "line" : 3982,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdxS3std8datetime4date8DateTimeZv",
      "originalType" : "nothrow @property @system void(in DateTime value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS3std8datetime4date8DateTime"
       }
      ],
      "endline" : 3993,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.generalizedTime"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 3984,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "nothrow @system void()",
       "endline" : 3984,
       "endchar" : 5
      }
     },
     {
      "name" : "graphicString",
      "kind" : "function",
      "comment" : "        Decodes an ASCII string that contains only characters between and\n        including $(D 0x20) and $(D 0x75). Deprecated, according to page 182 of the\n        Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any non-graphical character (including space) is encoded)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 4024,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 4059,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.graphicString"
      ]
     },
     {
      "name" : "graphicString",
      "kind" : "function",
      "comment" : "        Encodes an ASCII string that may contain only characters between and\n        including $(D 0x20) and $(D 0x75). Deprecated, according to page 182\n        of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any non-graphical character (including space) is supplied)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 4081,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 4091,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.graphicString"
      ]
     },
     {
      "name" : "visibleString",
      "kind" : "function",
      "comment" : "        Decodes a string that only contains characters between and including\n        $(D 0x20) and $(D 0x7E). (Honestly, I don't know how this differs from\n        $(MONO GraphicalString).)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if any non-graphical character (including space) is encoded)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 4114,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 4149,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.visibleString"
      ]
     },
     {
      "name" : "visibleString",
      "kind" : "function",
      "comment" : "        Encodes a string that only contains characters between and including\n        $(D 0x20) and $(D 0x7E). (Honestly, I don't know how this differs from\n        $(MONO GraphicalString).)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if any non-graphical character (including space) is supplied.)\n        )\n",
      "line" : 4163,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 4173,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.visibleString"
      ]
     },
     {
      "name" : "generalString",
      "kind" : "function",
      "comment" : "        Decodes a string containing only ASCII characters. Deprecated, according\n        to page 182 of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, p. 182.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 4203,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 4238,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.generalString"
      ]
     },
     {
      "name" : "generalString",
      "kind" : "function",
      "comment" : "        Encodes a string containing only ASCII characters. Deprecated,\n        according to page 182 of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, p. 182.)\n        )\n",
      "line" : 4257,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 4267,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.generalString"
      ]
     },
     {
      "name" : "universalString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO dstring) of UTF-32 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if the encoded bytes is not evenly divisible by four)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 4288,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAyw",
      "endline" : 4350,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.universalString"
      ]
     },
     {
      "name" : "universalString",
      "kind" : "function",
      "comment" : "Encodes a $(MONO dstring) of UTF-32 characters.\n",
      "line" : 4354,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAywZv",
      "originalType" : "@property @system void(in dstring value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAyw"
       }
      ],
      "endline" : 4374,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.universalString"
      ]
     },
     {
      "name" : "characterString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO CharacterString), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CharacterString) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        Returns: an instance of $(D types.universal.characterstring.CharacterString).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded $(MONO CharacterString) has too few or too many\n                elements, or if $(MONO syntaxes) or $(MONO context-negotiation) element has\n                too few or too many elements)\n            $(LI $(D ASN1ValueSizeException) if encoded $(MONO INTEGER) is too large to decode)\n            $(LI $(D ASN1RecursionException) if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException) if any nested primitives do not have the\n                correct tag class)\n            $(LI $(D ASN1ConstructionException) if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException) if any nested primitives do not have the\n                correct tag number)\n        )\n",
      "line" : 4420,
      "char" : 21,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal15characterstring15CharacterString",
      "endline" : 4655,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.characterString"
      ]
     },
     {
      "name" : "characterString",
      "kind" : "function",
      "comment" : "        Encodes a $(MONO CharacterString), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CharacterString) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n",
      "line" : 4684,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal15characterstring15CharacterStringZv",
      "originalType" : "@property @system void(in CharacterString value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal15characterstring15CharacterString"
       }
      ],
      "endline" : 4760,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.characterString"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 4686,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 4686,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L4763_C5",
      "kind" : "function",
      "line" : 4763,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4780,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L4781_C5",
      "kind" : "function",
      "line" : 4781,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4803,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L4804_C5",
      "kind" : "function",
      "line" : 4804,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4858,
      "endchar" : 5
     },
     {
      "name" : "basicMultilingualPlaneString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO wstring) of UTF-16 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if the encoded bytes is not evenly divisible by two)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 4859,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAyu",
      "endline" : 4919,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.basicMultilingualPlaneString"
      ]
     },
     {
      "name" : "basicMultilingualPlaneString",
      "kind" : "function",
      "comment" : "Encodes a $(MONO wstring) of UTF-16 characters.\n",
      "line" : 4923,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyuZv",
      "originalType" : "@property @system void(in wstring value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAyu"
       }
      ],
      "endline" : 4943,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(BasicEncodingRulesElement).AbstractSyntaxNotation1Element.basicMultilingualPlaneString"
      ]
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "Creates an $(MONO END OF CONTENT) by default\n",
      "line" : 4947,
      "char" : 5,
      "deco" : "FNbNiNfE4asn19constants31AbstractSyntaxNotation1TagClassEQBxQBv35AbstractSyntaxNotation1ConstructionkZCQDr6codecs3ber25BasicEncodingRulesElement",
      "originalType" : "nothrow @nogc @safe (ASN1TagClass tagClass = ASN1TagClass.universal, ASN1Construction construction = ASN1Construction.primitive, size_t tagNumber = 0u)",
      "parameters" : [
       {
        "name" : "tagClass",
        "deco" : "E4asn19constants31AbstractSyntaxNotation1TagClass",
        "default" : "cast(AbstractSyntaxNotation1TagClass)cast(ubyte)0u"
       },
       {
        "name" : "construction",
        "deco" : "E4asn19constants35AbstractSyntaxNotation1Construction",
        "default" : "cast(AbstractSyntaxNotation1Construction)cast(ubyte)0u"
       },
       {
        "name" : "tagNumber",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 4958,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D BERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. The supplied $(D ubyte[]) array is \"chomped\" by\n        reference, so the original array will grow shorter as $(D BERElement)s are\n        generated.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes())\n\n        Examples:\n        ---\n        // Decoding looks like:\n        BERElement[] result;\n        while (bytes.length > 0)\n            result ~= new BERElement(bytes);\n\n        // Encoding looks like:\n        ubyte[] result;\n        foreach (bv; bervalues)\n        {\n            result ~= cast(ubyte[]) bv;\n        }\n        ---\n",
      "line" : 4985,
      "char" : 5,
      "deco" : "FKAhZC4asn16codecs3ber25BasicEncodingRulesElement",
      "originalType" : "@system (ref ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "Ah",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 4989,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D BERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. Unlike the construct that accepts a $(D ubyte[])\n        reference, this constructor does not \"chomp\" the array. This constructor\n        expects the encoded bytes to encode only one $(BERElement). If there are\n        any remaining bytes after decoding, an exception is thrown.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes()), but also throws an\n            $(D ASN1LengthException) if there are excess bytes.\n",
      "line" : 5003,
      "char" : 5,
      "deco" : "FxAhZC4asn16codecs3ber25BasicEncodingRulesElement",
      "originalType" : "@system (in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 5015,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D BERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. The supplied $(D ubyte[]) array is read, starting\n        from the index specified by $(D bytesRead), and increments\n        $(D bytesRead) by the number of bytes read.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes())\n\n        Examples:\n        ---\n        // Decoding looks like:\n        BERElement[] result;\n        size_t i = 0u;\n        while (i < bytes.length)\n            result ~= new BERElement(i, bytes);\n\n        // Encoding looks like:\n        ubyte[] result;\n        foreach (bv; bervalues)\n        {\n            result ~= cast(ubyte[]) bv;\n        }\n        ---\n",
      "line" : 5043,
      "char" : 5,
      "deco" : "FKkxAhZC4asn16codecs3ber25BasicEncodingRulesElement",
      "originalType" : "@system (ref size_t bytesRead, in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytesRead",
        "deco" : "k",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 5046,
      "endchar" : 5
     },
     {
      "name" : "fromBytes",
      "kind" : "function",
      "comment" : "        Returns: the number of bytes read\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1TagPaddingException) if the tag number is \"padded\" with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1TagOverflowException) if the tag number is too large to\n                fit into a $(D size_t))\n            $(LI $(D ASN1LengthUndefinedException) if the reserved length byte of\n                $(D 0xFF) is encountered)\n            $(LI $(D ASN1LengthOverflowException) if the length is too large to fit\n                into a $(D size_t))\n            $(LI $(D ASN1TruncationException) if the tag, length, or value appear to\n                be truncated)\n            $(LI $(D ASN1ConstructionException) if the length is indefinite, but the\n                element is marked as being encoded primitively)\n            $(LI $(D ASN1RecursionException) if, when trying to determine the end of\n                an indefinite-length encoded element, the parser has to recurse\n                too deep)\n        )\n",
      "line" : 5071,
      "char" : 12,
      "deco" : "FxAhZk",
      "originalType" : "size_t(in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 5287,
      "endchar" : 5,
      "overrides" : [
       "asn1.interfaces.Byteable.fromBytes"
      ]
     },
     {
      "name" : "toBytes",
      "kind" : "function",
      "comment" : "        This differs from $(D this.value) in that\n        $(D this.value) only returns the value octets, whereas\n        $(D this.toBytes) returns the type tag, length tag / octets,\n        and the value octets, all concatenated.\n\n        This is the exact same as $(D this.opCast!(ubyte[])()).\n\n        Returns: type tag, length tag, and value, all concatenated as a $(D ubyte) array.\n",
      "line" : 5300,
      "char" : 13,
      "deco" : "xFNbNdZAh",
      "endline" : 5372,
      "endchar" : 5,
      "overrides" : [
       "asn1.interfaces.Byteable.toBytes"
      ]
     },
     {
      "kind" : "template",
      "comment" : "        This differs from $(D this.value) in that\n        $(D this.value) only returns the value octets, whereas\n        $(D this.toBytes) returns the type tag, length tag / octets,\n        and the value octets, all concatenated.\n\n        This is the exact same as $(D this.toBytes()).\n\n        Returns: type tag, length tag, and value, all concatenated as a $(D ubyte) array.\n",
      "line" : 5385,
      "char" : 13,
      "name" : "opCast",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type",
        "default" : "ubyte[]"
       }
      ],
      "members" : [
       {
        "name" : "opCast",
        "kind" : "function",
        "line" : 5385,
        "char" : 13,
        "type" : "nothrow @system ubyte[]()",
        "endline" : 5388,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L5394_C1",
    "kind" : "function",
    "line" : 5394,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5545,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5546_C1",
    "kind" : "function",
    "line" : 5546,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5587,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5588_C1",
    "kind" : "function",
    "line" : 5588,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5630,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5631_C1",
    "kind" : "function",
    "line" : 5631,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5643,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5644_C1",
    "kind" : "function",
    "line" : 5644,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5657,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5658_C1",
    "kind" : "function",
    "line" : 5658,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5669,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5670_C1",
    "kind" : "function",
    "line" : 5670,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5680,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5681_C1",
    "kind" : "function",
    "line" : 5681,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5699,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5700_C1",
    "kind" : "function",
    "line" : 5700,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5723,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5724_C1",
    "kind" : "function",
    "line" : 5724,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5740,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5741_C1",
    "kind" : "function",
    "line" : 5741,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5753,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5754_C1",
    "kind" : "function",
    "line" : 5754,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5768,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5769_C1",
    "kind" : "function",
    "line" : 5769,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5778,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5779_C1",
    "kind" : "function",
    "line" : 5779,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5786,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5787_C1",
    "kind" : "function",
    "line" : 5787,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5794,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5795_C1",
    "kind" : "function",
    "line" : 5795,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5806,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5807_C1",
    "kind" : "function",
    "line" : 5807,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5818,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5819_C1",
    "kind" : "function",
    "line" : 5819,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5827,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5828_C1",
    "kind" : "function",
    "line" : 5828,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5836,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5837_C1",
    "kind" : "function",
    "line" : 5837,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5845,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5846_C1",
    "kind" : "function",
    "line" : 5846,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5871,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5872_C1",
    "kind" : "function",
    "line" : 5872,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5888,
    "endchar" : 2
   }
  ]
 },
 {
  "name" : "asn1.codecs.cer",
  "kind" : "module",
  "file" : ".\\source\\asn1\\codecs\\cer.d",
  "comment" : "    Canonical Encoding Rules (CER) is a standard for encoding ASN.1 data.\n    CER is often used for cryptgraphically-signed data, such as X.509\n    certificates, because CER's defining feature is that there is only one way\n    to encode each data type, which means that two encodings of the same data\n    could not have different cryptographic signatures. For this reason, CER\n    is generally regarded as the most secure encoding standard for ASN.1.\n    Like Basic Encoding Rules (BER), Canonical Encoding Rules (CER), and\n    Packed Encoding Rules (PER), Canonical Encoding Rules (CER) is a\n    specification created by the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union),\n    and specified in $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules)\n\n    Authors:\n    $(UL\n        $(LI $(PERSON Jonathan M. Wilbur, jonathan@wilbur.space, http://jonathan.wilbur.space))\n    )\n    Copyright: Copyright (C) Jonathan M. Wilbur\n    License: $(LINK https://mit-license.org/, MIT License)\n    Standards:\n    $(UL\n        $(LI $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)))\n        $(LI $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules))\n    )\n    See_Also:\n    $(UL\n        $(LI $(LINK https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One, The Wikipedia Page on ASN.1))\n        $(LI $(LINK https://en.wikipedia.org/wiki/X.690, The Wikipedia Page on X.690))\n        $(LI $(LINK https://www.strozhevsky.com/free_docs/asn1_in_simple_words.pdf, ASN.1 By Simple Words))\n        $(LI $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF, ASN.1: Communication Between Heterogeneous Systems))\n    )\n",
  "members" : [
   {
    "name" : "asn1.codec",
    "kind" : "import",
    "line" : 34,
    "char" : 15
   },
   {
    "name" : "asn1.interfaces",
    "kind" : "import",
    "line" : 35,
    "char" : 15,
    "selective" : [
     "Byteable"
    ]
   },
   {
    "name" : "asn1.types.identification",
    "kind" : "import",
    "line" : 36,
    "char" : 15
   },
   {
    "name" : "cerOID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 39,
    "char" : 8
   },
   {
    "name" : "cerObjectID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 41,
    "char" : 8
   },
   {
    "name" : "cerObjectIdentifier",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 43,
    "char" : 8
   },
   {
    "name" : "canonicalEncodingRulesObjectIdentifier",
    "kind" : "variable",
    "comment" : "    The object identifier assigned to the Canonical Encoding Rules (CER), per the\n    $(LINK https://www.itu.int/en/pages/default.aspx,\n        International Telecommunications Union)'s,\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules)\n\n    $(MONO {joint-iso-itu-t asn1(1) ber-derived(2) canonical-encoding(0)} )\n",
    "line" : 52,
    "char" : 22,
    "storageClass" : [
     "immutable"
    ],
    "deco" : "yC4asn15types9universal16objectidentifier16ObjectIdentifier",
    "originalType" : "OID",
    "init" : "ObjectIdentifier([ObjectIdentifierNode(2u, \"\"), ObjectIdentifierNode(1u, \"\"), ObjectIdentifierNode(2u, \"\"), ObjectIdentifierNode(0u, \"\")])"
   },
   {
    "name" : "CERElement",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 55,
    "char" : 8,
    "deco" : "C4asn16codecs3cer29CanonicalEncodingRulesElement"
   },
   {
    "name" : "CanonicalEncodingRulesElement",
    "kind" : "class",
    "comment" : "    The unit of encoding and decoding for Canonical Encoding Rules (CER).\n\n    There are three parts to an element encoded according to the Canonical\n    Encoding Rules (CER):\n\n    $(UL\n        $(LI A Type Tag, which specifies what data type is encoded)\n        $(LI A Length Tag, which specifies how many subsequent bytes encode the data)\n        $(LI The Encoded Value)\n    )\n\n    They appear in the binary encoding in that order, and as such, the encoding\n    scheme is sometimes described as \"TLV,\" which stands for Type-Length-Value.\n\n    This class provides a properties for getting and setting bit fields of\n    the type tag, but most of it is functionality for encoding data per\n    the specification.\n\n    As an example, this is what encoding a simple INTEGER looks like:\n\n    ---\n    CERElement cv = new CERElement();\n    cv.tagNumber = 0x02u; // \"2\" means this is an INTEGER\n    cv.integer = 1433; // Now the data is encoded.\n    transmit(cast(ubyte[]) cv); // transmit() is a made-up function.\n    ---\n\n    And this is what decoding looks like:\n\n    ---\n    ubyte[] data = receive(); // receive() is a made-up function.\n    CERElement cv2 = new CERElement(data);\n\n    long x;\n    if (cv.tagNumber == 0x02u) // it is an INTEGER\n    {\n        x = cv.integer;\n    }\n    // Now x is 1433!\n    ---\n",
    "line" : 108,
    "char" : 1,
    "base" : "asn1.codec.ASN1Element!(asn1.codecs.cer.CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element",
    "interfaces" : [
     "asn1.interfaces.Byteable"
    ],
    "members" : [
     {
      "name" : "__unittest_L111_C5",
      "kind" : "function",
      "line" : 111,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 126,
      "endchar" : 5
     },
     {
      "name" : "endOfContent",
      "kind" : "function",
      "comment" : "        \"Decodes\" an $(MONO END OF CONTENT), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
      "line" : 127,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZv",
      "endline" : 136,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.endOfContent"
      ]
     },
     {
      "name" : "boolean",
      "kind" : "function",
      "comment" : "        Decodes a $(D bool).\n\n        A $(D 0xFF) byte will be interpreted as $(MONO TRUE). A zero byte\n        ($(D 0x00)) will be interpreted as $(MONO FALSE). Any other value,\n        or any length other than 1 byte will throw an exception.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the encoded value is not exactly 1 byte in size)\n            $(LI $(D ASN1ValueException)\n                if the encoded value is not either 0xFF or 0x00)\n        )\n",
      "line" : 156,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZb",
      "endline" : 185,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.boolean"
      ]
     },
     {
      "name" : "boolean",
      "kind" : "function",
      "comment" : "Encodes a $(D bool)\n",
      "line" : 189,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdNfxbZv",
      "originalType" : "nothrow @property @safe void(in bool value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xb"
       }
      ],
      "endline" : 198,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.boolean"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 191,
       "char" : 5,
       "deco" : "FNaNbNiNfZv",
       "originalType" : "nothrow @safe void()",
       "endline" : 191,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L201_C5",
      "kind" : "function",
      "line" : 201,
      "char" : 5,
      "storageClass" : [
       "@safe"
      ],
      "endline" : 230,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a signed integer.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the value is too big to decode to a signed integral type,\n                or if the value is zero bytes)\n            $(LI $(D ASN1ValuePaddingException)\n                if there are padding bytes)\n        )\n",
      "line" : 231,
      "char" : 7,
      "name" : "integer",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
      "members" : [
       {
        "name" : "integer",
        "kind" : "function",
        "line" : 231,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 316,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Encodes a signed integral type\n",
      "line" : 320,
      "char" : 10,
      "name" : "integer",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
      "members" : [
       {
        "name" : "integer",
        "kind" : "function",
        "line" : 320,
        "char" : 10,
        "type" : "@property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 414,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L417_C5",
      "kind" : "function",
      "line" : 417,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 456,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L457_C5",
      "kind" : "function",
      "line" : 457,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 481,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L482_C5",
      "kind" : "function",
      "line" : 482,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 530,
      "endchar" : 5
     },
     {
      "name" : "bitString",
      "kind" : "function",
      "comment" : "        Decodes an array of $(D bool)s representing a string of bits.\n\n        Returns: an array of $(D bool)s, where each $(D bool) represents a bit\n            in the encoded bit string\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueSizeException)\n                if the any primitive contains 0 bytes)\n            $(LI $(D ASN1ValueException)\n                if the first byte has a value greater\n                than seven, or if the first byte indicates the presence of\n                padding bits when no subsequent bytes exist, or if any primitive\n                but the last in a constructed BIT STRING uses padding bits, or\n                if any of the padding bits are set)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 531,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAb",
      "endline" : 685,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.bitString"
      ],
      "in" : {
       "name" : "__require",
       "kind" : "function",
       "line" : 533,
       "char" : 5,
       "type" : "@system void()",
       "endline" : 533,
       "endchar" : 5
      }
     },
     {
      "name" : "bitString",
      "kind" : "function",
      "comment" : "Encodes an array of $(D bool)s representing a string of bits.\n",
      "line" : 689,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAbZv",
      "originalType" : "@property @system void(in bool[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAb"
       }
      ],
      "endline" : 736,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.bitString"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 691,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 691,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L739_C5",
      "kind" : "function",
      "line" : 739,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 752,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L753_C5",
      "kind" : "function",
      "line" : 753,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 781,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L782_C5",
      "kind" : "function",
      "line" : 782,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 796,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L797_C5",
      "kind" : "function",
      "line" : 797,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 820,
      "endchar" : 5
     },
     {
      "name" : "octetString",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO OCTET STRING) into an unsigned byte array.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 821,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAh",
      "endline" : 882,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.octetString"
      ]
     },
     {
      "name" : "octetString",
      "kind" : "function",
      "comment" : "Encodes an $(MONO OCTET STRING) from an unsigned byte ($(D ubyte)) array.\n",
      "line" : 886,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAhZv",
      "originalType" : "@property @system void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 924,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.octetString"
      ],
      "in" : {
       "name" : "__require",
       "kind" : "function",
       "line" : 888,
       "char" : 5,
       "type" : "@system void()",
       "endline" : 888,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L927_C5",
      "kind" : "function",
      "line" : 927,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 967,
      "endchar" : 5
     },
     {
      "name" : "nill",
      "kind" : "function",
      "comment" : "        \"Decodes\" a $(D null), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Note:\n            I had to name this method $(D nill), because $(D null) is a keyword in D.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
      "line" : 968,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZv",
      "endline" : 977,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.nill"
      ]
     },
     {
      "name" : "objectIdentifier",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO OBJECT IDENTIFIER).\n        See $(MONO source/types/universal/objectidentifier.d) for information about\n        the $(D ObjectIdentifier) class (aliased as $(D OID)).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are no value bytes)\n            $(LI $(D ASN1ValuePaddingException) if a single OID number is encoded with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1ValueOverflowException) if a single OID number is too big to\n                decode to a $(D size_t))\n            $(LI $(D ASN1TruncationException) if a single OID number is \"cut off\")\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 1001,
      "char" : 9,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZC4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "const @property @system OID()",
      "endline" : 1089,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.objectIdentifier"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 1003,
       "char" : 5,
       "deco" : "FKxC4asn15types9universal16objectidentifier16ObjectIdentifierZv",
       "originalType" : "@system void(ref const ObjectIdentifier value)",
       "parameters" : [
        {
         "name" : "value",
         "deco" : "xC4asn15types9universal16objectidentifier16ObjectIdentifier",
         "storageClass" : [
          "ref"
         ]
        }
       ],
       "endline" : 1003,
       "endchar" : 5
      }
     },
     {
      "name" : "objectIdentifier",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO OBJECT IDENTIFIER).\n        See $(MONO source/types/universal/objectidentifier.d) for information about\n        the $(D ObjectIdentifier) class (aliased as $(OID)).\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 1102,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxC4asn15types9universal16objectidentifier16ObjectIdentifierZv",
      "originalType" : "@property @system void(in OID value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xC4asn15types9universal16objectidentifier16ObjectIdentifier"
       }
      ],
      "endline" : 1146,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.objectIdentifier"
      ],
      "in" : {
       "name" : "__require",
       "kind" : "function",
       "line" : 1104,
       "char" : 5,
       "type" : "@system void()",
       "endline" : 1104,
       "endchar" : 5
      },
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 1113,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 1113,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L1149_C5",
      "kind" : "function",
      "line" : 1149,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1168,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1169_C5",
      "kind" : "function",
      "line" : 1169,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1237,
      "endchar" : 5
     },
     {
      "name" : "objectDescriptor",
      "kind" : "function",
      "comment" : "        Decodes an $(D ObjectDescriptor), which is a string consisting of only\n        graphical characters. In fact, $(D ObjectDescriptor) is actually implicitly\n        just a $(MONO GraphicString)! The formal specification for an $(D ObjectDescriptor)\n        is:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        $(MONO GraphicString) is just a string containing only characters between\n        and including $(D 0x20) and $(D 0x7E), therefore ObjectDescriptor is just\n        $(D 0x20) and $(D 0x7E).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if the encoded value contains any character outside of\n                $(D 0x20) to $(D 0x7E), which means any control characters or $(MONO DELETE))\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 1238,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 1305,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.objectDescriptor"
      ]
     },
     {
      "name" : "objectDescriptor",
      "kind" : "function",
      "comment" : "        Encodes an $(D ObjectDescriptor), which is a string consisting of only\n        graphical characters. In fact, $(D ObjectDescriptor) is actually implicitly\n        just a $(MONO GraphicString)! The formal specification for an $(D ObjectDescriptor)\n        is:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        $(MONO GraphicString) is just a string containing only characters between\n        and including $(D 0x20) and $(D 0x7E), therefore ObjectDescriptor is just\n        $(D 0x20) and $(D 0x7E).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if the string value contains any character outside of\n                $(D 0x20) to $(D 0x7E), which means any control characters or $(MONO DELETE))\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 1336,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 1372,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.objectDescriptor"
      ]
     },
     {
      "name" : "__unittest_L1375_C5",
      "kind" : "function",
      "line" : 1375,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1571,
      "endchar" : 5
     },
     {
      "name" : "external",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO EXTERNAL).\n\n        According to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)),\n        the abstract definition for an $(MONO EXTERNAL), after removing the comments in the\n        specification, is as follows:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        Note that the abstract syntax resembles that of $(MONO EmbeddedPDV) and\n        $(MONO CharacterString), except with a $(MONO WITH COMPONENTS) constraint that removes some\n        of our choices of $(MONO identification).\n        As can be seen on page 303 of Olivier Dubuisson's\n        $(I $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF,\n            ASN.1: Communication Between Heterogeneous Systems)),\n        after applying the $(MONO WITH COMPONENTS) constraint, our reduced syntax becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        But, according to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules),\n        section 8.18, when encoded using Basic Encoding Rules (BER), is encoded as\n        follows, for compatibility reasons:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                direct-reference  OBJECT IDENTIFIER OPTIONAL,\n                indirect-reference  INTEGER OPTIONAL,\n                data-value-descriptor  ObjectDescriptor  OPTIONAL,\n                encoding  CHOICE {\n                    single-ASN1-type  [0] ANY,\n                    octet-aligned     [1] IMPLICIT OCTET STRING,\n                    arbitrary         [2] IMPLICIT BIT STRING } }\n        )\n\n        The definition above is the pre-1994 definition of $(MONO EXTERNAL). The $(MONO syntax)\n        field of the post-1994 definition maps to the $(MONO direct-reference) field of\n        the pre-1994 definition. The $(MONO presentation-context-id) field of the post-1994\n        definition maps to the $(MONO indirect-reference) field of the pre-1994 definition.\n        If $(MONO context-negotiation) is used, per the abstract syntax, then the\n        $(MONO presentation-context-id) field of the $(MONO context-negotiation) $(MONO SEQUENCE) in the\n        post-1994 definition maps to the $(MONO indirect-reference) field of the pre-1994\n        definition, and the $(MONO transfer-syntax) field of the $(MONO context-negotiation)\n        $(MONO SEQUENCE) maps to the $(MONO direct-reference) field of the pre-1994 definition.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx,\n        International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EXTERNAL ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        $(MONO context-negotiation), which makes the following the effective abstract\n        syntax of $(MONO EXTERNAL) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EXTERNAL)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Upon removing the $(MONO CHOICE) tag (since you have no choice but to use syntax\n        at this point), the encoding definition when using\n        Canonical Encoding Rules or Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                syntax OBJECT IDENTIFIER,\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Returns: an instance of $(D types.universal.external.External)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if the SEQUENCE does not contain two to four elements)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not have the correct tag class)\n            $(LI $(D ASN1ConstructionException)\n                if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not have the correct tag number)\n            $(LI $(D ASN1ValueCharactersException)\n                if a data-value-descriptor is supplied with invalid characters)\n        )\n",
      "line" : 1572,
      "char" : 14,
      "storageClass" : [
       "deprecated",
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal8external8External",
      "endline" : 1655,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.external"
      ]
     },
     {
      "name" : "external",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO EXTERNAL).\n\n        According to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)),\n        the abstract definition for an $(MONO EXTERNAL), after removing the comments in the\n        specification, is as follows:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        Note that the abstract syntax resembles that of $(MONO EmbeddedPDV) and\n        $(MONO CharacterString), except with a $(MONO WITH COMPONENTS) constraint that removes some\n        of our choices of $(MONO identification).\n        As can be seen on page 303 of Olivier Dubuisson's\n        $(I $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF,\n            ASN.1: Communication Between Heterogeneous Systems)),\n        after applying the $(MONO WITH COMPONENTS) constraint, our reduced syntax becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        But, according to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules),\n        section 8.18, when encoded using Basic Encoding Rules (BER), is encoded as\n        follows, for compatibility reasons:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                direct-reference  OBJECT IDENTIFIER OPTIONAL,\n                indirect-reference  INTEGER OPTIONAL,\n                data-value-descriptor  ObjectDescriptor  OPTIONAL,\n                encoding  CHOICE {\n                    single-ASN1-type  [0] ANY,\n                    octet-aligned     [1] IMPLICIT OCTET STRING,\n                    arbitrary         [2] IMPLICIT BIT STRING } }\n        )\n\n        The definition above is the pre-1994 definition of $(MONO EXTERNAL). The $(MONO syntax)\n        field of the post-1994 definition maps to the $(MONO direct-reference) field of\n        the pre-1994 definition. The $(MONO presentation-context-id) field of the post-1994\n        definition maps to the $(MONO indirect-reference) field of the pre-1994 definition.\n        If $(MONO context-negotiation) is used, per the abstract syntax, then the\n        $(MONO presentation-context-id) field of the $(MONO context-negotiation) $(MONO SEQUENCE) in the\n        post-1994 definition maps to the $(MONO indirect-reference) field of the pre-1994\n        definition, and the $(MONO transfer-syntax) field of the $(MONO context-negotiation)\n        $(MONO SEQUENCE) maps to the $(MONO direct-reference) field of the pre-1994 definition.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx,\n        International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EXTERNAL ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        $(MONO context-negotiation), which makes the following the effective abstract\n        syntax of $(MONO EXTERNAL) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EXTERNAL)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Upon removing the $(MONO CHOICE) tag (since you have no choice but to use syntax\n        at this point), the encoding definition when using\n        Canonical Encoding Rules or Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                syntax OBJECT IDENTIFIER,\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Returns: an instance of $(D types.universal.external.External)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if something other than $(D syntax) is used for $(MONO identification))\n            $(LI $(D ASN1ValueCharactersException)\n                if a data-value-descriptor is supplied with invalid characters)\n        )\n",
      "line" : 1818,
      "char" : 10,
      "storageClass" : [
       "deprecated",
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal8external8ExternalZv",
      "originalType" : "@property @system void(in External value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal8external8External"
       }
      ],
      "endline" : 1858,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.external"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 1820,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 1820,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L1866_C5",
      "kind" : "function",
      "line" : 1866,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1881,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1882_C5",
      "kind" : "function",
      "line" : 1882,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1910,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1911_C5",
      "kind" : "function",
      "line" : 1911,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1996,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a floating-point type.\n\n        Note that this method assumes that your machine uses\n        $(LINK http://ieeexplore.ieee.org/document/4610935/, IEEE 754-2008)\n        floating point format.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1TruncationException) if the value appears to be \"cut off\")\n            $(LI $(D ConvException) if character-encoding cannot be converted to\n                the selected floating-point type, T)\n            $(LI $(D ConvOverflowException) if the character-encoding encodes a\n                number that is too big for the selected floating-point\n                type to express)\n            $(LI $(D ASN1ValueSizeException) if the binary-encoding contains fewer\n                bytes than the information byte purports, or if the\n                binary-encoded mantissa is too big to be expressed by an\n                unsigned long integer)\n            $(LI $(D ASN1ValueException) if a complicated-form exponent or a\n                non-zero-byte mantissa encodes a zero or even number, of if a base-10\n                (character-encoded) REAL is has something wrong that is not\n                covered by $(D ASN1ValueCharactersException) or\n                $(D ASN1ValuePaddingException))\n            $(LI $(D ASN1ValueUndefinedException) if both bits indicating the base in the\n                information byte of a binary-encoded $(MONO REAL)'s information byte\n                are set, which would indicate an invalid base, or if a special\n                value has been indicated that is not defined by the specification)\n            $(LI $(D ASN1ValuePaddingException) if a base-10 (character-encoded)\n                REAL is encoded with leading zeroes, or trailing zeroes on the\n                mantissa, or if the mantissa is encoded on more than the minimal\n                necessary octets)\n            $(LI $(D ASN1ValueCharactersException) if a base-10 (character-encoded)\n                REAL is encoded with characters that are not numeric, a decimal, E,\n                or plus or minus)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 400-402.)\n            $(LI $(LINK https://www.iso.org/standard/12285.html, ISO 6093))\n        )\n",
      "line" : 1997,
      "char" : 7,
      "name" : "realNumber",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isFloatingPoint!T",
      "members" : [
       {
        "name" : "realNumber",
        "kind" : "function",
        "line" : 1997,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 2288,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "        Encodes a floating-point type, using base-2 binary encoding.\n\n        Note that this method assumes that your machine uses\n        $(LINK http://ieeexplore.ieee.org/document/4610935/, IEEE 754-2008)\n        floating point format.\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 400-402.)\n            $(LI $(LINK https://www.iso.org/standard/12285.html, ISO 6093))\n        )\n",
      "line" : 2306,
      "char" : 10,
      "name" : "realNumber",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isFloatingPoint!T",
      "members" : [
       {
        "name" : "realNumber",
        "kind" : "function",
        "line" : 2306,
        "char" : 10,
        "type" : "nothrow @property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 2489,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L2492_C5",
      "kind" : "function",
      "line" : 2492,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2606,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2607_C5",
      "kind" : "function",
      "line" : 2607,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2650,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2651_C5",
      "kind" : "function",
      "line" : 2651,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2697,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a signed integer, which represents a selection from an\n        $(MONO ENUMERATION) of choices.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the value is too big to decode to a signed integral type,\n                or if the value is zero bytes)\n            $(LI $(D ASN1ValuePaddingException)\n                if there are padding bytes)\n        )\n",
      "line" : 2698,
      "char" : 7,
      "name" : "enumerated",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T",
      "members" : [
       {
        "name" : "enumerated",
        "kind" : "function",
        "line" : 2698,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 2749,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Encodes an $(MONO ENUMERATED) type from an integer.\n",
      "line" : 2753,
      "char" : 10,
      "name" : "enumerated",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "enumerated",
        "kind" : "function",
        "line" : 2753,
        "char" : 10,
        "type" : "nothrow @property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 2811,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L2815_C5",
      "kind" : "function",
      "line" : 2815,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2839,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2840_C5",
      "kind" : "function",
      "line" : 2840,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2966,
      "endchar" : 5
     },
     {
      "name" : "embeddedPresentationDataValue",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n            the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EmbeddedPDV ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        context-negotiation, which makes the following the effective abstract\n        syntax of $(MONO EmbeddedPDV) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EmbeddedPDV)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Returns: an instance of $(D types.universal.embeddedpdv.EmbeddedPDV)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded EmbeddedPDV has too few or too many\n                elements, or if syntaxes or context-negotiation element has\n                too few or too many elements)\n            $(LI $(D ASN1ValueSizeException) if encoded INTEGER is too large to decode)\n            $(LI $(D ASN1RecursionException) if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException) if any nested primitives do not have the\n                correct tag class)\n            $(LI $(D ASN1ConstructionException) if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException) if any nested primitives do not have the\n                correct tag number)\n        )\n",
      "line" : 2967,
      "char" : 17,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValue",
      "originalType" : "const @property @system EmbeddedPDV()",
      "endline" : 3117,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.embeddedPresentationDataValue"
      ]
     },
     {
      "name" : "embeddedPresentationDataValue",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n            the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EmbeddedPDV ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        context-negotiation, which makes the following the effective abstract\n        syntax of $(MONO EmbeddedPDV) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EmbeddedPDV)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        If the supplied $(MONO identification) for the EmbeddedPDV is a\n        $(MONO presentation-context-id) or a $(MONO context-negotiation),\n        no exception will be thrown; the $(MONO identification) will be set to\n        $(MONO fixed) silently.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded ObjectDescriptor contains invalid characters)\n        )\n",
      "line" : 3218,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValueZv",
      "originalType" : "@property @system void(in EmbeddedPDV value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValue"
       }
      ],
      "endline" : 3273,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.embeddedPresentationDataValue"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 3220,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 3220,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L3284_C5",
      "kind" : "function",
      "line" : 3284,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3309,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3310_C5",
      "kind" : "function",
      "line" : 3310,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3331,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3332_C5",
      "kind" : "function",
      "line" : 3332,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3386,
      "endchar" : 5
     },
     {
      "name" : "unicodeTransformationFormat8String",
      "kind" : "function",
      "comment" : "        Decodes the value to UTF-8 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D UTF8Exception)\n                if the encoded value does not decode to UTF-8)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3387,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3448,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.unicodeTransformationFormat8String"
      ]
     },
     {
      "name" : "unicodeTransformationFormat8String",
      "kind" : "function",
      "comment" : "Encodes a UTF-8 string to bytes.\n",
      "line" : 3452,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3481,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.unicodeTransformationFormat8String"
      ]
     },
     {
      "name" : "__unittest_L3484_C5",
      "kind" : "function",
      "line" : 3484,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3529,
      "endchar" : 5
     },
     {
      "name" : "relativeObjectIdentifier",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO RELATIVE OBJECT IDENTIFIER).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValuePaddingException) if a single OID number is encoded with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1ValueOverflowException) if a single OID number is too big to\n                decode to a $(D size_t))\n            $(LI $(D ASN1TruncationException) if a single OID number is \"cut off\")\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 3530,
      "char" : 15,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAS4asn15types7oidtype20ObjectIdentifierNode",
      "originalType" : "const @property @system OIDNode[]()",
      "endline" : 3599,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.relativeObjectIdentifier"
      ]
     },
     {
      "name" : "relativeObjectIdentifier",
      "kind" : "function",
      "comment" : "        Encodes a $(MONO RELATIVE OBJECT IDENTIFIER).\n\n        Standards:\n            $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660)\n",
      "line" : 3608,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdxAS4asn15types7oidtype20ObjectIdentifierNodeZv",
      "originalType" : "nothrow @property @system void(in OIDNode[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAS4asn15types7oidtype20ObjectIdentifierNode"
       }
      ],
      "endline" : 3635,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.relativeObjectIdentifier"
      ]
     },
     {
      "name" : "__unittest_L3638_C5",
      "kind" : "function",
      "line" : 3638,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3657,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3658_C5",
      "kind" : "function",
      "line" : 3658,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3690,
      "endchar" : 5
     },
     {
      "name" : "sequence",
      "kind" : "function",
      "comment" : "        Decodes a sequence of elements\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"primitive\")\n            $(LI And all of the exceptions thrown by the constructor)\n        )\n",
      "line" : 3691,
      "char" : 18,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAC4asn16codecs3cer29CanonicalEncodingRulesElement",
      "originalType" : "const @property @system CERElement[]()",
      "endline" : 3702,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.sequence"
      ]
     },
     {
      "name" : "sequence",
      "kind" : "function",
      "comment" : "Encodes a sequence of elements\n",
      "line" : 3706,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAC4asn16codecs3cer29CanonicalEncodingRulesElementZv",
      "originalType" : "@property @system void(in CERElement[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAC4asn16codecs3cer29CanonicalEncodingRulesElement"
       }
      ],
      "endline" : 3715,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.sequence"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "comment" : "        Decodes a set of elements\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"primitive\")\n            $(LI And all of the exceptions thrown by the constructor)\n        )\n",
      "line" : 3727,
      "char" : 18,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAC4asn16codecs3cer29CanonicalEncodingRulesElement",
      "originalType" : "const @property @system CERElement[]()",
      "endline" : 3738,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.set"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "comment" : "Encodes a set of elements\n",
      "line" : 3742,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAC4asn16codecs3cer29CanonicalEncodingRulesElementZv",
      "originalType" : "@property @system void(in CERElement[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAC4asn16codecs3cer29CanonicalEncodingRulesElement"
       }
      ],
      "endline" : 3751,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.set"
      ]
     },
     {
      "name" : "numericString",
      "kind" : "function",
      "comment" : "        Decodes a string, where the characters of the string are limited to\n        0 - 9 and $(MONO SPACE).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any character other than 0-9 or space is encoded.)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3772,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3839,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.numericString"
      ]
     },
     {
      "name" : "numericString",
      "kind" : "function",
      "comment" : "        Encodes a string, where the characters of the string are limited to\n        0 - 9 and space.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any character other than 0-9 or space is supplied.)\n        )\n",
      "line" : 3851,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3887,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.numericString"
      ]
     },
     {
      "name" : "__unittest_L3890_C5",
      "kind" : "function",
      "line" : 3890,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3940,
      "endchar" : 5
     },
     {
      "name" : "printableString",
      "kind" : "function",
      "comment" : "        Decodes a string that will only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if any character other than a-z, A-Z,\n                0-9, space, apostrophe, parentheses, comma, minus, plus,\n                period, forward slash, colon, equals, or question mark are\n                encoded)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 3941,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 4008,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.printableString"
      ]
     },
     {
      "name" : "printableString",
      "kind" : "function",
      "comment" : "        Encodes a string that may only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n\n        Throws:\n            $(LI $(D ASN1ValueCharactersException) if any character other than a-z, A-Z,\n                0-9, space, apostrophe, parentheses, comma, minus, plus,\n                period, forward slash, colon, equals, or question mark are\n                supplied)\n",
      "line" : 4022,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 4058,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.printableString"
      ]
     },
     {
      "name" : "__unittest_L4061_C5",
      "kind" : "function",
      "line" : 4061,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4106,
      "endchar" : 5
     },
     {
      "name" : "teletexString",
      "kind" : "function",
      "comment" : "        Literally just returns the value bytes.\n\n        Returns: an unsigned byte array, where each byte is a T.61 character.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 4107,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAh",
      "endline" : 4168,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.teletexString"
      ]
     },
     {
      "name" : "teletexString",
      "kind" : "function",
      "comment" : "Literally just sets the value bytes.\n",
      "line" : 4172,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAhZv",
      "originalType" : "@property @system void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 4201,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.teletexString"
      ]
     },
     {
      "name" : "__unittest_L4204_C5",
      "kind" : "function",
      "line" : 4204,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4249,
      "endchar" : 5
     },
     {
      "name" : "videotexString",
      "kind" : "function",
      "comment" : "        Literally just returns the value bytes.\n\n        Returns: an unsigned byte array, where each byte is a Videotex character.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 4250,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAh",
      "endline" : 4311,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.videotexString"
      ]
     },
     {
      "name" : "videotexString",
      "kind" : "function",
      "comment" : "Literally just sets the value bytes.\n",
      "line" : 4315,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAhZv",
      "originalType" : "@property @system void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 4344,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.videotexString"
      ]
     },
     {
      "name" : "__unittest_L4347_C5",
      "kind" : "function",
      "line" : 4347,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4408,
      "endchar" : 5
     },
     {
      "name" : "internationalAlphabetNumber5String",
      "kind" : "function",
      "comment" : "        Decodes a string that only contains ASCII characters.\n\n        $(MONO IA5String) differs from ASCII ever so slightly: IA5 is international,\n        leaving 10 characters up to be locale-specific:\n\n        $(TABLE\n            $(TR $(TH Byte) $(TH ASCII Character))\n            $(TR $(TD 0x40) $(TD @))\n            $(TR $(TD 0x5B) $(TD [))\n            $(TR $(TD 0x5C) $(TD \\))\n            $(TR $(TD 0x5D) $(TD ]))\n            $(TR $(TD 0x5E) $(TD ^))\n            $(TR $(TD 0x60) $(TD `))\n            $(TR $(TD 0x7B) $(TD {))\n            $(TR $(TD 0x7C) $(TD /))\n            $(TR $(TD 0x7D) $(TD }))\n            $(TR $(TD 0x7E) $(TD ~))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 4409,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 4476,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.internationalAlphabetNumber5String"
      ]
     },
     {
      "name" : "internationalAlphabetNumber5String",
      "kind" : "function",
      "comment" : "        Encodes a string that may only contain ASCII characters.\n\n        $(MONO IA5String) differs from ASCII ever so slightly: IA5 is international,\n        leaving 10 characters up to be locale-specific:\n\n        $(TABLE\n            $(TR $(TH Byte) $(TH ASCII Character))\n            $(TR $(TD 0x40) $(TD @))\n            $(TR $(TD 0x5B) $(TD [))\n            $(TR $(TD 0x5C) $(TD \\))\n            $(TR $(TD 0x5D) $(TD ]))\n            $(TR $(TD 0x5E) $(TD ^))\n            $(TR $(TD 0x60) $(TD `))\n            $(TR $(TD 0x7B) $(TD {))\n            $(TR $(TD 0x7C) $(TD /))\n            $(TR $(TD 0x7D) $(TD }))\n            $(TR $(TD 0x7E) $(TD ~))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n",
      "line" : 4504,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 4540,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.internationalAlphabetNumber5String"
      ]
     },
     {
      "name" : "__unittest_L4543_C5",
      "kind" : "function",
      "line" : 4543,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4608,
      "endchar" : 5
     },
     {
      "name" : "coordinatedUniversalTime",
      "kind" : "function",
      "comment" : "        Decodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n        The value is just the ASCII character representation of the UTC-formatted timestamp.\n\n        An UTC Timestamp looks like:\n        $(UL\n            $(LI $(MONO 9912312359Z))\n            $(LI $(MONO 991231235959+0200))\n        )\n\n        If the first digit of the two-digit year is 7, 6, 5, 4, 3, 2, 1, or 0,\n        meaning that the date refers to the first 80 years of the century, this\n        assumes we are talking about the 21st century and prepend '20' when\n        creating the ISO Date String. Otherwise, it assumes we are talking\n        about the 20th century, and prepend '19' when creating the string.\n\n        See_Also:\n        $(UL\n            $(LI $(LINK https://www.obj-sys.com/asn1tutorial/node15.html, UTCTime))\n            $(LI $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if the encoded value does not end with a 'Z')\n            $(LI $(D ASN1ValueCharactersException) if any character is not valid in a $(MONO Visiblestring))\n            $(LI $(D DateTimeException) if the encoded string cannot be decoded to a DateTime)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 4609,
      "char" : 14,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS3std8datetime4date8DateTime",
      "endline" : 4642,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.coordinatedUniversalTime"
      ]
     },
     {
      "name" : "coordinatedUniversalTime",
      "kind" : "function",
      "comment" : "        Encodes a DateTime. The value is just the ASCII character representation of\n        the UTC-formatted timestamp.\n\n        An UTC Timestamp looks like:\n        $(UL\n            $(LI $(MONO 9912312359Z))\n            $(LI $(MONO 991231235959+0200))\n        )\n\n        See_Also:\n            $(LINK https://www.obj-sys.com/asn1tutorial/node15.html, UTCTime)\n",
      "line" : 4658,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS3std8datetime4date8DateTimeZv",
      "originalType" : "@property @system void(in DateTime value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS3std8datetime4date8DateTime"
       }
      ],
      "endline" : 4670,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.coordinatedUniversalTime"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 4660,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 4660,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L4673_C5",
      "kind" : "function",
      "line" : 4673,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4714,
      "endchar" : 5
     },
     {
      "name" : "generalizedTime",
      "kind" : "function",
      "comment" : "        Decodes a DateTime. The value is just the ASCII character representation of\n        the $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601)-formatted timestamp.\n\n        An ISO-8601 Timestamp looks like:\n        $(UL\n            $(LI $(MONO 19851106210627.3))\n            $(LI $(MONO 19851106210627.3Z))\n            $(LI $(MONO 19851106210627.3-0500))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if the encoded value did not end with a 'Z'\n                or contained a misplaced or unnecessary decimal point)\n            $(LI $(D ASN1ValueCharactersException) if any character is not valid in a $(MONO Visiblestring))\n            $(LI $(D DateTimeException) if the encoded string cannot be decoded to a DateTime)\n            $(LI $(D ASN1ValuePaddingException) if the seconds fraction contains trailing zeroes)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601))\n        )\n",
      "line" : 4715,
      "char" : 14,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS3std8datetime4date8DateTime",
      "endline" : 4787,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.generalizedTime"
      ]
     },
     {
      "name" : "generalizedTime",
      "kind" : "function",
      "comment" : "        Encodes a DateTime.\n\n        The value is just the ASCII character representation of\n        the $(LINK https://www.iso.org/iso-8601-date-and-time-format.html,\n        ISO 8601)-formatted timestamp.\n\n        An ISO-8601 Timestamp looks like:\n        $(UL\n            $(LI $(MONO 19851106210627.3))\n            $(LI $(MONO 19851106210627.3Z))\n            $(LI $(MONO 19851106210627.3-0500))\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601))\n        )\n",
      "line" : 4809,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS3std8datetime4date8DateTimeZv",
      "originalType" : "@property @system void(in DateTime value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS3std8datetime4date8DateTime"
       }
      ],
      "endline" : 4820,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.generalizedTime"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 4811,
       "char" : 5,
       "deco" : "FNaZv",
       "originalType" : "@system void()",
       "endline" : 4811,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L4824_C5",
      "kind" : "function",
      "line" : 4824,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4839,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L4840_C5",
      "kind" : "function",
      "line" : 4840,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4888,
      "endchar" : 5
     },
     {
      "name" : "graphicString",
      "kind" : "function",
      "comment" : "        Decodes an ASCII string that contains only characters between and\n        including $(D 0x20) and $(D 0x75). Deprecated, according to page 182 of the\n        Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any non-graphical character (including space) is encoded)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 4889,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 4956,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.graphicString"
      ]
     },
     {
      "name" : "graphicString",
      "kind" : "function",
      "comment" : "        Encodes an ASCII string that may contain only characters between and\n        including $(D 0x20) and $(D 0x75). Deprecated, according to page 182\n        of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any non-graphical character (including space) is supplied)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 4978,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 5014,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.graphicString"
      ]
     },
     {
      "name" : "__unittest_L5017_C5",
      "kind" : "function",
      "line" : 5017,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 5064,
      "endchar" : 5
     },
     {
      "name" : "visibleString",
      "kind" : "function",
      "comment" : "        Decodes a string that only contains characters between and including\n        $(D 0x20) and $(D 0x7E). (Honestly, I don't know how this differs from\n        $(MONO GraphicalString).)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if any non-graphical character (including space) is encoded)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 5065,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 5132,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.visibleString"
      ]
     },
     {
      "name" : "visibleString",
      "kind" : "function",
      "comment" : "        Encodes a string that only contains characters between and including\n        $(D 0x20) and $(D 0x7E). (Honestly, I don't know how this differs from\n        $(MONO GraphicalString).)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if any non-graphical character (including space) is supplied.)\n        )\n",
      "line" : 5146,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 5182,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.visibleString"
      ]
     },
     {
      "name" : "__unittest_L5185_C5",
      "kind" : "function",
      "line" : 5185,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 5239,
      "endchar" : 5
     },
     {
      "name" : "generalString",
      "kind" : "function",
      "comment" : "        Decodes a string containing only ASCII characters. Deprecated, according\n        to page 182 of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, p. 182.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 5240,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 5307,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.generalString"
      ]
     },
     {
      "name" : "generalString",
      "kind" : "function",
      "comment" : "        Encodes a string containing only ASCII characters. Deprecated,\n        according to page 182 of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, p. 182.)\n        )\n",
      "line" : 5326,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 5362,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.generalString"
      ]
     },
     {
      "name" : "__unittest_L5365_C5",
      "kind" : "function",
      "line" : 5365,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 5410,
      "endchar" : 5
     },
     {
      "name" : "universalString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO dstring) of UTF-32 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if the encoded bytes is not evenly divisible by four)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 5411,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAyw",
      "endline" : 5506,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.universalString"
      ]
     },
     {
      "name" : "universalString",
      "kind" : "function",
      "comment" : "Encodes a $(MONO dstring) of UTF-32 characters.\n",
      "line" : 5510,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAywZv",
      "originalType" : "@property @system void(in dstring value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAyw"
       }
      ],
      "endline" : 5587,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.universalString"
      ]
     },
     {
      "name" : "__unittest_L5590_C5",
      "kind" : "function",
      "line" : 5590,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 5660,
      "endchar" : 5
     },
     {
      "name" : "characterString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO CharacterString), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CharacterString) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        Returns: an instance of $(D types.universal.characterstring.CharacterString).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded $(MONO CharacterString) has too few or too many\n                elements, or if $(MONO syntaxes) or $(MONO context-negotiation) element has\n                too few or too many elements)\n            $(LI $(D ASN1ValueSizeException) if encoded $(MONO INTEGER) is too large to decode)\n            $(LI $(D ASN1RecursionException) if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException) if any nested primitives do not have the\n                correct tag class)\n            $(LI $(D ASN1ConstructionException) if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException) if any nested primitives do not have the\n                correct tag number)\n        )\n",
      "line" : 5661,
      "char" : 21,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal15characterstring15CharacterString",
      "endline" : 5814,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.characterString"
      ]
     },
     {
      "name" : "characterString",
      "kind" : "function",
      "comment" : "        Encodes a $(MONO CharacterString), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CharacterString) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n",
      "line" : 5843,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal15characterstring15CharacterStringZv",
      "originalType" : "@property @system void(in CharacterString value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal15characterstring15CharacterString"
       }
      ],
      "endline" : 5898,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.characterString"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 5845,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 5845,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L5909_C5",
      "kind" : "function",
      "line" : 5909,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 5930,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L5931_C5",
      "kind" : "function",
      "line" : 5931,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 5985,
      "endchar" : 5
     },
     {
      "name" : "basicMultilingualPlaneString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO wstring) of UTF-16 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if the encoded bytes is not evenly divisible by two)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n",
      "line" : 5986,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAyu",
      "endline" : 6079,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.basicMultilingualPlaneString"
      ]
     },
     {
      "name" : "basicMultilingualPlaneString",
      "kind" : "function",
      "comment" : "Encodes a $(MONO wstring) of UTF-16 characters.\n",
      "line" : 6083,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyuZv",
      "originalType" : "@property @system void(in wstring value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAyu"
       }
      ],
      "endline" : 6160,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(CanonicalEncodingRulesElement).AbstractSyntaxNotation1Element.basicMultilingualPlaneString"
      ]
     },
     {
      "name" : "__unittest_L6163_C5",
      "kind" : "function",
      "line" : 6163,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 6191,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "Creates an $(MONO END OF CONTENT) by default\n",
      "line" : 6192,
      "char" : 5,
      "deco" : "FNbNiNfE4asn19constants31AbstractSyntaxNotation1TagClassEQBxQBv35AbstractSyntaxNotation1ConstructionkZCQDr6codecs3cer29CanonicalEncodingRulesElement",
      "originalType" : "nothrow @nogc @safe (ASN1TagClass tagClass = ASN1TagClass.universal, ASN1Construction construction = ASN1Construction.primitive, size_t tagNumber = 0u)",
      "parameters" : [
       {
        "name" : "tagClass",
        "deco" : "E4asn19constants31AbstractSyntaxNotation1TagClass",
        "default" : "cast(AbstractSyntaxNotation1TagClass)cast(ubyte)0u"
       },
       {
        "name" : "construction",
        "deco" : "E4asn19constants35AbstractSyntaxNotation1Construction",
        "default" : "cast(AbstractSyntaxNotation1Construction)cast(ubyte)0u"
       },
       {
        "name" : "tagNumber",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 6203,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D CERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. The supplied $(D ubyte[]) array is \"chomped\" by\n        reference, so the original array will grow shorter as $(D CERElement)s are\n        generated.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes())\n\n        Examples:\n        ---\n        // Decoding looks like:\n        CERElement[] result;\n        while (bytes.length > 0)\n            result ~= new CERElement(bytes);\n\n        // Encoding looks like:\n        ubyte[] result;\n        foreach (cv; cervalues)\n        {\n            result ~= cast(ubyte[]) cv;\n        }\n        ---\n",
      "line" : 6230,
      "char" : 5,
      "deco" : "FKAhZC4asn16codecs3cer29CanonicalEncodingRulesElement",
      "originalType" : "@system (ref ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "Ah",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 6234,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D CERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. Unlike the construct that accepts a $(D ubyte[])\n        reference, this constructor does not \"chomp\" the array. This constructor\n        expects the encoded bytes to encode only one $(CERElement). If there are\n        any remaining bytes after decoding, an exception is thrown.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes()), but also throws an\n            $(D ASN1LengthException) if there are excess bytes.\n",
      "line" : 6248,
      "char" : 5,
      "deco" : "FxAhZC4asn16codecs3cer29CanonicalEncodingRulesElement",
      "originalType" : "@system (in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 6260,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D CERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. The supplied $(D ubyte[]) array is read, starting\n        from the index specified by $(D bytesRead), and increments\n        $(D bytesRead) by the number of bytes read.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes())\n\n        Examples:\n        ---\n        // Decoding looks like:\n        CERElement[] result;\n        size_t i = 0u;\n        while (i < bytes.length)\n            result ~= new CERElement(i, bytes);\n\n        // Encoding looks like:\n        ubyte[] result;\n        foreach (cv; cervalues)\n        {\n            result ~= cast(ubyte[]) cv;\n        }\n        ---\n",
      "line" : 6288,
      "char" : 5,
      "deco" : "FKkxAhZC4asn16codecs3cer29CanonicalEncodingRulesElement",
      "originalType" : "@system (ref size_t bytesRead, in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytesRead",
        "deco" : "k",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 6291,
      "endchar" : 5
     },
     {
      "name" : "fromBytes",
      "kind" : "function",
      "comment" : "        Returns: the number of bytes read\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1TagPaddingException) if the tag number is \"padded\" with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1TagOverflowException) if the tag number is too large to\n                fit into a $(D size_t))\n            $(LI $(D ASN1LengthUndefinedException) if the reserved length byte of\n                $(D 0xFF) is encountered)\n            $(LI $(D ASN1LengthOverflowException) if the length is too large to fit\n                into a $(D size_t))\n            $(LI $(D ASN1TruncationException) if the tag, length, or value appear to\n                be truncated)\n            $(LI $(D ASN1ConstructionException) if the length is indefinite, but the\n                element is marked as being encoded primitively)\n            $(LI $(D ASN1RecursionException) if, when trying to determine the end of\n                an indefinite-length encoded element, the parser has to recurse\n                too deep)\n        )\n",
      "line" : 6316,
      "char" : 12,
      "deco" : "FxAhZk",
      "originalType" : "size_t(in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 6566,
      "endchar" : 5,
      "overrides" : [
       "asn1.interfaces.Byteable.fromBytes"
      ]
     },
     {
      "name" : "toBytes",
      "kind" : "function",
      "comment" : "        This differs from $(D this.value) in that\n        $(D this.value) only returns the value octets, whereas\n        $(D this.toBytes) returns the type tag, length tag / octets,\n        and the value octets, all concatenated.\n\n        This is the exact same as $(D this.opCast!(ubyte[])()).\n\n        Returns: type tag, length tag, and value, all concatenated as a $(D ubyte) array.\n",
      "line" : 6579,
      "char" : 13,
      "deco" : "xFNbNdZAh",
      "endline" : 6658,
      "endchar" : 5,
      "overrides" : [
       "asn1.interfaces.Byteable.toBytes"
      ]
     },
     {
      "kind" : "template",
      "comment" : "        This differs from $(D this.value) in that\n        $(D this.value) only returns the value octets, whereas\n        $(D this.toBytes) returns the type tag, length tag / octets,\n        and the value octets, all concatenated.\n\n        This is the exact same as $(D this.toBytes()).\n\n        Returns: type tag, length tag, and value, all concatenated as a $(D ubyte) array.\n",
      "line" : 6671,
      "char" : 13,
      "name" : "opCast",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type",
        "default" : "ubyte[]"
       }
      ],
      "members" : [
       {
        "name" : "opCast",
        "kind" : "function",
        "line" : 6671,
        "char" : 13,
        "type" : "nothrow @system ubyte[]()",
        "endline" : 6674,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L6680_C1",
    "kind" : "function",
    "line" : 6680,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 6832,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L6833_C1",
    "kind" : "function",
    "line" : 6833,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 6918,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L6919_C1",
    "kind" : "function",
    "line" : 6919,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 6931,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L6932_C1",
    "kind" : "function",
    "line" : 6932,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 6943,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L6944_C1",
    "kind" : "function",
    "line" : 6944,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 6954,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L6955_C1",
    "kind" : "function",
    "line" : 6955,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 6973,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L6974_C1",
    "kind" : "function",
    "line" : 6974,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 6997,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L6998_C1",
    "kind" : "function",
    "line" : 6998,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7015,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7016_C1",
    "kind" : "function",
    "line" : 7016,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7030,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7031_C1",
    "kind" : "function",
    "line" : 7031,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7040,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7041_C1",
    "kind" : "function",
    "line" : 7041,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7048,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7049_C1",
    "kind" : "function",
    "line" : 7049,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7056,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7057_C1",
    "kind" : "function",
    "line" : 7057,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7064,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7065_C1",
    "kind" : "function",
    "line" : 7065,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7076,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7077_C1",
    "kind" : "function",
    "line" : 7077,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7088,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7089_C1",
    "kind" : "function",
    "line" : 7089,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7097,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7098_C1",
    "kind" : "function",
    "line" : 7098,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7106,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7107_C1",
    "kind" : "function",
    "line" : 7107,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7115,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7116_C1",
    "kind" : "function",
    "line" : 7116,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7141,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L7142_C1",
    "kind" : "function",
    "line" : 7142,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 7158,
    "endchar" : 2
   }
  ]
 },
 {
  "name" : "asn1.codecs.der",
  "kind" : "module",
  "file" : ".\\source\\asn1\\codecs\\der.d",
  "comment" : "    Distinguished Encoding Rules (DER) is a standard for encoding ASN.1 data.\n    DER is often used for cryptgraphically-signed data, such as X.509\n    certificates, because DER's defining feature is that there is only one way\n    to encode each data type, which means that two encodings of the same data\n    could not have different cryptographic signatures. For this reason, DER\n    is generally regarded as the most secure encoding standard for ASN.1.\n    Like Basic Encoding Rules (BER), Canonical Encoding Rules (CER), and\n    Packed Encoding Rules (PER), Distinguished Encoding Rules (DER) is a\n    specification created by the\n    $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union),\n    and specified in\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules)\n\n    Authors:\n    $(UL\n        $(LI $(PERSON Jonathan M. Wilbur, jonathan@wilbur.space, http://jonathan.wilbur.space))\n    )\n    Copyright: Copyright (C) Jonathan M. Wilbur\n    License: $(LINK https://mit-license.org/, MIT License)\n    Standards:\n    $(UL\n        $(LI $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)))\n        $(LI $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules))\n    )\n    See_Also:\n    $(UL\n        $(LI $(LINK https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One, The Wikipedia Page on ASN.1))\n        $(LI $(LINK https://en.wikipedia.org/wiki/X.690, The Wikipedia Page on X.690))\n        $(LI $(LINK https://www.strozhevsky.com/free_docs/asn1_in_simple_words.pdf, ASN.1 By Simple Words))\n        $(LI $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF, ASN.1: Communication Between Heterogeneous Systems))\n    )\n",
  "members" : [
   {
    "name" : "asn1.codec",
    "kind" : "import",
    "line" : 35,
    "char" : 15
   },
   {
    "name" : "asn1.interfaces",
    "kind" : "import",
    "line" : 36,
    "char" : 15,
    "selective" : [
     "Byteable"
    ]
   },
   {
    "name" : "asn1.types.identification",
    "kind" : "import",
    "line" : 37,
    "char" : 15
   },
   {
    "name" : "derOID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 40,
    "char" : 8
   },
   {
    "name" : "derObjectID",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 42,
    "char" : 8
   },
   {
    "name" : "derObjectIdentifier",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 44,
    "char" : 8
   },
   {
    "name" : "distinguishedEncodingRulesObjectIdentifier",
    "kind" : "variable",
    "comment" : "    The object identifier assigned to the Distinguished Encoding Rules (DER), per the\n    $(LINK https://www.itu.int/en/pages/default.aspx,\n        International Telecommunications Union)'s,\n    $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules)\n\n    $(MONO {joint-iso-itu-t asn1(1) ber-derived(2) distinguished-encoding(1)} )\n",
    "line" : 53,
    "char" : 22,
    "storageClass" : [
     "immutable"
    ],
    "deco" : "yC4asn15types9universal16objectidentifier16ObjectIdentifier",
    "originalType" : "OID",
    "init" : "ObjectIdentifier([ObjectIdentifierNode(2u, \"\"), ObjectIdentifierNode(1u, \"\"), ObjectIdentifierNode(2u, \"\"), ObjectIdentifierNode(1u, \"\")])"
   },
   {
    "name" : "DERElement",
    "kind" : "alias",
    "comment" : "\n",
    "line" : 56,
    "char" : 8,
    "deco" : "C4asn16codecs3der33DistinguishedEncodingRulesElement"
   },
   {
    "name" : "DistinguishedEncodingRulesElement",
    "kind" : "class",
    "comment" : "    The unit of encoding and decoding for Distinguished Encoding Rules (DER).\n\n    There are three parts to an element encoded according to the Distinguished\n    Encoding Rules (DER):\n\n    $(UL\n        $(LI A Type Tag, which specifies what data type is encoded)\n        $(LI A Length Tag, which specifies how many subsequent bytes encode the data)\n        $(LI The Encoded Value)\n    )\n\n    They appear in the binary encoding in that order, and as such, the encoding\n    scheme is sometimes described as \"TLV,\" which stands for Type-Length-Value.\n\n    This class provides a properties for getting and setting bit fields of\n    the type tag, but most of it is functionality for encoding data per\n    the specification.\n\n    As an example, this is what encoding a simple INTEGER looks like:\n\n    ---\n    DERElement dv = new DERElement();\n    dv.tagNumber = 0x02u; // \"2\" means this is an INTEGER\n    dv.integer = 1433; // Now the data is encoded.\n    transmit(cast(ubyte[]) dv); // transmit() is a made-up function.\n    ---\n\n    And this is what decoding looks like:\n\n    ---\n    ubyte[] data = receive(); // receive() is a made-up function.\n    DERElement dv2 = new DERElement(data);\n\n    long x;\n    if (dv.tagNumber == 0x02u) // it is an INTEGER\n    {\n        x = dv.integer;\n    }\n    // Now x is 1433!\n    ---\n",
    "line" : 109,
    "char" : 1,
    "base" : "asn1.codec.ASN1Element!(asn1.codecs.der.DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element",
    "interfaces" : [
     "asn1.interfaces.Byteable"
    ],
    "members" : [
     {
      "name" : "__unittest_L112_C5",
      "kind" : "function",
      "line" : 112,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 127,
      "endchar" : 5
     },
     {
      "name" : "endOfContent",
      "kind" : "function",
      "comment" : "        \"Decodes\" an $(MONO END OF CONTENT), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
      "line" : 128,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZv",
      "endline" : 137,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.endOfContent"
      ]
     },
     {
      "name" : "boolean",
      "kind" : "function",
      "comment" : "        Decodes a $(D bool).\n\n        A $(D 0xFF) byte will be interpreted as $(MONO TRUE). A zero byte\n        ($(D 0x00)) will be interpreted as $(MONO FALSE). Any other value,\n        or any length other than 1 byte will throw an exception.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the encoded value is not exactly 1 byte in size)\n            $(LI $(D ASN1ValueException)\n                if the encoded value is not either 0xFF or 0x00)\n        )\n",
      "line" : 157,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZb",
      "endline" : 181,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.boolean"
      ]
     },
     {
      "name" : "boolean",
      "kind" : "function",
      "comment" : "Encodes a $(D bool)\n",
      "line" : 185,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdNfxbZv",
      "originalType" : "nothrow @property @safe void(in bool value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xb"
       }
      ],
      "endline" : 194,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.boolean"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 187,
       "char" : 5,
       "deco" : "FNaNbNiNfZv",
       "originalType" : "nothrow @safe void()",
       "endline" : 187,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L197_C5",
      "kind" : "function",
      "line" : 197,
      "char" : 5,
      "storageClass" : [
       "@safe"
      ],
      "endline" : 226,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a signed integer.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the value is too big to decode to a signed integral type,\n                or if the value is zero bytes)\n            $(LI $(D ASN1ValuePaddingException)\n                if there are padding bytes)\n        )\n",
      "line" : 227,
      "char" : 7,
      "name" : "integer",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
      "members" : [
       {
        "name" : "integer",
        "kind" : "function",
        "line" : 227,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 312,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Encodes a signed integral type\n",
      "line" : 316,
      "char" : 10,
      "name" : "integer",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T || is(T == BigInt)",
      "members" : [
       {
        "name" : "integer",
        "kind" : "function",
        "line" : 316,
        "char" : 10,
        "type" : "@property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 410,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L413_C5",
      "kind" : "function",
      "line" : 413,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 452,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L453_C5",
      "kind" : "function",
      "line" : 453,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 477,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L478_C5",
      "kind" : "function",
      "line" : 478,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 518,
      "endchar" : 5
     },
     {
      "name" : "bitString",
      "kind" : "function",
      "comment" : "        Decodes an array of $(D bool)s representing a string of bits.\n\n        Returns: an array of $(D bool)s, where each $(D bool) represents a bit\n            in the encoded bit string\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueSizeException)\n                if the any primitive contains 0 bytes)\n            $(LI $(D ASN1ValueException)\n                if the first byte has a value greater\n                than seven, or if the first byte indicates the presence of\n                padding bits when no subsequent bytes exist, or if any primitive\n                but the last in a constructed BIT STRING uses padding bits, or\n                if any of the padding bits are set)\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n        )\n",
      "line" : 519,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAb",
      "endline" : 598,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.bitString"
      ]
     },
     {
      "name" : "bitString",
      "kind" : "function",
      "comment" : "Encodes an array of $(D bool)s representing a string of bits.\n",
      "line" : 602,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAbZv",
      "originalType" : "@property void(in bool[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAb"
       }
      ],
      "endline" : 622,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.bitString"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 604,
       "char" : 5,
       "deco" : "FNaNbNiNfZv",
       "originalType" : "void()",
       "endline" : 604,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L626_C5",
      "kind" : "function",
      "line" : 626,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 640,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L641_C5",
      "kind" : "function",
      "line" : 641,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 656,
      "endchar" : 5
     },
     {
      "name" : "octetString",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO OCTET STRING) into an unsigned byte array.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n        )\n",
      "line" : 657,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZAh",
      "endline" : 664,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.octetString"
      ]
     },
     {
      "name" : "octetString",
      "kind" : "function",
      "comment" : "Encodes an $(MONO OCTET STRING) from an unsigned byte ($(D ubyte)) array.\n",
      "line" : 668,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdNfxAhZv",
      "originalType" : "@property @safe void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 672,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.octetString"
      ]
     },
     {
      "name" : "nill",
      "kind" : "function",
      "comment" : "        \"Decodes\" a $(D null), by which I mean: returns nothing, but\n        throws exceptions if the element is not correct.\n\n        Note:\n            I had to name this method $(D nill), because $(D null) is a keyword in D.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are any content octets)\n        )\n",
      "line" : 688,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZv",
      "endline" : 697,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.nill"
      ]
     },
     {
      "name" : "objectIdentifier",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO OBJECT IDENTIFIER).\n        See $(MONO source/types/universal/objectidentifier.d) for information about\n        the $(D ObjectIdentifier) class (aliased as $(D OID)).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueSizeException) if there are no value bytes)\n            $(LI $(D ASN1ValuePaddingException) if a single OID number is encoded with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1ValueOverflowException) if a single OID number is too big to\n                decode to a $(D size_t))\n            $(LI $(D ASN1TruncationException) if a single OID number is \"cut off\")\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 721,
      "char" : 9,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZC4asn15types9universal16objectidentifier16ObjectIdentifier",
      "originalType" : "const @property @system OID()",
      "endline" : 809,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.objectIdentifier"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 723,
       "char" : 5,
       "deco" : "FKxC4asn15types9universal16objectidentifier16ObjectIdentifierZv",
       "originalType" : "@system void(ref const ObjectIdentifier value)",
       "parameters" : [
        {
         "name" : "value",
         "deco" : "xC4asn15types9universal16objectidentifier16ObjectIdentifier",
         "storageClass" : [
          "ref"
         ]
        }
       ],
       "endline" : 723,
       "endchar" : 5
      }
     },
     {
      "name" : "objectIdentifier",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO OBJECT IDENTIFIER).\n        See $(MONO source/types/universal/objectidentifier.d) for information about\n        the $(D ObjectIdentifier) class (aliased as $(OID)).\n\n        Standards:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 823,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxC4asn15types9universal16objectidentifier16ObjectIdentifierZv",
      "originalType" : "@property @system void(in OID value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xC4asn15types9universal16objectidentifier16ObjectIdentifier"
       }
      ],
      "endline" : 867,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.objectIdentifier"
      ],
      "in" : {
       "name" : "__require",
       "kind" : "function",
       "line" : 825,
       "char" : 5,
       "type" : "@system void()",
       "endline" : 825,
       "endchar" : 5
      },
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 834,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 834,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L870_C5",
      "kind" : "function",
      "line" : 870,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 889,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L890_C5",
      "kind" : "function",
      "line" : 890,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 950,
      "endchar" : 5
     },
     {
      "name" : "objectDescriptor",
      "kind" : "function",
      "comment" : "        Decodes an $(D ObjectDescriptor), which is a string consisting of only\n        graphical characters. In fact, $(D ObjectDescriptor) is actually implicitly\n        just a $(MONO GraphicString)! The formal specification for an $(D ObjectDescriptor)\n        is:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        $(MONO GraphicString) is just a string containing only characters between\n        and including $(D 0x20) and $(D 0x7E), therefore ObjectDescriptor is just\n        $(D 0x20) and $(D 0x7E).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if the encoded value contains any character outside of\n                $(D 0x20) to $(D 0x7E), which means any control characters or $(MONO DELETE))\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 951,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 966,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.objectDescriptor"
      ]
     },
     {
      "name" : "objectDescriptor",
      "kind" : "function",
      "comment" : "        Encodes an $(D ObjectDescriptor), which is a string consisting of only\n        graphical characters. In fact, $(D ObjectDescriptor) is actually implicitly\n        just a $(MONO GraphicString)! The formal specification for an $(D ObjectDescriptor)\n        is:\n\n        $(MONO ObjectDescriptor ::= [UNIVERSAL 7] IMPLICIT GraphicString)\n\n        $(MONO GraphicString) is just a string containing only characters between\n        and including $(D 0x20) and $(D 0x7E), therefore ObjectDescriptor is just\n        $(D 0x20) and $(D 0x7E).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if the string value contains any character outside of\n                $(D 0x20) to $(D 0x7E), which means any control characters or $(MONO DELETE))\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 998,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 1008,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.objectDescriptor"
      ]
     },
     {
      "name" : "external",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO EXTERNAL).\n\n        According to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)),\n        the abstract definition for an $(MONO EXTERNAL), after removing the comments in the\n        specification, is as follows:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        Note that the abstract syntax resembles that of $(MONO EmbeddedPDV) and\n        $(MONO CharacterString), except with a $(MONO WITH COMPONENTS) constraint that removes some\n        of our choices of $(MONO identification).\n        As can be seen on page 303 of Olivier Dubuisson's\n        $(I $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF,\n            ASN.1: Communication Between Heterogeneous Systems)),\n        after applying the $(MONO WITH COMPONENTS) constraint, our reduced syntax becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        But, according to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules),\n        section 8.18, when encoded using Basic Encoding Rules (BER), is encoded as\n        follows, for compatibility reasons:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                direct-reference  OBJECT IDENTIFIER OPTIONAL,\n                indirect-reference  INTEGER OPTIONAL,\n                data-value-descriptor  ObjectDescriptor  OPTIONAL,\n                encoding  CHOICE {\n                    single-ASN1-type  [0] ANY,\n                    octet-aligned     [1] IMPLICIT OCTET STRING,\n                    arbitrary         [2] IMPLICIT BIT STRING } }\n        )\n\n        The definition above is the pre-1994 definition of $(MONO EXTERNAL). The $(MONO syntax)\n        field of the post-1994 definition maps to the $(MONO direct-reference) field of\n        the pre-1994 definition. The $(MONO presentation-context-id) field of the post-1994\n        definition maps to the $(MONO indirect-reference) field of the pre-1994 definition.\n        If $(MONO context-negotiation) is used, per the abstract syntax, then the\n        $(MONO presentation-context-id) field of the $(MONO context-negotiation) $(MONO SEQUENCE) in the\n        post-1994 definition maps to the $(MONO indirect-reference) field of the pre-1994\n        definition, and the $(MONO transfer-syntax) field of the $(MONO context-negotiation)\n        $(MONO SEQUENCE) maps to the $(MONO direct-reference) field of the pre-1994 definition.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx,\n        International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EXTERNAL ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        $(MONO context-negotiation), which makes the following the effective abstract\n        syntax of $(MONO EXTERNAL) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EXTERNAL)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Upon removing the $(MONO CHOICE) tag (since you have no choice but to use syntax\n        at this point), the encoding definition when using\n        Canonical Encoding Rules or Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                syntax OBJECT IDENTIFIER,\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Returns: an instance of $(D types.universal.external.External)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if the SEQUENCE does not contain two to four elements)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not have the correct tag class)\n            $(LI $(D ASN1ConstructionException)\n                if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not have the correct tag number)\n            $(LI $(D ASN1ValueCharactersException)\n                if a data-value-descriptor is supplied with invalid characters)\n            $(LI $(D ASN1ConstructionException) if the element is not marked as \"constructed\")\n        )\n",
      "line" : 1181,
      "char" : 14,
      "storageClass" : [
       "deprecated",
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal8external8External",
      "endline" : 1264,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.external"
      ]
     },
     {
      "name" : "external",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO EXTERNAL).\n\n        According to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680 - Abstract Syntax Notation One (ASN.1)),\n        the abstract definition for an $(MONO EXTERNAL), after removing the comments in the\n        specification, is as follows:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        Note that the abstract syntax resembles that of $(MONO EmbeddedPDV) and\n        $(MONO CharacterString), except with a $(MONO WITH COMPONENTS) constraint that removes some\n        of our choices of $(MONO identification).\n        As can be seen on page 303 of Olivier Dubuisson's\n        $(I $(LINK http://www.oss.com/asn1/resources/books-whitepapers-pubs/dubuisson-asn1-book.PDF,\n            ASN.1: Communication Between Heterogeneous Systems)),\n        after applying the $(MONO WITH COMPONENTS) constraint, our reduced syntax becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER } },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        But, according to the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules),\n        section 8.18, when encoded using Basic Encoding Rules (BER), is encoded as\n        follows, for compatibility reasons:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] IMPLICIT SEQUENCE {\n                direct-reference  OBJECT IDENTIFIER OPTIONAL,\n                indirect-reference  INTEGER OPTIONAL,\n                data-value-descriptor  ObjectDescriptor  OPTIONAL,\n                encoding  CHOICE {\n                    single-ASN1-type  [0] ANY,\n                    octet-aligned     [1] IMPLICIT OCTET STRING,\n                    arbitrary         [2] IMPLICIT BIT STRING } }\n        )\n\n        The definition above is the pre-1994 definition of $(MONO EXTERNAL). The $(MONO syntax)\n        field of the post-1994 definition maps to the $(MONO direct-reference) field of\n        the pre-1994 definition. The $(MONO presentation-context-id) field of the post-1994\n        definition maps to the $(MONO indirect-reference) field of the pre-1994 definition.\n        If $(MONO context-negotiation) is used, per the abstract syntax, then the\n        $(MONO presentation-context-id) field of the $(MONO context-negotiation) $(MONO SEQUENCE) in the\n        post-1994 definition maps to the $(MONO indirect-reference) field of the pre-1994\n        definition, and the $(MONO transfer-syntax) field of the $(MONO context-negotiation)\n        $(MONO SEQUENCE) maps to the $(MONO direct-reference) field of the pre-1994 definition.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx,\n        International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EXTERNAL ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        $(MONO context-negotiation), which makes the following the effective abstract\n        syntax of $(MONO EXTERNAL) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            syntaxes ABSENT,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT,\n                            transfer-syntax ABSENT,\n                            fixed ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EXTERNAL)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                identification CHOICE {\n                    syntax OBJECT IDENTIFIER },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Upon removing the $(MONO CHOICE) tag (since you have no choice but to use syntax\n        at this point), the encoding definition when using\n        Canonical Encoding Rules or Distinguished Encoding Rules:\n\n        $(PRE\n            EXTERNAL ::= [UNIVERSAL 8] SEQUENCE {\n                syntax OBJECT IDENTIFIER,\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Returns: an instance of $(D types.universal.external.External)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException)\n                if something other than $(D syntax) is used for $(MONO identification))\n            $(LI $(D ASN1ValueCharactersException)\n                if a data-value-descriptor is supplied with invalid characters)\n        )\n",
      "line" : 1427,
      "char" : 10,
      "storageClass" : [
       "deprecated",
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal8external8ExternalZv",
      "originalType" : "@property @system void(in External value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal8external8External"
       }
      ],
      "endline" : 1467,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.external"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 1429,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 1429,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L1475_C5",
      "kind" : "function",
      "line" : 1475,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1490,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1491_C5",
      "kind" : "function",
      "line" : 1491,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1519,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L1520_C5",
      "kind" : "function",
      "line" : 1520,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 1605,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a floating-point type.\n\n        Note that this method assumes that your machine uses\n        $(LINK http://ieeexplore.ieee.org/document/4610935/, IEEE 754-2008)\n        floating point format.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1TruncationException) if the value appears to be \"cut off\")\n            $(LI $(D ConvException) if character-encoding cannot be converted to\n                the selected floating-point type, T)\n            $(LI $(D ConvOverflowException) if the character-encoding encodes a\n                number that is too big for the selected floating-point\n                type to express)\n            $(LI $(D ASN1ValueSizeException) if the binary-encoding contains fewer\n                bytes than the information byte purports, or if the\n                binary-encoded mantissa is too big to be expressed by an\n                unsigned long integer)\n            $(LI $(D ASN1ValueException) if a complicated-form exponent or a\n                non-zero-byte mantissa encodes a zero or even number, of if a base-10\n                (character-encoded) REAL is has something wrong that is not\n                covered by $(D ASN1ValueCharactersException) or\n                $(D ASN1ValuePaddingException))\n            $(LI $(D ASN1ValueUndefinedException) if both bits indicating the base in the\n                information byte of a binary-encoded $(MONO REAL)'s information byte\n                are set, which would indicate an invalid base, or if a special\n                value has been indicated that is not defined by the specification)\n            $(LI $(D ASN1ValuePaddingException) if a base-10 (character-encoded)\n                REAL is encoded with leading zeroes, or trailing zeroes on the\n                mantissa, or if the mantissa is encoded on more than the minimal\n                necessary octets)\n            $(LI $(D ASN1ValueCharactersException) if a base-10 (character-encoded)\n                REAL is encoded with characters that are not numeric, a decimal, E,\n                or plus or minus)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 400-402.)\n            $(LI $(LINK https://www.iso.org/standard/12285.html, ISO 6093))\n        )\n",
      "line" : 1606,
      "char" : 7,
      "name" : "realNumber",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isFloatingPoint!T",
      "members" : [
       {
        "name" : "realNumber",
        "kind" : "function",
        "line" : 1606,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 1898,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "        Encodes a floating-point type, using base-2 binary encoding.\n\n        Note that this method assumes that your machine uses\n        $(LINK http://ieeexplore.ieee.org/document/4610935/, IEEE 754-2008)\n        floating point format.\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 400-402.)\n            $(LI $(LINK https://www.iso.org/standard/12285.html, ISO 6093))\n        )\n",
      "line" : 1916,
      "char" : 10,
      "name" : "realNumber",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isFloatingPoint!T",
      "members" : [
       {
        "name" : "realNumber",
        "kind" : "function",
        "line" : 1916,
        "char" : 10,
        "type" : "@property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 2099,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L2102_C5",
      "kind" : "function",
      "line" : 2102,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2216,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2217_C5",
      "kind" : "function",
      "line" : 2217,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2260,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2261_C5",
      "kind" : "function",
      "line" : 2261,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2307,
      "endchar" : 5
     },
     {
      "kind" : "template",
      "comment" : "        Decodes a signed integer, which represents a selection from an\n        $(MONO ENUMERATION) of choices.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException)\n                if the encoded value is not primitively-constructed)\n            $(LI $(D ASN1ValueSizeException)\n                if the value is too big to decode to a signed integral type,\n                or if the value is zero bytes)\n            $(LI $(D ASN1ValuePaddingException)\n                if there are padding bytes)\n        )\n",
      "line" : 2308,
      "char" : 7,
      "name" : "enumerated",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "isIntegral!T && isSigned!T",
      "members" : [
       {
        "name" : "enumerated",
        "kind" : "function",
        "line" : 2308,
        "char" : 7,
        "type" : "const @property @system T()",
        "endline" : 2359,
        "endchar" : 5
       }
      ]
     },
     {
      "kind" : "template",
      "comment" : "Encodes an $(MONO ENUMERATED) type from an integer.\n",
      "line" : 2363,
      "char" : 10,
      "name" : "enumerated",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "enumerated",
        "kind" : "function",
        "line" : 2363,
        "char" : 10,
        "type" : "nothrow @property @system void(in T value)",
        "parameters" : [
         {
          "name" : "value",
          "type" : "T",
          "storageClass" : [
           "in"
          ]
         }
        ],
        "endline" : 2421,
        "endchar" : 5
       }
      ]
     },
     {
      "name" : "__unittest_L2425_C5",
      "kind" : "function",
      "line" : 2425,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2449,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2450_C5",
      "kind" : "function",
      "line" : 2450,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2576,
      "endchar" : 5
     },
     {
      "name" : "embeddedPresentationDataValue",
      "kind" : "function",
      "comment" : "        Decodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n            the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EmbeddedPDV ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        context-negotiation, which makes the following the effective abstract\n        syntax of $(MONO EmbeddedPDV) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EmbeddedPDV)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        Returns: an instance of $(D types.universal.embeddedpdv.EmbeddedPDV)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded EmbeddedPDV has too few or too many\n                elements, or if syntaxes or context-negotiation element has\n                too few or too many elements)\n            $(LI $(D ASN1ValueSizeException) if encoded INTEGER is too large to decode)\n            $(LI $(D ASN1RecursionException) if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException) if any nested primitives do not have the\n                correct tag class)\n            $(LI $(D ASN1ConstructionException) if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException) if any nested primitives do not have the\n                correct tag number)\n        )\n",
      "line" : 2577,
      "char" : 17,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValue",
      "originalType" : "const @property @system EmbeddedPDV()",
      "endline" : 2730,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.embeddedPresentationDataValue"
      ]
     },
     {
      "name" : "embeddedPresentationDataValue",
      "kind" : "function",
      "comment" : "        Encodes an $(MONO EmbeddedPDV), which is a constructed data type, defined in\n            the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO EmbeddedPDV) as:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n            (WITH COMPONENTS { ... , data-value-descriptor ABSENT })\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        The following additional constraints are applied to the abstract syntax\n        when using Canonical Encoding Rules or Distinguished Encoding Rules,\n        which are also defined in the\n        $(LINK https://www.itu.int/en/pages/default.aspx, International Telecommunications Union)'s\n        $(LINK http://www.itu.int/rec/T-REC-X.690/en, X.690 - ASN.1 encoding rules):\n\n        $(PRE\n            EmbeddedPDV ( WITH COMPONENTS {\n                ... ,\n                identification ( WITH COMPONENTS {\n                    ... ,\n                    presentation-context-id ABSENT,\n                    context-negotiation ABSENT } ) } )\n        )\n\n        The stated purpose of the constraints shown above is to restrict the use of\n        the $(MONO presentation-context-id), either by itself or within the\n        context-negotiation, which makes the following the effective abstract\n        syntax of $(MONO EmbeddedPDV) when using Canonical Encoding Rules or\n        Distinguished Encoding Rules:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n                    ( WITH COMPONENTS {\n                        ... ,\n                        identification ( WITH COMPONENTS {\n                            ... ,\n                            presentation-context-id ABSENT,\n                            context-negotiation ABSENT } ) } )\n        )\n\n        With the constraints applied, the abstract syntax for $(MONO EmbeddedPDV)s encoded\n        using Canonical Encoding Rules or Distinguished Encoding Rules becomes:\n\n        $(PRE\n            EmbeddedPDV ::= [UNIVERSAL 11] IMPLICIT SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                data-value-descriptor ObjectDescriptor OPTIONAL,\n                data-value OCTET STRING }\n        )\n\n        If the supplied $(MONO identification) for the EmbeddedPDV is a\n        $(MONO presentation-context-id) or a $(MONO context-negotiation),\n        no exception will be thrown; the $(MONO identification) will be set to\n        $(MONO fixed) silently.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded ObjectDescriptor contains invalid characters)\n        )\n",
      "line" : 2831,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValueZv",
      "originalType" : "@property @system void(in EmbeddedPDV value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal11embeddedpdv29EmbeddedPresentationDataValue"
       }
      ],
      "endline" : 2886,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.embeddedPresentationDataValue"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 2833,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 2833,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L2897_C5",
      "kind" : "function",
      "line" : 2897,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2922,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2923_C5",
      "kind" : "function",
      "line" : 2923,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2944,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L2945_C5",
      "kind" : "function",
      "line" : 2945,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 2991,
      "endchar" : 5
     },
     {
      "name" : "unicodeTransformationFormat8String",
      "kind" : "function",
      "comment" : "        Decodes the value to UTF-8 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D UTF8Exception)\n                if the encoded value does not decode to UTF-8)\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n        )\n",
      "line" : 2992,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 2999,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.unicodeTransformationFormat8String"
      ]
     },
     {
      "name" : "unicodeTransformationFormat8String",
      "kind" : "function",
      "comment" : "Encodes a UTF-8 string to bytes.\n",
      "line" : 3003,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdxAyaZv",
      "originalType" : "nothrow @property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3007,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.unicodeTransformationFormat8String"
      ]
     },
     {
      "name" : "relativeObjectIdentifier",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO RELATIVE OBJECT IDENTIFIER).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValuePaddingException) if a single OID number is encoded with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1ValueOverflowException) if a single OID number is too big to\n                decode to a $(D size_t))\n            $(LI $(D ASN1TruncationException) if a single OID number is \"cut off\")\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660))\n        )\n",
      "line" : 3028,
      "char" : 15,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAS4asn15types7oidtype20ObjectIdentifierNode",
      "originalType" : "const @property @system OIDNode[]()",
      "endline" : 3097,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.relativeObjectIdentifier"
      ]
     },
     {
      "name" : "relativeObjectIdentifier",
      "kind" : "function",
      "comment" : "        Encodes a $(MONO RELATIVE OBJECT IDENTIFIER).\n\n        Standards:\n            $(LINK http://www.itu.int/rec/T-REC-X.660-201107-I/en, X.660)\n",
      "line" : 3106,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdxAS4asn15types7oidtype20ObjectIdentifierNodeZv",
      "originalType" : "nothrow @property @system void(in OIDNode[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAS4asn15types7oidtype20ObjectIdentifierNode"
       }
      ],
      "endline" : 3133,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.relativeObjectIdentifier"
      ]
     },
     {
      "name" : "__unittest_L3136_C5",
      "kind" : "function",
      "line" : 3136,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3155,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3156_C5",
      "kind" : "function",
      "line" : 3156,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3188,
      "endchar" : 5
     },
     {
      "name" : "sequence",
      "kind" : "function",
      "comment" : "        Decodes a sequence of elements\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"primitive\")\n            $(LI And all of the exceptions thrown by the constructor)\n        )\n",
      "line" : 3189,
      "char" : 18,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAC4asn16codecs3der33DistinguishedEncodingRulesElement",
      "originalType" : "const @property @system DERElement[]()",
      "endline" : 3200,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.sequence"
      ]
     },
     {
      "name" : "sequence",
      "kind" : "function",
      "comment" : "Encodes a sequence of elements\n",
      "line" : 3204,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAC4asn16codecs3der33DistinguishedEncodingRulesElementZv",
      "originalType" : "@property @system void(in DERElement[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAC4asn16codecs3der33DistinguishedEncodingRulesElement"
       }
      ],
      "endline" : 3213,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.sequence"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "comment" : "        Decodes a set of elements\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"primitive\")\n            $(LI And all of the exceptions thrown by the constructor)\n        )\n",
      "line" : 3225,
      "char" : 18,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAC4asn16codecs3der33DistinguishedEncodingRulesElement",
      "originalType" : "const @property @system DERElement[]()",
      "endline" : 3236,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.set"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "comment" : "Encodes a set of elements\n",
      "line" : 3240,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAC4asn16codecs3der33DistinguishedEncodingRulesElementZv",
      "originalType" : "@property @system void(in DERElement[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAC4asn16codecs3der33DistinguishedEncodingRulesElement"
       }
      ],
      "endline" : 3249,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.set"
      ]
     },
     {
      "name" : "numericString",
      "kind" : "function",
      "comment" : "        Decodes a string, where the characters of the string are limited to\n        0 - 9 and $(MONO SPACE).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueCharactersException) if any character other than 0-9 or space is encoded.)\n        )\n",
      "line" : 3262,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3275,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.numericString"
      ]
     },
     {
      "name" : "numericString",
      "kind" : "function",
      "comment" : "        Encodes a string, where the characters of the string are limited to\n        0 - 9 and space.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any character other than 0-9 or space is supplied.)\n        )\n",
      "line" : 3287,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3297,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.numericString"
      ]
     },
     {
      "name" : "printableString",
      "kind" : "function",
      "comment" : "        Decodes a string that will only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueCharactersException)\n                if any character other than a-z, A-Z,\n                0-9, space, apostrophe, parentheses, comma, minus, plus,\n                period, forward slash, colon, equals, or question mark are\n                encoded)\n        )\n",
      "line" : 3315,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3328,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.printableString"
      ]
     },
     {
      "name" : "printableString",
      "kind" : "function",
      "comment" : "        Encodes a string that may only contain characters a-z, A-Z, 0-9,\n        space, apostrophe, parentheses, comma, minus, plus, period,\n        forward slash, colon, equals, and question mark.\n\n        Throws:\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueCharactersException) if any character other than a-z, A-Z,\n                0-9, space, apostrophe, parentheses, comma, minus, plus,\n                period, forward slash, colon, equals, or question mark are\n                supplied)\n",
      "line" : 3343,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3353,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.printableString"
      ]
     },
     {
      "name" : "teletexString",
      "kind" : "function",
      "comment" : "        Literally just returns the value bytes.\n\n        Returns: an unsigned byte array, where each byte is a T.61 character.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n        )\n",
      "line" : 3366,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZAh",
      "endline" : 3373,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.teletexString"
      ]
     },
     {
      "name" : "teletexString",
      "kind" : "function",
      "comment" : "Literally just sets the value bytes.\n",
      "line" : 3377,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdNfxAhZv",
      "originalType" : "nothrow @property @safe void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 3381,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.teletexString"
      ]
     },
     {
      "name" : "videotexString",
      "kind" : "function",
      "comment" : "        Literally just returns the value bytes.\n\n        Returns: an unsigned byte array, where each byte is a Videotex character.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n        )\n",
      "line" : 3394,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdNfZAh",
      "endline" : 3401,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.videotexString"
      ]
     },
     {
      "name" : "videotexString",
      "kind" : "function",
      "comment" : "Literally just sets the value bytes.\n",
      "line" : 3405,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNdNfxAhZv",
      "originalType" : "nothrow @property @safe void(in ubyte[] value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAh"
       }
      ],
      "endline" : 3409,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.videotexString"
      ]
     },
     {
      "name" : "internationalAlphabetNumber5String",
      "kind" : "function",
      "comment" : "        Decodes a string that only contains ASCII characters.\n\n        $(MONO IA5String) differs from ASCII ever so slightly: IA5 is international,\n        leaving 10 characters up to be locale-specific:\n\n        $(TABLE\n            $(TR $(TH Byte) $(TH ASCII Character))\n            $(TR $(TD 0x40) $(TD @))\n            $(TR $(TD 0x5B) $(TD [))\n            $(TR $(TD 0x5C) $(TD \\))\n            $(TR $(TD 0x5D) $(TD ]))\n            $(TR $(TD 0x5E) $(TD ^))\n            $(TR $(TD 0x60) $(TD `))\n            $(TR $(TD 0x7B) $(TD {))\n            $(TR $(TD 0x7C) $(TD /))\n            $(TR $(TD 0x7D) $(TD }))\n            $(TR $(TD 0x7E) $(TD ~))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n",
      "line" : 3438,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3452,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.internationalAlphabetNumber5String"
      ]
     },
     {
      "name" : "internationalAlphabetNumber5String",
      "kind" : "function",
      "comment" : "        Encodes a string that may only contain ASCII characters.\n\n        $(MONO IA5String) differs from ASCII ever so slightly: IA5 is international,\n        leaving 10 characters up to be locale-specific:\n\n        $(TABLE\n            $(TR $(TH Byte) $(TH ASCII Character))\n            $(TR $(TD 0x40) $(TD @))\n            $(TR $(TD 0x5B) $(TD [))\n            $(TR $(TD 0x5C) $(TD \\))\n            $(TR $(TD 0x5D) $(TD ]))\n            $(TR $(TD 0x5E) $(TD ^))\n            $(TR $(TD 0x60) $(TD `))\n            $(TR $(TD 0x7B) $(TD {))\n            $(TR $(TD 0x7C) $(TD /))\n            $(TR $(TD 0x7D) $(TD }))\n            $(TR $(TD 0x7E) $(TD ~))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n",
      "line" : 3480,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3490,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.internationalAlphabetNumber5String"
      ]
     },
     {
      "name" : "coordinatedUniversalTime",
      "kind" : "function",
      "comment" : "        Decodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n        The value is just the ASCII character representation of the UTC-formatted timestamp.\n\n        An UTC Timestamp looks like:\n        $(UL\n            $(LI $(MONO 9912312359Z))\n            $(LI $(MONO 991231235959+0200))\n        )\n\n        If the first digit of the two-digit year is 7, 6, 5, 4, 3, 2, 1, or 0,\n        meaning that the date refers to the first 80 years of the century, this\n        assumes we are talking about the 21st century and prepend '20' when\n        creating the ISO Date String. Otherwise, it assumes we are talking\n        about the 20th century, and prepend '19' when creating the string.\n\n        See_Also:\n        $(UL\n            $(LI $(LINK https://www.obj-sys.com/asn1tutorial/node15.html, UTCTime))\n            $(LI $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueException) if the encoded value does not end with a 'Z')\n            $(LI $(D ASN1ValueCharactersException) if any character is not valid in a $(MONO Visiblestring))\n            $(LI $(D DateTimeException) if the encoded string cannot be decoded to a DateTime)\n        )\n",
      "line" : 3523,
      "char" : 14,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS3std8datetime4date8DateTime",
      "endline" : 3557,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.coordinatedUniversalTime"
      ]
     },
     {
      "name" : "coordinatedUniversalTime",
      "kind" : "function",
      "comment" : "        Encodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n        The value is just the ASCII character representation of\n        the UTC-formatted timestamp.\n\n        An UTC Timestamp looks like:\n        $(UL\n            $(LI $(MONO 9912312359Z))\n            $(LI $(MONO 991231235959+0200))\n        )\n\n        See_Also:\n            $(LINK https://www.obj-sys.com/asn1tutorial/node15.html, UTCTime)\n",
      "line" : 3574,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS3std8datetime4date8DateTimeZv",
      "originalType" : "@property @system void(in DateTime value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS3std8datetime4date8DateTime"
       }
      ],
      "endline" : 3586,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.coordinatedUniversalTime"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 3576,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 3576,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L3589_C5",
      "kind" : "function",
      "line" : 3589,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3632,
      "endchar" : 5
     },
     {
      "name" : "generalizedTime",
      "kind" : "function",
      "comment" : "        Decodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n        The value is just the ASCII character representation of\n        the $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601)-formatted timestamp.\n\n        An ISO-8601 Timestamp looks like:\n        $(UL\n            $(LI $(MONO 19851106210627.3))\n            $(LI $(MONO 19851106210627.3Z))\n            $(LI $(MONO 19851106210627.3-0500))\n        )\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueException) if the encoded value did not end with a 'Z'\n                or contained a misplaced or unnecessary decimal point)\n            $(LI $(D ASN1ValueCharactersException) if any character is not valid in a $(MONO Visiblestring))\n            $(LI $(D DateTimeException) if the encoded string cannot be decoded to a DateTime)\n            $(LI $(D ASN1ValuePaddingException) if the seconds fraction contains trailing zeroes)\n            $(LI $(D ASN1RecursionException)\n                if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException)\n                if any nested primitives do not share the\n                same tag class as their outer constructed element)\n            $(LI $(D ASN1TagNumberException)\n                if any nested primitives do not share the\n                same tag number as their outer constructed element)\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601))\n        )\n",
      "line" : 3633,
      "char" : 14,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS3std8datetime4date8DateTime",
      "endline" : 3706,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.generalizedTime"
      ]
     },
     {
      "name" : "generalizedTime",
      "kind" : "function",
      "comment" : "        Encodes a $(LINK https://dlang.org/phobos/std_datetime_date.html#.DateTime, DateTime).\n\n        The value is just the ASCII character representation of\n        the $(LINK https://www.iso.org/iso-8601-date-and-time-format.html,\n        ISO 8601)-formatted timestamp.\n\n        An ISO-8601 Timestamp looks like:\n        $(UL\n            $(LI $(MONO 19851106210627.3))\n            $(LI $(MONO 19851106210627.3Z))\n            $(LI $(MONO 19851106210627.3-0500))\n        )\n\n        Standards:\n        $(UL\n            $(LI $(LINK https://www.iso.org/iso-8601-date-and-time-format.html, ISO 8601))\n        )\n",
      "line" : 3728,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS3std8datetime4date8DateTimeZv",
      "originalType" : "@property @system void(in DateTime value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS3std8datetime4date8DateTime"
       }
      ],
      "endline" : 3739,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.generalizedTime"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 3730,
       "char" : 5,
       "deco" : "FNaZv",
       "originalType" : "@system void()",
       "endline" : 3730,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L3743_C5",
      "kind" : "function",
      "line" : 3743,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3758,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L3759_C5",
      "kind" : "function",
      "line" : 3759,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 3799,
      "endchar" : 5
     },
     {
      "name" : "graphicString",
      "kind" : "function",
      "comment" : "        Decodes an ASCII string that contains only characters between and\n        including $(D 0x20) and $(D 0x75). Deprecated, according to page 182 of the\n        Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueCharactersException) if any non-graphical character (including space) is encoded)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 3800,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3814,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.graphicString"
      ]
     },
     {
      "name" : "graphicString",
      "kind" : "function",
      "comment" : "        Encodes an ASCII string that may contain only characters between and\n        including $(D 0x20) and $(D 0x75). Deprecated, according to page 182\n        of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any non-graphical character (including space) is supplied)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, pp. 175-178.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 3836,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3846,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.graphicString"
      ]
     },
     {
      "name" : "visibleString",
      "kind" : "function",
      "comment" : "        Decodes a string that only contains characters between and including\n        $(D 0x20) and $(D 0x7E). (Honestly, I don't know how this differs from\n        $(MONO GraphicalString).)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueCharactersException)\n                if any non-graphical character (including space) is encoded)\n        )\n",
      "line" : 3861,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3875,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.visibleString"
      ]
     },
     {
      "name" : "visibleString",
      "kind" : "function",
      "comment" : "        Encodes a string that only contains characters between and including\n        $(D 0x20) and $(D 0x7E). (Honestly, I don't know how this differs from\n        $(MONO GraphicalString).)\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException)\n                if any non-graphical character (including space) is supplied.)\n        )\n",
      "line" : 3889,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3899,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.visibleString"
      ]
     },
     {
      "name" : "generalString",
      "kind" : "function",
      "comment" : "        Decodes a string containing only ASCII characters. Deprecated, according\n        to page 182 of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, p. 182.)\n            $(LI $(LINK https://en.wikipedia.org/wiki/ISO/IEC_2022, The Wikipedia Page on ISO 2022))\n            $(LI $(LINK https://www.iso.org/standard/22747.html, ISO 2022))\n        )\n",
      "line" : 3921,
      "char" : 12,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAya",
      "endline" : 3935,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.generalString"
      ]
     },
     {
      "name" : "generalString",
      "kind" : "function",
      "comment" : "        Encodes a string containing only ASCII characters. Deprecated,\n        according to page 182 of the Dubuisson book.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueCharactersException) if any encoded character is not ASCII)\n        )\n\n        Citations:\n        $(UL\n            $(LI Dubuisson, Olivier. “Basic Encoding Rules (BER).”\n                $(I ASN.1: Communication between Heterogeneous Systems),\n                Morgan Kaufmann, 2001, p. 182.)\n        )\n",
      "line" : 3954,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyaZv",
      "originalType" : "@property @system void(in string value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAya"
       }
      ],
      "endline" : 3964,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.generalString"
      ]
     },
     {
      "name" : "universalString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO dstring) of UTF-32 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueException)\n                if the encoded bytes is not evenly divisible by four)\n        )\n",
      "line" : 3977,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAyw",
      "endline" : 4018,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.universalString"
      ]
     },
     {
      "name" : "universalString",
      "kind" : "function",
      "comment" : "Encodes a $(MONO dstring) of UTF-32 characters.\n",
      "line" : 4022,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAywZv",
      "originalType" : "@property @system void(in dstring value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAyw"
       }
      ],
      "endline" : 4042,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.universalString"
      ]
     },
     {
      "name" : "characterString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO CharacterString), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CharacterString) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n\n        Returns: an instance of $(D types.universal.characterstring.CharacterString).\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ValueException) if encoded $(MONO CharacterString) has too few or too many\n                elements, or if $(MONO syntaxes) or $(MONO context-negotiation) element has\n                too few or too many elements)\n            $(LI $(D ASN1ValueSizeException) if encoded $(MONO INTEGER) is too large to decode)\n            $(LI $(D ASN1RecursionException) if using constructed form and the element\n                is constructed of too many nested constructed elements)\n            $(LI $(D ASN1TagClassException) if any nested primitives do not have the\n                correct tag class)\n            $(LI $(D ASN1ConstructionException) if any element has the wrong construction)\n            $(LI $(D ASN1TagNumberException) if any nested primitives do not have the\n                correct tag number)\n        )\n",
      "line" : 4088,
      "char" : 21,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZS4asn15types9universal15characterstring15CharacterString",
      "endline" : 4241,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.characterString"
      ]
     },
     {
      "name" : "characterString",
      "kind" : "function",
      "comment" : "        Encodes a $(MONO CharacterString), which is a constructed data type, defined\n        in the $(LINK https://www.itu.int, International Telecommunications Union)'s\n            $(LINK https://www.itu.int/rec/T-REC-X.680/en, X.680).\n\n        The specification defines $(MONO CharacterString) as:\n\n        $(PRE\n            CHARACTER STRING ::= [UNIVERSAL 29] SEQUENCE {\n                identification CHOICE {\n                    syntaxes SEQUENCE {\n                        abstract OBJECT IDENTIFIER,\n                        transfer OBJECT IDENTIFIER },\n                    syntax OBJECT IDENTIFIER,\n                    presentation-context-id INTEGER,\n                    context-negotiation SEQUENCE {\n                        presentation-context-id INTEGER,\n                        transfer-syntax OBJECT IDENTIFIER },\n                    transfer-syntax OBJECT IDENTIFIER,\n                    fixed NULL },\n                string-value OCTET STRING }\n        )\n\n        This assumes $(MONO AUTOMATIC TAGS), so all of the $(MONO identification)\n        choices will be $(MONO CONTEXT-SPECIFIC) and numbered from 0 to 5.\n",
      "line" : 4270,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxS4asn15types9universal15characterstring15CharacterStringZv",
      "originalType" : "@property @system void(in CharacterString value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xS4asn15types9universal15characterstring15CharacterString"
       }
      ],
      "endline" : 4325,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.characterString"
      ],
      "out" : {
       "name" : "__ensure",
       "kind" : "function",
       "line" : 4272,
       "char" : 5,
       "deco" : "FNaNbNiZv",
       "originalType" : "@system void()",
       "endline" : 4272,
       "endchar" : 5
      }
     },
     {
      "name" : "__unittest_L4336_C5",
      "kind" : "function",
      "line" : 4336,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4357,
      "endchar" : 5
     },
     {
      "name" : "__unittest_L4358_C5",
      "kind" : "function",
      "line" : 4358,
      "char" : 5,
      "storageClass" : [
       "@system"
      ],
      "endline" : 4404,
      "endchar" : 5
     },
     {
      "name" : "basicMultilingualPlaneString",
      "kind" : "function",
      "comment" : "        Decodes a $(MONO wstring) of UTF-16 characters.\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1ConstructionException) if the element is marked as \"constructed\")\n            $(LI $(D ASN1ValueException)\n                if the encoded bytes is not evenly divisible by two)\n        )\n",
      "line" : 4405,
      "char" : 13,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNdZAyu",
      "endline" : 4444,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.basicMultilingualPlaneString"
      ]
     },
     {
      "name" : "basicMultilingualPlaneString",
      "kind" : "function",
      "comment" : "Encodes a $(MONO wstring) of UTF-16 characters.\n",
      "line" : 4448,
      "char" : 10,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNdxAyuZv",
      "originalType" : "@property @system void(in wstring value)",
      "parameters" : [
       {
        "name" : "value",
        "deco" : "xAyu"
       }
      ],
      "endline" : 4468,
      "endchar" : 5,
      "overrides" : [
       "asn1.codec.ASN1Element!(DistinguishedEncodingRulesElement).AbstractSyntaxNotation1Element.basicMultilingualPlaneString"
      ]
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "Creates an $(MONO END OF CONTENT) by default\n",
      "line" : 4472,
      "char" : 5,
      "deco" : "FNbNiNfE4asn19constants31AbstractSyntaxNotation1TagClassEQBxQBv35AbstractSyntaxNotation1ConstructionkZCQDr6codecs3der33DistinguishedEncodingRulesElement",
      "originalType" : "nothrow @nogc @safe (ASN1TagClass tagClass = ASN1TagClass.universal, ASN1Construction construction = ASN1Construction.primitive, size_t tagNumber = 0u)",
      "parameters" : [
       {
        "name" : "tagClass",
        "deco" : "E4asn19constants31AbstractSyntaxNotation1TagClass",
        "default" : "cast(AbstractSyntaxNotation1TagClass)cast(ubyte)0u"
       },
       {
        "name" : "construction",
        "deco" : "E4asn19constants35AbstractSyntaxNotation1Construction",
        "default" : "cast(AbstractSyntaxNotation1Construction)cast(ubyte)0u"
       },
       {
        "name" : "tagNumber",
        "deco" : "k",
        "default" : "0u"
       }
      ],
      "endline" : 4483,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D DERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. The supplied $(D ubyte[]) array is \"chomped\" by\n        reference, so the original array will grow shorter as $(D DERElement)s are\n        generated.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes())\n\n        Examples:\n        ---\n        // Decoding looks like:\n        DERElement[] result;\n        while (bytes.length > 0)\n            result ~= new DERElement(bytes);\n\n        // Encoding looks like:\n        ubyte[] result;\n        foreach (dv; dervalues)\n        {\n            result ~= cast(ubyte[]) dv;\n        }\n        ---\n",
      "line" : 4510,
      "char" : 5,
      "deco" : "FKAhZC4asn16codecs3der33DistinguishedEncodingRulesElement",
      "originalType" : "@system (ref ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "Ah",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 4514,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D DERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. Unlike the construct that accepts a $(D ubyte[])\n        reference, this constructor does not \"chomp\" the array. This constructor\n        expects the encoded bytes to encode only one $(DERElement). If there are\n        any remaining bytes after decoding, an exception is thrown.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes()), but also throws an\n            $(D ASN1LengthException) if there are excess bytes.\n",
      "line" : 4528,
      "char" : 5,
      "deco" : "FxAhZC4asn16codecs3der33DistinguishedEncodingRulesElement",
      "originalType" : "@system (in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 4540,
      "endchar" : 5
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "comment" : "        Creates a $(D DERElement) from the supplied bytes, inferring that the first\n        byte is the type tag. The supplied $(D ubyte[]) array is read, starting\n        from the index specified by $(D bytesRead), and increments\n        $(D bytesRead) by the number of bytes read.\n\n        Throws:\n            All of the same exceptions as $(D fromBytes())\n\n        Examples:\n        ---\n        // Decoding looks like:\n        DERElement[] result;\n        size_t i = 0u;\n        while (i < bytes.length)\n            result ~= new DERElement(i, bytes);\n\n        // Encoding looks like:\n        ubyte[] result;\n        foreach (dv; dervalues)\n        {\n            result ~= cast(ubyte[]) dv;\n        }\n        ---\n",
      "line" : 4568,
      "char" : 5,
      "deco" : "FKkxAhZC4asn16codecs3der33DistinguishedEncodingRulesElement",
      "originalType" : "@system (ref size_t bytesRead, in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytesRead",
        "deco" : "k",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 4571,
      "endchar" : 5
     },
     {
      "name" : "fromBytes",
      "kind" : "function",
      "comment" : "        Returns: the number of bytes read\n\n        Throws:\n        $(UL\n            $(LI $(D ASN1TagPaddingException) if the tag number is \"padded\" with\n                \"leading zero bytes\" ($(D 0x80u)))\n            $(LI $(D ASN1TagOverflowException) if the tag number is too large to\n                fit into a $(D size_t))\n            $(LI $(D ASN1LengthUndefinedException) if the reserved length byte of\n                $(D 0xFF) is encountered)\n            $(LI $(D ASN1LengthOverflowException) if the length is too large to fit\n                into a $(D size_t))\n            $(LI $(D ASN1TruncationException) if the tag, length, or value appear to\n                be truncated)\n            $(LI $(D ASN1ConstructionException) if the length is indefinite, but the\n                element is marked as being encoded primitively)\n            $(LI $(D ASN1LengthException) if indefinite-length encoding is encountered)\n        )\n",
      "line" : 4594,
      "char" : 12,
      "deco" : "FxAhZk",
      "originalType" : "size_t(in ubyte[] bytes)",
      "parameters" : [
       {
        "name" : "bytes",
        "deco" : "xAh"
       }
      ],
      "endline" : 4799,
      "endchar" : 5,
      "overrides" : [
       "asn1.interfaces.Byteable.fromBytes"
      ]
     },
     {
      "name" : "toBytes",
      "kind" : "function",
      "comment" : "        This differs from $(D this.value) in that\n        $(D this.value) only returns the value octets, whereas\n        $(D this.toBytes) returns the type tag, length tag / octets,\n        and the value octets, all concatenated.\n\n        This is the exact same as $(D this.opCast!(ubyte[])()).\n\n        Returns: type tag, length tag, and value, all concatenated as a $(D ubyte) array.\n",
      "line" : 4812,
      "char" : 13,
      "deco" : "xFNbNdZAh",
      "endline" : 4871,
      "endchar" : 5,
      "overrides" : [
       "asn1.interfaces.Byteable.toBytes"
      ]
     },
     {
      "kind" : "template",
      "comment" : "        This differs from $(D this.value) in that\n        $(D this.value) only returns the value octets, whereas\n        $(D this.toBytes) returns the type tag, length tag / octets,\n        and the value octets, all concatenated.\n\n        This is the exact same as $(D this.toBytes()).\n\n        Returns: type tag, length tag, and value, all concatenated as a $(D ubyte) array.\n",
      "line" : 4884,
      "char" : 13,
      "name" : "opCast",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type",
        "default" : "ubyte[]"
       }
      ],
      "members" : [
       {
        "name" : "opCast",
        "kind" : "function",
        "line" : 4884,
        "char" : 13,
        "type" : "nothrow @system ubyte[]()",
        "endline" : 4887,
        "endchar" : 5
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L4893_C1",
    "kind" : "function",
    "line" : 4893,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5045,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5046_C1",
    "kind" : "function",
    "line" : 5046,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5087,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5088_C1",
    "kind" : "function",
    "line" : 5088,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5123,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5124_C1",
    "kind" : "function",
    "line" : 5124,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5147,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5148_C1",
    "kind" : "function",
    "line" : 5148,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5165,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5166_C1",
    "kind" : "function",
    "line" : 5166,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5180,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5181_C1",
    "kind" : "function",
    "line" : 5181,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5190,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5191_C1",
    "kind" : "function",
    "line" : 5191,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5198,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5199_C1",
    "kind" : "function",
    "line" : 5199,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5206,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5207_C1",
    "kind" : "function",
    "line" : 5207,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5214,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5215_C1",
    "kind" : "function",
    "line" : 5215,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5226,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5227_C1",
    "kind" : "function",
    "line" : 5227,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5238,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5239_C1",
    "kind" : "function",
    "line" : 5239,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5247,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5248_C1",
    "kind" : "function",
    "line" : 5248,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5273,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L5274_C1",
    "kind" : "function",
    "line" : 5274,
    "char" : 1,
    "storageClass" : [
     "@system"
    ],
    "endline" : 5290,
    "endchar" : 2
   }
  ]
 }
]
